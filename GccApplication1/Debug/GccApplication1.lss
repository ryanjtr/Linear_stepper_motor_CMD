
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000017b4  00001848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004af  00800218  00800218  00001960  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002940  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001171  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018da  00000000  00000000  00005709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  00006fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000102f  00000000  00000000  000076ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ed  00000000  00000000  0000871b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000a008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_11>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      38:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_14>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_18>
      4c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_19>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      68:	fb 0a       	sbc	r15, r27
      6a:	00 0b       	sbc	r16, r16
      6c:	00 0b       	sbc	r16, r16
      6e:	00 0b       	sbc	r16, r16
      70:	00 0b       	sbc	r16, r16
      72:	00 0b       	sbc	r16, r16
      74:	00 0b       	sbc	r16, r16
      76:	00 0b       	sbc	r16, r16
      78:	00 0b       	sbc	r16, r16
      7a:	00 0b       	sbc	r16, r16
      7c:	00 0b       	sbc	r16, r16
      7e:	9e 08       	sbc	r9, r14
      80:	9e 08       	sbc	r9, r14
      82:	9e 08       	sbc	r9, r14
      84:	9e 08       	sbc	r9, r14
      86:	9e 08       	sbc	r9, r14
      88:	9e 08       	sbc	r9, r14
      8a:	9e 08       	sbc	r9, r14
      8c:	9e 08       	sbc	r9, r14
      8e:	9e 08       	sbc	r9, r14
      90:	9e 08       	sbc	r9, r14
      92:	00 0b       	sbc	r16, r16
      94:	00 0b       	sbc	r16, r16
      96:	00 0b       	sbc	r16, r16
      98:	00 0b       	sbc	r16, r16
      9a:	00 0b       	sbc	r16, r16
      9c:	00 0b       	sbc	r16, r16
      9e:	00 0b       	sbc	r16, r16
      a0:	00 0b       	sbc	r16, r16
      a2:	00 0b       	sbc	r16, r16
      a4:	00 0b       	sbc	r16, r16
      a6:	00 0b       	sbc	r16, r16
      a8:	00 0b       	sbc	r16, r16
      aa:	00 0b       	sbc	r16, r16
      ac:	00 0b       	sbc	r16, r16
      ae:	00 0b       	sbc	r16, r16
      b0:	00 0b       	sbc	r16, r16
      b2:	00 0b       	sbc	r16, r16
      b4:	00 0b       	sbc	r16, r16
      b6:	00 0b       	sbc	r16, r16
      b8:	00 0b       	sbc	r16, r16
      ba:	00 0b       	sbc	r16, r16
      bc:	00 0b       	sbc	r16, r16
      be:	00 0b       	sbc	r16, r16
      c0:	00 0b       	sbc	r16, r16
      c2:	00 0b       	sbc	r16, r16
      c4:	00 0b       	sbc	r16, r16
      c6:	00 0b       	sbc	r16, r16
      c8:	00 0b       	sbc	r16, r16
      ca:	00 0b       	sbc	r16, r16
      cc:	00 0b       	sbc	r16, r16
      ce:	a8 09       	sbc	r26, r8
      d0:	00 0b       	sbc	r16, r16
      d2:	00 0b       	sbc	r16, r16
      d4:	00 0b       	sbc	r16, r16
      d6:	00 0b       	sbc	r16, r16
      d8:	00 0b       	sbc	r16, r16
      da:	00 0b       	sbc	r16, r16
      dc:	00 0b       	sbc	r16, r16
      de:	00 0b       	sbc	r16, r16
      e0:	00 0b       	sbc	r16, r16
      e2:	00 0b       	sbc	r16, r16
      e4:	da 08       	sbc	r13, r10
      e6:	ee 08       	sbc	r14, r14
      e8:	00 0b       	sbc	r16, r16
      ea:	00 0b       	sbc	r16, r16
      ec:	00 0b       	sbc	r16, r16
      ee:	00 0b       	sbc	r16, r16
      f0:	ee 08       	sbc	r14, r14
      f2:	00 0b       	sbc	r16, r16
      f4:	00 0b       	sbc	r16, r16
      f6:	00 0b       	sbc	r16, r16
      f8:	00 0b       	sbc	r16, r16
      fa:	00 0b       	sbc	r16, r16
      fc:	00 0b       	sbc	r16, r16
      fe:	a8 09       	sbc	r26, r8
     100:	00 0b       	sbc	r16, r16
     102:	00 0b       	sbc	r16, r16
     104:	2a 09       	sbc	r18, r10
     106:	00 0b       	sbc	r16, r16
     108:	8b 09       	sbc	r24, r11
     10a:	00 0b       	sbc	r16, r16
     10c:	00 0b       	sbc	r16, r16
     10e:	a8 09       	sbc	r26, r8

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d8 e0       	ldi	r29, 0x08	; 8
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	12 e0       	ldi	r17, 0x02	; 2
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e4 eb       	ldi	r30, 0xB4	; 180
     124:	f7 e1       	ldi	r31, 0x17	; 23
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a8 31       	cpi	r26, 0x18	; 24
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	26 e0       	ldi	r18, 0x06	; 6
     134:	a8 e1       	ldi	r26, 0x18	; 24
     136:	b2 e0       	ldi	r27, 0x02	; 2
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a7 3c       	cpi	r26, 0xC7	; 199
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
     146:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <CmdLineProcess>:
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	fc 01       	movw	r30, r24
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	c0 e0       	ldi	r28, 0x00	; 0
     15a:	14 c0       	rjmp	.+40     	; 0x184 <CmdLineProcess+0x36>
     15c:	80 32       	cpi	r24, 0x20	; 32
     15e:	19 f4       	brne	.+6      	; 0x166 <CmdLineProcess+0x18>
     160:	10 82       	st	Z, r1
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e c0       	rjmp	.+28     	; 0x182 <CmdLineProcess+0x34>
     166:	99 23       	and	r25, r25
     168:	61 f0       	breq	.+24     	; 0x182 <CmdLineProcess+0x34>
     16a:	c8 30       	cpi	r28, 0x08	; 8
     16c:	90 f5       	brcc	.+100    	; 0x1d2 <CmdLineProcess+0x84>
     16e:	ac 2f       	mov	r26, r28
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	aa 0f       	add	r26, r26
     174:	bb 1f       	adc	r27, r27
     176:	a8 5e       	subi	r26, 0xE8	; 232
     178:	bd 4f       	sbci	r27, 0xFD	; 253
     17a:	ed 93       	st	X+, r30
     17c:	fc 93       	st	X, r31
     17e:	cf 5f       	subi	r28, 0xFF	; 255
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	81 11       	cpse	r24, r1
     188:	e9 cf       	rjmp	.-46     	; 0x15c <CmdLineProcess+0xe>
     18a:	c1 11       	cpse	r28, r1
     18c:	18 c0       	rjmp	.+48     	; 0x1be <CmdLineProcess+0x70>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	21 c0       	rjmp	.+66     	; 0x1d4 <CmdLineProcess+0x86>
     192:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     196:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x1>
     19a:	0e 94 c7 0b 	call	0x178e	; 0x178e <strcmp>
     19e:	89 2b       	or	r24, r25
     1a0:	59 f4       	brne	.+22     	; 0x1b8 <CmdLineProcess+0x6a>
     1a2:	d8 01       	movw	r26, r16
     1a4:	12 96       	adiw	r26, 0x02	; 2
     1a6:	ed 91       	ld	r30, X+
     1a8:	fc 91       	ld	r31, X
     1aa:	13 97       	sbiw	r26, 0x03	; 3
     1ac:	68 e1       	ldi	r22, 0x18	; 24
     1ae:	72 e0       	ldi	r23, 0x02	; 2
     1b0:	8c 2f       	mov	r24, r28
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	09 95       	icall
     1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <CmdLineProcess+0x86>
     1b8:	0a 5f       	subi	r16, 0xFA	; 250
     1ba:	1f 4f       	sbci	r17, 0xFF	; 255
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <CmdLineProcess+0x74>
     1be:	07 e0       	ldi	r16, 0x07	; 7
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	f8 01       	movw	r30, r16
     1c4:	60 81       	ld	r22, Z
     1c6:	71 81       	ldd	r23, Z+1	; 0x01
     1c8:	61 15       	cp	r22, r1
     1ca:	71 05       	cpc	r23, r1
     1cc:	11 f7       	brne	.-60     	; 0x192 <CmdLineProcess+0x44>
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <CmdLineProcess+0x86>
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	08 95       	ret

000001dc <Cmd_help>:
void	command_create_task(void)
{
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
}

int Cmd_help(int argc, char *argv[]) {
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
	tCmdLineEntry *pEntry;

	usart0_send_string("\nAvailable commands\r\n");
     1e0:	8c e2       	ldi	r24, 0x2C	; 44
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
	usart0_send_string("------------------\r\n");
     1e8:	82 e4       	ldi	r24, 0x42	; 66
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
     1f0:	c7 e0       	ldi	r28, 0x07	; 7
     1f2:	d1 e0       	ldi	r29, 0x01	; 1

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <Cmd_help+0x30>
		// Print the command name and the brief description.
		usart0_send_string(pEntry->pcCmd);
     1f6:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
		usart0_send_string(pEntry->pcHelp);
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	9d 81       	ldd	r25, Y+5	; 0x05
     1fe:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
		usart0_send_string("\r\n");
     202:	84 e5       	ldi	r24, 0x54	; 84
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>

		// Advance to the next entry in the table.
		pEntry++;
     20a:	26 96       	adiw	r28, 0x06	; 6
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
     20c:	88 81       	ld	r24, Y
     20e:	99 81       	ldd	r25, Y+1	; 0x01
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	89 f7       	brne	.-30     	; 0x1f6 <Cmd_help+0x1a>
		pEntry++;

	}
	// Return success.
	return (CMDLINE_OK);
}
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <command_task_update>:
		command_task_update                // taskFunction;
	}
};

static	void	command_task_update(void)
{
     21e:	cf 93       	push	r28
	char rxData;
	int8_t	ret_val;
	while (! rbuffer_empty(p_CommandRingBuffer))
     220:	4c c0       	rjmp	.+152    	; 0x2ba <command_task_update+0x9c>
	{
		rxData = rbuffer_remove(p_CommandRingBuffer);
     222:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <p_CommandRingBuffer>
     226:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <p_CommandRingBuffer+0x1>
     22a:	0e 94 24 07 	call	0xe48	; 0xe48 <rbuffer_remove>
     22e:	c8 2f       	mov	r28, r24
		usart0_send_char(rxData);
     230:	0e 94 66 07 	call	0xecc	; 0xecc <usart0_send_char>
		if ((rxData == '\r') || (rxData == '\n'))		//got a return or new line
     234:	cd 30       	cpi	r28, 0x0D	; 13
     236:	11 f0       	breq	.+4      	; 0x23c <command_task_update+0x1e>
     238:	ca 30       	cpi	r28, 0x0A	; 10
     23a:	29 f5       	brne	.+74     	; 0x286 <command_task_update+0x68>
		{
			if (s_commandBufferIndex > 0)		//if we got the CR or LF at the begining, discard
     23c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <s_commandBufferIndex>
     240:	88 23       	and	r24, r24
     242:	e1 f0       	breq	.+56     	; 0x27c <command_task_update+0x5e>
			{
				s_commandBuffer[s_commandBufferIndex] = 0;
     244:	e8 2f       	mov	r30, r24
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	e5 5d       	subi	r30, 0xD5	; 213
     24a:	fd 4f       	sbci	r31, 0xFD	; 253
     24c:	10 82       	st	Z, r1
				s_commandBufferIndex++;
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <s_commandBufferIndex>
				ret_val = CmdLineProcess(s_commandBuffer);
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 a7 00 	call	0x14e	; 0x14e <CmdLineProcess>
				s_commandBufferIndex = 0;
     25c:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <s_commandBufferIndex>
				usart0_send_string(ErrorCode[ret_val]);
     260:	88 0f       	add	r24, r24
     262:	99 0b       	sbc	r25, r25
     264:	fc 01       	movw	r30, r24
     266:	e7 5e       	subi	r30, 0xE7	; 231
     268:	fe 4f       	sbci	r31, 0xFE	; 254
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
				usart0_send_string("> ");
     272:	89 e5       	ldi	r24, 0x59	; 89
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
     27a:	1f c0       	rjmp	.+62     	; 0x2ba <command_task_update+0x9c>
			}
			else usart0_send_string("\r\n> ");
     27c:	87 e5       	ldi	r24, 0x57	; 87
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
     284:	1a c0       	rjmp	.+52     	; 0x2ba <command_task_update+0x9c>
		}
		else if ((rxData == 8) || (rxData == 127))
     286:	c8 30       	cpi	r28, 0x08	; 8
     288:	11 f0       	breq	.+4      	; 0x28e <command_task_update+0x70>
     28a:	cf 37       	cpi	r28, 0x7F	; 127
     28c:	41 f4       	brne	.+16     	; 0x29e <command_task_update+0x80>
		{
			if (s_commandBufferIndex > 0) s_commandBufferIndex--;
     28e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <s_commandBufferIndex>
     292:	88 23       	and	r24, r24
     294:	91 f0       	breq	.+36     	; 0x2ba <command_task_update+0x9c>
     296:	81 50       	subi	r24, 0x01	; 1
     298:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <s_commandBufferIndex>
     29c:	0e c0       	rjmp	.+28     	; 0x2ba <command_task_update+0x9c>
		}
		else
		{
			s_commandBuffer[s_commandBufferIndex] = rxData;
     29e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <s_commandBufferIndex>
     2a2:	e8 2f       	mov	r30, r24
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	e5 5d       	subi	r30, 0xD5	; 213
     2a8:	fd 4f       	sbci	r31, 0xFD	; 253
     2aa:	c0 83       	st	Z, r28
			s_commandBufferIndex ++;
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <s_commandBufferIndex>
			if (s_commandBufferIndex > COMMAND_MAX_LENGTH) s_commandBufferIndex= 0;
     2b2:	81 34       	cpi	r24, 0x41	; 65
     2b4:	10 f0       	brcs	.+4      	; 0x2ba <command_task_update+0x9c>
     2b6:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <s_commandBufferIndex>

static	void	command_task_update(void)
{
	char rxData;
	int8_t	ret_val;
	while (! rbuffer_empty(p_CommandRingBuffer))
     2ba:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <p_CommandRingBuffer>
     2be:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <p_CommandRingBuffer+0x1>
     2c2:	0e 94 00 07 	call	0xe00	; 0xe00 <rbuffer_empty>
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <command_task_update+0xae>
     2ca:	ab cf       	rjmp	.-170    	; 0x222 <command_task_update+0x4>
			s_commandBuffer[s_commandBufferIndex] = rxData;
			s_commandBufferIndex ++;
			if (s_commandBufferIndex > COMMAND_MAX_LENGTH) s_commandBufferIndex= 0;
		}
	}
}
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <Cmd_moto_control_speed>:
	// Return success.
	return (CMDLINE_OK);
}


int Cmd_moto_control_speed (int argc, char *argv[]) {
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
     2e0:	85 30       	cpi	r24, 0x05	; 5
     2e2:	91 05       	cpc	r25, r1
     2e4:	fc f0       	brlt	.+62     	; 0x324 <Cmd_moto_control_speed+0x54>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
     2e6:	06 97       	sbiw	r24, 0x06	; 6
     2e8:	04 f5       	brge	.+64     	; 0x32a <Cmd_moto_control_speed+0x5a>
     2ea:	eb 01       	movw	r28, r22
	int32_t step = atoi(argv[1]);
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	9b 81       	ldd	r25, Y+3	; 0x03
     2f0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <atoi>
     2f4:	8c 01       	movw	r16, r24
	int32_t accel = atoi(argv[2]);
     2f6:	8c 81       	ldd	r24, Y+4	; 0x04
     2f8:	9d 81       	ldd	r25, Y+5	; 0x05
     2fa:	0e 94 a9 0b 	call	0x1752	; 0x1752 <atoi>
     2fe:	7c 01       	movw	r14, r24
	int32_t decel = atoi(argv[3]);
     300:	8e 81       	ldd	r24, Y+6	; 0x06
     302:	9f 81       	ldd	r25, Y+7	; 0x07
     304:	0e 94 a9 0b 	call	0x1752	; 0x1752 <atoi>
     308:	6c 01       	movw	r12, r24
	int32_t speed = atoi(argv[4]);
     30a:	88 85       	ldd	r24, Y+8	; 0x08
     30c:	99 85       	ldd	r25, Y+9	; 0x09
     30e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <atoi>
	speed_ctrl_Move(step, accel, decel, speed);
     312:	9c 01       	movw	r18, r24
     314:	a6 01       	movw	r20, r12
     316:	b7 01       	movw	r22, r14
     318:	c8 01       	movw	r24, r16
     31a:	0e 94 1c 02 	call	0x438	; 0x438 <speed_ctrl_Move>
	return CMDLINE_OK;
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	05 c0       	rjmp	.+10     	; 0x32e <Cmd_moto_control_speed+0x5e>
	return (CMDLINE_OK);
}


int Cmd_moto_control_speed (int argc, char *argv[]) {
	if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <Cmd_moto_control_speed+0x5e>
	if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	90 e0       	ldi	r25, 0x00	; 0
	int32_t accel = atoi(argv[2]);
	int32_t decel = atoi(argv[3]);
	int32_t speed = atoi(argv[4]);
	speed_ctrl_Move(step, accel, decel, speed);
	return CMDLINE_OK;
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	ef 90       	pop	r14
     33a:	df 90       	pop	r13
     33c:	cf 90       	pop	r12
     33e:	08 95       	ret

00000340 <command_init>:
	}
}

void	command_init(void)
{
	usart0_init();
     340:	0e 94 41 07 	call	0xe82	; 0xe82 <usart0_init>
	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
     344:	0e 94 a6 07 	call	0xf4c	; 0xf4c <uart_get_uart0_rx_buffer_address>
     348:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <p_CommandRingBuffer+0x1>
     34c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <p_CommandRingBuffer>
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
     350:	80 e4       	ldi	r24, 0x40	; 64
     352:	eb e2       	ldi	r30, 0x2B	; 43
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	df 01       	movw	r26, r30
     358:	1d 92       	st	X+, r1
     35a:	8a 95       	dec	r24
     35c:	e9 f7       	brne	.-6      	; 0x358 <command_init+0x18>
	s_commandBufferIndex = 0;
     35e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <s_commandBufferIndex>
	usart0_send_string("> ");
     362:	89 e5       	ldi	r24, 0x59	; 89
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 82 07 	call	0xf04	; 0xf04 <usart0_send_string>
     36a:	08 95       	ret

0000036c <command_create_task>:
/*	command_send_splash();*/
}

void	command_create_task(void)
{
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SCH_TASK_CreateTask>
     378:	08 95       	ret

0000037a <main>:
struct GLOBAL_FLAGS status = {FALSE, FALSE, 0};


int main(void)
{	
	SCH_Initialize();
     37a:	0e 94 30 05 	call	0xa60	; 0xa60 <SCH_Initialize>
	command_init();
     37e:	0e 94 a0 01 	call	0x340	; 0x340 <command_init>
	command_create_task();
     382:	0e 94 b6 01 	call	0x36c	; 0x36c <command_create_task>
 	step_motor_init();
     386:	0e 94 ca 06 	call	0xd94	; 0xd94 <step_motor_init>
 	step_motor_create_task();
     38a:	0e 94 d0 06 	call	0xda0	; 0xda0 <step_motor_create_task>
	SCH_StartSchedular();
     38e:	0e 94 3b 06 	call	0xc76	; 0xc76 <SCH_StartSchedular>
	while(1)
	{
/*		speed_cntr_Move(steps, acceleration, deceleration, speed);*/
		SCH_HandleScheduledTask();
     392:	0e 94 3e 06 	call	0xc7c	; 0xc7c <SCH_HandleScheduledTask>
     396:	fd cf       	rjmp	.-6      	; 0x392 <main+0x18>

00000398 <sm_driver_Init_IO>:
/*! \brief Init of io-pins for stepper motor.
 */
void sm_driver_Init_IO(void)
{
  // Init of IO pins
  DDRC |= ((1 << DDC2) | (1 << DDC3)); // Set output pin direction registers to output
     398:	87 b1       	in	r24, 0x07	; 7
     39a:	8c 60       	ori	r24, 0x0C	; 12
     39c:	87 b9       	out	0x07, r24	; 7
     39e:	08 95       	ret

000003a0 <sqrt_t>:
 *
 *  \param x  Value to find square root of.
 *  \return  Square root of x.
 */
static unsigned long sqrt_t(unsigned long x)
{
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
  register unsigned long xr; // result register
  register unsigned long q2; // scan-bit register
  register unsigned char f;  // flag (one bit)

  xr = 0;           // clear result
  q2 = 0x40000000L; // higest possible result bit
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e4       	ldi	r27, 0x40	; 64
{
  register unsigned long xr; // result register
  register unsigned long q2; // scan-bit register
  register unsigned char f;  // flag (one bit)

  xr = 0;           // clear result
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	ba 01       	movw	r22, r20
  q2 = 0x40000000L; // higest possible result bit
  do
  {
    if ((xr + q2) <= x)
     3be:	8a 01       	movw	r16, r20
     3c0:	9b 01       	movw	r18, r22
     3c2:	08 0f       	add	r16, r24
     3c4:	19 1f       	adc	r17, r25
     3c6:	2a 1f       	adc	r18, r26
     3c8:	3b 1f       	adc	r19, r27
     3ca:	c0 16       	cp	r12, r16
     3cc:	d1 06       	cpc	r13, r17
     3ce:	e2 06       	cpc	r14, r18
     3d0:	f3 06       	cpc	r15, r19
     3d2:	30 f0       	brcs	.+12     	; 0x3e0 <sqrt_t+0x40>
    {
      x -= xr + q2;
     3d4:	c0 1a       	sub	r12, r16
     3d6:	d1 0a       	sbc	r13, r17
     3d8:	e2 0a       	sbc	r14, r18
     3da:	f3 0a       	sbc	r15, r19
      f = 1; // set flag
     3dc:	21 e0       	ldi	r18, 0x01	; 1
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <sqrt_t+0x42>
    }
    else
    {
      f = 0; // clear flag
     3e0:	20 e0       	ldi	r18, 0x00	; 0
    }
    xr >>= 1;
     3e2:	76 95       	lsr	r23
     3e4:	67 95       	ror	r22
     3e6:	57 95       	ror	r21
     3e8:	47 95       	ror	r20
    if (f)
     3ea:	22 23       	and	r18, r18
     3ec:	21 f0       	breq	.+8      	; 0x3f6 <sqrt_t+0x56>
    {
      xr += q2; // test flag
     3ee:	48 0f       	add	r20, r24
     3f0:	59 1f       	adc	r21, r25
     3f2:	6a 1f       	adc	r22, r26
     3f4:	7b 1f       	adc	r23, r27
    }
  } while (q2 >>= 2); // shift twice
     3f6:	b6 95       	lsr	r27
     3f8:	a7 95       	ror	r26
     3fa:	97 95       	ror	r25
     3fc:	87 95       	ror	r24
     3fe:	b6 95       	lsr	r27
     400:	a7 95       	ror	r26
     402:	97 95       	ror	r25
     404:	87 95       	ror	r24
     406:	00 97       	sbiw	r24, 0x00	; 0
     408:	a1 05       	cpc	r26, r1
     40a:	b1 05       	cpc	r27, r1
     40c:	c1 f6       	brne	.-80     	; 0x3be <sqrt_t+0x1e>
  if (xr < x)
     40e:	4c 15       	cp	r20, r12
     410:	5d 05       	cpc	r21, r13
     412:	6e 05       	cpc	r22, r14
     414:	7f 05       	cpc	r23, r15
     416:	38 f4       	brcc	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
  {
    return xr + 1; // add for rounding
     418:	cb 01       	movw	r24, r22
     41a:	ba 01       	movw	r22, r20
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	8f 4f       	sbci	r24, 0xFF	; 255
     422:	9f 4f       	sbci	r25, 0xFF	; 255
     424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
  }
  else
  {
    return xr;
     426:	cb 01       	movw	r24, r22
     428:	ba 01       	movw	r22, r20
  }
}
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	08 95       	ret

00000438 <speed_ctrl_Move>:
 *  \param accel  Accelration to use, in 0.01*rad/sec^2.
 *  \param decel  Decelration to use, in 0.01*rad/sec^2.
 *  \param speed  Max speed, in 0.01*rad/sec.
 */
void speed_ctrl_Move(signed int step, unsigned int accel, unsigned int decel, unsigned int speed)
{
     438:	2f 92       	push	r2
     43a:	3f 92       	push	r3
     43c:	4f 92       	push	r4
     43e:	5f 92       	push	r5
     440:	6f 92       	push	r6
     442:	7f 92       	push	r7
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	28 97       	sbiw	r28, 0x08	; 8
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	98 87       	std	Y+8, r25	; 0x08
     46a:	8f 83       	std	Y+7, r24	; 0x07
     46c:	1b 01       	movw	r2, r22
     46e:	5a 01       	movw	r10, r20
     470:	69 01       	movw	r12, r18
	
	UARTprintf("%d\r\n", step);
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	0c ef       	ldi	r16, 0xFC	; 252
     478:	11 e0       	ldi	r17, 0x01	; 1
     47a:	1f 93       	push	r17
     47c:	0f 93       	push	r16
     47e:	0e 94 20 0b 	call	0x1640	; 0x1640 <UARTprintf>
	UARTprintf("%d\r\n", accel);
     482:	3f 92       	push	r3
     484:	2f 92       	push	r2
     486:	1f 93       	push	r17
     488:	0f 93       	push	r16
     48a:	0e 94 20 0b 	call	0x1640	; 0x1640 <UARTprintf>
	UARTprintf("%d\r\n", decel);
     48e:	bf 92       	push	r11
     490:	af 92       	push	r10
     492:	1f 93       	push	r17
     494:	0f 93       	push	r16
     496:	0e 94 20 0b 	call	0x1640	; 0x1640 <UARTprintf>
	UARTprintf("%d\r\n", speed);
     49a:	df 92       	push	r13
     49c:	cf 92       	push	r12
     49e:	1f 93       	push	r17
     4a0:	0f 93       	push	r16
     4a2:	0e 94 20 0b 	call	0x1640	; 0x1640 <UARTprintf>
  unsigned int max_s_lim;
  //! Number of steps before we must start deceleration (if accel does not hit max speed).
  unsigned int accel_lim;

  // Set direction from sign on step value.
  if (step < 0)
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	8f 81       	ldd	r24, Y+7	; 0x07
     4b2:	98 85       	ldd	r25, Y+8	; 0x08
     4b4:	99 23       	and	r25, r25
     4b6:	6c f4       	brge	.+26     	; 0x4d2 <speed_ctrl_Move+0x9a>
  {
    srd.dir = CCW;
     4b8:	e6 ea       	ldi	r30, 0xA6	; 166
     4ba:	f5 e0       	ldi	r31, 0x05	; 5
     4bc:	80 81       	ld	r24, Z
     4be:	88 60       	ori	r24, 0x08	; 8
     4c0:	80 83       	st	Z, r24
    step = -step;
     4c2:	af 81       	ldd	r26, Y+7	; 0x07
     4c4:	b8 85       	ldd	r27, Y+8	; 0x08
     4c6:	b1 95       	neg	r27
     4c8:	a1 95       	neg	r26
     4ca:	b1 09       	sbc	r27, r1
     4cc:	b8 87       	std	Y+8, r27	; 0x08
     4ce:	af 83       	std	Y+7, r26	; 0x07
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <speed_ctrl_Move+0xa4>
  }
  else
  {
    srd.dir = CW;
     4d2:	e6 ea       	ldi	r30, 0xA6	; 166
     4d4:	f5 e0       	ldi	r31, 0x05	; 5
     4d6:	80 81       	ld	r24, Z
     4d8:	87 7f       	andi	r24, 0xF7	; 247
     4da:	80 83       	st	Z, r24
  }

  // If moving only 1 step.
  if (step == 1)
     4dc:	ef 81       	ldd	r30, Y+7	; 0x07
     4de:	f8 85       	ldd	r31, Y+8	; 0x08
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	f9 f4       	brne	.+62     	; 0x522 <speed_ctrl_Move+0xea>
  {
    // Move one step...
    srd.accel_count = -1;
     4e4:	e6 ea       	ldi	r30, 0xA6	; 166
     4e6:	f5 e0       	ldi	r31, 0x05	; 5
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	92 87       	std	Z+10, r25	; 0x0a
     4ee:	81 87       	std	Z+9, r24	; 0x09
    // ...in DECEL state.
    srd.run_state = DECEL;
     4f0:	80 81       	ld	r24, Z
     4f2:	88 7f       	andi	r24, 0xF8	; 248
     4f4:	82 60       	ori	r24, 0x02	; 2
     4f6:	80 83       	st	Z, r24
    // Just a short delay so main() can act on 'running'.
    srd.step_delay = 1000;
     4f8:	88 ee       	ldi	r24, 0xE8	; 232
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	92 83       	std	Z+2, r25	; 0x02
     4fe:	81 83       	std	Z+1, r24	; 0x01
    status.running = TRUE;
     500:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <status>
     504:	81 60       	ori	r24, 0x01	; 1
     506:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <status>
    OCR1A = 10;
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     512:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Run Timer/Counter 1 with prescaler = 8.
    TCCR1B |= (1 << CS11);
     516:	e1 e8       	ldi	r30, 0x81	; 129
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	80 83       	st	Z, r24
     520:	d5 c0       	rjmp	.+426    	; 0x6cc <speed_ctrl_Move+0x294>
  }
  // Only move if number of steps to move is not zero.
  else if (step != 0)
     522:	2f 81       	ldd	r18, Y+7	; 0x07
     524:	38 85       	ldd	r19, Y+8	; 0x08
     526:	23 2b       	or	r18, r19
     528:	09 f4       	brne	.+2      	; 0x52c <speed_ctrl_Move+0xf4>
     52a:	d0 c0       	rjmp	.+416    	; 0x6cc <speed_ctrl_Move+0x294>
  {
    // Refer to documentation for detailed information about these calculations.

    // Set max speed limit, by calc min_delay to use in timer.
    // min_delay = (alpha / tt)/ w
    srd.min_delay = A_T_x100 / speed;
     52c:	e1 2c       	mov	r14, r1
     52e:	f1 2c       	mov	r15, r1
     530:	6b ee       	ldi	r22, 0xEB	; 235
     532:	77 ef       	ldi	r23, 0xF7	; 247
     534:	87 e1       	ldi	r24, 0x17	; 23
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     540:	29 01       	movw	r4, r18
     542:	3a 01       	movw	r6, r20
     544:	06 ea       	ldi	r16, 0xA6	; 166
     546:	15 e0       	ldi	r17, 0x05	; 5
     548:	d8 01       	movw	r26, r16
     54a:	18 96       	adiw	r26, 0x08	; 8
     54c:	3c 93       	st	X, r19
     54e:	2e 93       	st	-X, r18
     550:	17 97       	sbiw	r26, 0x07	; 7

    // Set accelration by calc the first (c0) step delay .
    // step_delay = 1/tt * sqrt(2*alpha/accel)
    // step_delay = ( tfreq*0.676/100 )*100 * sqrt( (2*alpha*10000000000) / (accel*100) )/10000
    srd.step_delay = (T1_FREQ_148 * sqrt_t(A_SQ / accel)) / 100;
     552:	c1 01       	movw	r24, r2
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	ab 83       	std	Y+3, r26	; 0x03
     55e:	bc 83       	std	Y+4, r27	; 0x04
     560:	60 ea       	ldi	r22, 0xA0	; 160
     562:	7f ea       	ldi	r23, 0xAF	; 175
     564:	89 eb       	ldi	r24, 0xB9	; 185
     566:	92 e1       	ldi	r25, 0x12	; 18
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	4b 81       	ldd	r20, Y+3	; 0x03
     56e:	5c 81       	ldd	r21, Y+4	; 0x04
     570:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     574:	ca 01       	movw	r24, r20
     576:	b9 01       	movw	r22, r18
     578:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <sqrt_t>
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	a8 e6       	ldi	r26, 0x68	; 104
     582:	ba e1       	ldi	r27, 0x1A	; 26
     584:	0e 94 87 0b 	call	0x170e	; 0x170e <__muluhisi3>
     588:	24 e6       	ldi	r18, 0x64	; 100
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	2d 83       	std	Y+5, r18	; 0x05
     598:	d8 01       	movw	r26, r16
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	3c 93       	st	X, r19
     59e:	2e 93       	st	-X, r18
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    /*usart0_send_string("step delay = %f\n",srd.step_delay);*/
    // Find out after how many steps does the speed hit the max speed limit.
    // max_s_lim = speed^2 / (2*alpha*accel)
    max_s_lim = (long)speed * speed / (long)(((long)A_x20000 * accel) / 100);
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsi3>
     5ae:	6b 01       	movw	r12, r22
     5b0:	7c 01       	movw	r14, r24
     5b2:	aa e3       	ldi	r26, 0x3A	; 58
     5b4:	b1 e0       	ldi	r27, 0x01	; 1
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ba:	4b 81       	ldd	r20, Y+3	; 0x03
     5bc:	5c 81       	ldd	r21, Y+4	; 0x04
     5be:	0e 94 87 0b 	call	0x170e	; 0x170e <__muluhisi3>
     5c2:	24 e6       	ldi	r18, 0x64	; 100
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     5ce:	c7 01       	movw	r24, r14
     5d0:	b6 01       	movw	r22, r12
     5d2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     5d6:	89 01       	movw	r16, r18
    /*usart0_send_string("max_s_lim = %f\n",max_s_lim);*/
    // If we hit max speed limit before 0,5 step it will round to 0.
    // But in practice we need to move atleast 1 step to get any speed at all.
    if (max_s_lim == 0)
     5d8:	23 2b       	or	r18, r19
     5da:	11 f4       	brne	.+4      	; 0x5e0 <speed_ctrl_Move+0x1a8>
    {
      max_s_lim = 1;
     5dc:	01 e0       	ldi	r16, 0x01	; 1
     5de:	10 e0       	ldi	r17, 0x00	; 0
    }

    // Find out after how many steps we must start deceleration.
    // n1 = (n1+n2)decel / (accel + decel)
    accel_lim = ((long)step * decel) / (accel + decel);
     5e0:	65 01       	movw	r12, r10
     5e2:	e1 2c       	mov	r14, r1
     5e4:	f1 2c       	mov	r15, r1
     5e6:	af 81       	ldd	r26, Y+7	; 0x07
     5e8:	b8 85       	ldd	r27, Y+8	; 0x08
     5ea:	a7 01       	movw	r20, r14
     5ec:	96 01       	movw	r18, r12
     5ee:	0e 94 92 0b 	call	0x1724	; 0x1724 <__mulshisi3>
     5f2:	91 01       	movw	r18, r2
     5f4:	2a 0d       	add	r18, r10
     5f6:	3b 1d       	adc	r19, r11
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
    // We must accelrate at least 1 step before we can start deceleration.
    if (accel_lim == 0)
     600:	21 15       	cp	r18, r1
     602:	31 05       	cpc	r19, r1
     604:	11 f4       	brne	.+4      	; 0x60a <speed_ctrl_Move+0x1d2>
    {
      accel_lim = 1;
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	30 e0       	ldi	r19, 0x00	; 0
    }

    // Use the limit we hit first to calc decel.
    if (accel_lim <= max_s_lim)
     60a:	02 17       	cp	r16, r18
     60c:	13 07       	cpc	r17, r19
     60e:	48 f0       	brcs	.+18     	; 0x622 <speed_ctrl_Move+0x1ea>
    {
      srd.decel_val = accel_lim - step;
     610:	ef 81       	ldd	r30, Y+7	; 0x07
     612:	f8 85       	ldd	r31, Y+8	; 0x08
     614:	2e 1b       	sub	r18, r30
     616:	3f 0b       	sbc	r19, r31
     618:	30 93 ac 05 	sts	0x05AC, r19	; 0x8005ac <srd+0x6>
     61c:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <srd+0x5>
     620:	16 c0       	rjmp	.+44     	; 0x64e <speed_ctrl_Move+0x216>
    }
    else
    {
      srd.decel_val = -((long)max_s_lim * accel) / decel;
     622:	d8 01       	movw	r26, r16
     624:	29 81       	ldd	r18, Y+1	; 0x01
     626:	3a 81       	ldd	r19, Y+2	; 0x02
     628:	4b 81       	ldd	r20, Y+3	; 0x03
     62a:	5c 81       	ldd	r21, Y+4	; 0x04
     62c:	0e 94 87 0b 	call	0x170e	; 0x170e <__muluhisi3>
     630:	90 95       	com	r25
     632:	80 95       	com	r24
     634:	70 95       	com	r23
     636:	61 95       	neg	r22
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	8f 4f       	sbci	r24, 0xFF	; 255
     63c:	9f 4f       	sbci	r25, 0xFF	; 255
     63e:	a7 01       	movw	r20, r14
     640:	96 01       	movw	r18, r12
     642:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     646:	30 93 ac 05 	sts	0x05AC, r19	; 0x8005ac <srd+0x6>
     64a:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <srd+0x5>
    }
    // We must decelrate at least 1 step to stop.
    if (srd.decel_val == 0)
     64e:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <srd+0x5>
     652:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <srd+0x6>
     656:	89 2b       	or	r24, r25
     658:	31 f4       	brne	.+12     	; 0x666 <speed_ctrl_Move+0x22e>
    {
      srd.decel_val = -1;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <srd+0x6>
     662:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <srd+0x5>
    }

    // Find step to start decleration.
    srd.decel_start = step + srd.decel_val;
     666:	e6 ea       	ldi	r30, 0xA6	; 166
     668:	f5 e0       	ldi	r31, 0x05	; 5
     66a:	85 81       	ldd	r24, Z+5	; 0x05
     66c:	96 81       	ldd	r25, Z+6	; 0x06
     66e:	2f 81       	ldd	r18, Y+7	; 0x07
     670:	38 85       	ldd	r19, Y+8	; 0x08
     672:	28 0f       	add	r18, r24
     674:	39 1f       	adc	r19, r25
     676:	34 83       	std	Z+4, r19	; 0x04
     678:	23 83       	std	Z+3, r18	; 0x03

    // If the maximum speed is so low that we dont need to go via accelration state.
    if (srd.step_delay <= srd.min_delay)
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	48 16       	cp	r4, r24
     680:	59 06       	cpc	r5, r25
     682:	38 f0       	brcs	.+14     	; 0x692 <speed_ctrl_Move+0x25a>
    {
      srd.step_delay = srd.min_delay;
     684:	52 82       	std	Z+2, r5	; 0x02
     686:	41 82       	std	Z+1, r4	; 0x01
      srd.run_state = RUN;
     688:	80 81       	ld	r24, Z
     68a:	88 7f       	andi	r24, 0xF8	; 248
     68c:	83 60       	ori	r24, 0x03	; 3
     68e:	80 83       	st	Z, r24
     690:	06 c0       	rjmp	.+12     	; 0x69e <speed_ctrl_Move+0x266>
    }
    else
    {
      srd.run_state = ACCEL;
     692:	e6 ea       	ldi	r30, 0xA6	; 166
     694:	f5 e0       	ldi	r31, 0x05	; 5
     696:	80 81       	ld	r24, Z
     698:	88 7f       	andi	r24, 0xF8	; 248
     69a:	81 60       	ori	r24, 0x01	; 1
     69c:	80 83       	st	Z, r24
    }

    // Reset counter.
    srd.accel_count = 0;
     69e:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <srd+0xa>
     6a2:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <srd+0x9>
    status.running = TRUE;
     6a6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <status>
     6aa:	81 60       	ori	r24, 0x01	; 1
     6ac:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <status>
    OCR1A = 10;
     6b0:	8a e0       	ldi	r24, 0x0A	; 10
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Set Timer/Counter to divide clock by 8
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
     6bc:	e1 e8       	ldi	r30, 0x81	; 129
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	88 7f       	andi	r24, 0xF8	; 248
     6c4:	80 83       	st	Z, r24
    TCCR1B |= (1 << CS11);
     6c6:	80 81       	ld	r24, Z
     6c8:	82 60       	ori	r24, 0x02	; 2
     6ca:	80 83       	st	Z, r24
  }
}
     6cc:	28 96       	adiw	r28, 0x08	; 8
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	bf 90       	pop	r11
     6ea:	af 90       	pop	r10
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	3f 90       	pop	r3
     6f6:	2f 90       	pop	r2
     6f8:	08 95       	ret

000006fa <speed_ctrl_Init_Timer1>:
 *  enable Output Compare A Match Interrupt.
 */
void speed_ctrl_Init_Timer1(void)
{
  // Tells what part of speed ramp we are in.
  srd.run_state = STOP_M;
     6fa:	e6 ea       	ldi	r30, 0xA6	; 166
     6fc:	f5 e0       	ldi	r31, 0x05	; 5
     6fe:	80 81       	ld	r24, Z
     700:	88 7f       	andi	r24, 0xF8	; 248
     702:	80 83       	st	Z, r24
  // Timer/Counter 1 in mode 4 CTC (Not running).
  TCCR1B = (1 << WGM12);
     704:	88 e0       	ldi	r24, 0x08	; 8
     706:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

  // Timer/Counter 1 Output Compare A Match Interrupt enable.
  TIMSK1 = (1 << OCIE1A);
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     710:	08 95       	ret

00000712 <__vector_11>:
 *  A new step delay is calculated to follow wanted speed profile
 *  on basis of accel/decel parameters.
 */

ISR(TIMER1_COMPA_vect)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	4f 92       	push	r4
     71e:	5f 92       	push	r5
     720:	6f 92       	push	r6
     722:	7f 92       	push	r7
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
  // Counting steps when moving.
  static uint32_t step_count = 0;
  // Keep track of remainder from new_step-delay calculation to incrase accurancy
  static uint32_t rest = 0;

  OCR1A = srd.step_delay;
     754:	e6 ea       	ldi	r30, 0xA6	; 166
     756:	f5 e0       	ldi	r31, 0x05	; 5
     758:	21 81       	ldd	r18, Z+1	; 0x01
     75a:	32 81       	ldd	r19, Z+2	; 0x02
     75c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     760:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  // Output step motor direction
  PORTC |= ((srd.dir) << PINC3);
     764:	28 b1       	in	r18, 0x08	; 8
     766:	30 81       	ld	r19, Z
     768:	33 fb       	bst	r19, 3
     76a:	88 27       	eor	r24, r24
     76c:	80 f9       	bld	r24, 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	82 2b       	or	r24, r18
     77e:	88 b9       	out	0x08, r24	; 8

  switch (srd.run_state)
     780:	80 81       	ld	r24, Z
     782:	87 70       	andi	r24, 0x07	; 7
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	19 f1       	breq	.+70     	; 0x7ce <__vector_11+0xbc>
     788:	38 f0       	brcs	.+14     	; 0x798 <__vector_11+0x86>
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	09 f4       	brne	.+2      	; 0x790 <__vector_11+0x7e>
     78e:	e8 c0       	rjmp	.+464    	; 0x960 <__stack+0x61>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	09 f4       	brne	.+2      	; 0x796 <__vector_11+0x84>
     794:	ab c0       	rjmp	.+342    	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     796:	3f c1       	rjmp	.+638    	; 0xa16 <__stack+0x117>
  {
  case STOP_M:
    step_count = 0;
     798:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <step_count.2054>
     79c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <step_count.2054+0x1>
     7a0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <step_count.2054+0x2>
     7a4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <step_count.2054+0x3>
    rest = 0;
     7a8:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <rest.2055>
     7ac:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <rest.2055+0x1>
     7b0:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rest.2055+0x2>
     7b4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rest.2055+0x3>
    // Stop Timer/Counter 1.
    TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
     7b8:	e1 e8       	ldi	r30, 0x81	; 129
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 7f       	andi	r24, 0xF8	; 248
     7c0:	80 83       	st	Z, r24
    status.running = FALSE;
     7c2:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <status>
     7c6:	8e 7f       	andi	r24, 0xFE	; 254
     7c8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <status>
    break;
     7cc:	24 c1       	rjmp	.+584    	; 0xa16 <__stack+0x117>

  case ACCEL:
    /*sm_driver_StepCounter(srd.dir);*/
    PORTC ^= (1 << PINC2);
     7ce:	98 b1       	in	r25, 0x08	; 8
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	89 27       	eor	r24, r25
     7d4:	88 b9       	out	0x08, r24	; 8
    step_count++;
     7d6:	80 90 76 02 	lds	r8, 0x0276	; 0x800276 <step_count.2054>
     7da:	90 90 77 02 	lds	r9, 0x0277	; 0x800277 <step_count.2054+0x1>
     7de:	a0 90 78 02 	lds	r10, 0x0278	; 0x800278 <step_count.2054+0x2>
     7e2:	b0 90 79 02 	lds	r11, 0x0279	; 0x800279 <step_count.2054+0x3>
     7e6:	0f ef       	ldi	r16, 0xFF	; 255
     7e8:	80 1a       	sub	r8, r16
     7ea:	90 0a       	sbc	r9, r16
     7ec:	a0 0a       	sbc	r10, r16
     7ee:	b0 0a       	sbc	r11, r16
     7f0:	80 92 76 02 	sts	0x0276, r8	; 0x800276 <step_count.2054>
     7f4:	90 92 77 02 	sts	0x0277, r9	; 0x800277 <step_count.2054+0x1>
     7f8:	a0 92 78 02 	sts	0x0278, r10	; 0x800278 <step_count.2054+0x2>
     7fc:	b0 92 79 02 	sts	0x0279, r11	; 0x800279 <step_count.2054+0x3>
    srd.accel_count++;
     800:	c6 ea       	ldi	r28, 0xA6	; 166
     802:	d5 e0       	ldi	r29, 0x05	; 5
     804:	29 85       	ldd	r18, Y+9	; 0x09
     806:	3a 85       	ldd	r19, Y+10	; 0x0a
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	3a 87       	std	Y+10, r19	; 0x0a
     80e:	29 87       	std	Y+9, r18	; 0x09
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
     810:	49 81       	ldd	r20, Y+1	; 0x01
     812:	5a 81       	ldd	r21, Y+2	; 0x02
     814:	6a 01       	movw	r12, r20
     816:	e1 2c       	mov	r14, r1
     818:	f1 2c       	mov	r15, r1
     81a:	b7 01       	movw	r22, r14
     81c:	a6 01       	movw	r20, r12
     81e:	44 0f       	add	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	66 1f       	adc	r22, r22
     824:	77 1f       	adc	r23, r23
     826:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rest.2055>
     82a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <rest.2055+0x1>
     82e:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <rest.2055+0x2>
     832:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <rest.2055+0x3>
     836:	2a 01       	movw	r4, r20
     838:	3b 01       	movw	r6, r22
     83a:	48 0e       	add	r4, r24
     83c:	59 1e       	adc	r5, r25
     83e:	6a 1e       	adc	r6, r26
     840:	7b 1e       	adc	r7, r27
     842:	c3 01       	movw	r24, r6
     844:	b2 01       	movw	r22, r4
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	03 2e       	mov	r0, r19
     854:	00 0c       	add	r0, r0
     856:	44 0b       	sbc	r20, r20
     858:	55 0b       	sbc	r21, r21
     85a:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     85e:	26 01       	movw	r4, r12
     860:	37 01       	movw	r6, r14
     862:	42 1a       	sub	r4, r18
     864:	53 0a       	sbc	r5, r19
     866:	64 0a       	sbc	r6, r20
     868:	75 0a       	sbc	r7, r21
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
     86a:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <rest.2055>
     86e:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <rest.2055+0x1>
     872:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rest.2055+0x2>
     876:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <rest.2055+0x3>
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	88 16       	cp	r8, r24
     884:	99 06       	cpc	r9, r25
     886:	aa 06       	cpc	r10, r26
     888:	bb 06       	cpc	r11, r27
     88a:	48 f0       	brcs	.+18     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
    {
      srd.accel_count = srd.decel_val;
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	9e 81       	ldd	r25, Y+6	; 0x06
     890:	9a 87       	std	Y+10, r25	; 0x0a
     892:	89 87       	std	Y+9, r24	; 0x09
      srd.run_state = DECEL;
     894:	88 81       	ld	r24, Y
     896:	88 7f       	andi	r24, 0xF8	; 248
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	88 83       	st	Y, r24
     89c:	bc c0       	rjmp	.+376    	; 0xa16 <__stack+0x117>
    }
    // Chech if we hitted max speed.
    else if (new_step_delay <= srd.min_delay)
     89e:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <srd+0x7>
     8a2:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <srd+0x8>
     8a6:	09 2e       	mov	r0, r25
     8a8:	00 0c       	add	r0, r0
     8aa:	aa 0b       	sbc	r26, r26
     8ac:	bb 0b       	sbc	r27, r27
     8ae:	84 15       	cp	r24, r4
     8b0:	95 05       	cpc	r25, r5
     8b2:	a6 05       	cpc	r26, r6
     8b4:	b7 05       	cpc	r27, r7
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     8b8:	ae c0       	rjmp	.+348    	; 0xa16 <__stack+0x117>
    {
      last_accel_delay = new_step_delay;
     8ba:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <last_accel_delay.2053>
     8be:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <last_accel_delay.2053+0x1>
     8c2:	60 92 70 02 	sts	0x0270, r6	; 0x800270 <last_accel_delay.2053+0x2>
     8c6:	70 92 71 02 	sts	0x0271, r7	; 0x800271 <last_accel_delay.2053+0x3>
      new_step_delay = srd.min_delay;
      rest = 0;
     8ca:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <rest.2055>
     8ce:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <rest.2055+0x1>
     8d2:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rest.2055+0x2>
     8d6:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rest.2055+0x3>
      srd.run_state = RUN;
     8da:	e6 ea       	ldi	r30, 0xA6	; 166
     8dc:	f5 e0       	ldi	r31, 0x05	; 5
     8de:	20 81       	ld	r18, Z
     8e0:	28 7f       	andi	r18, 0xF8	; 248
     8e2:	23 60       	ori	r18, 0x03	; 3
     8e4:	20 83       	st	Z, r18
    }
    // Chech if we hitted max speed.
    else if (new_step_delay <= srd.min_delay)
    {
      last_accel_delay = new_step_delay;
      new_step_delay = srd.min_delay;
     8e6:	2c 01       	movw	r4, r24
     8e8:	3d 01       	movw	r6, r26
     8ea:	95 c0       	rjmp	.+298    	; 0xa16 <__stack+0x117>
    }
    break;

  case RUN:
    // sm_driver_StepCounter(srd.dir);
    PORTC ^= (1 << PINC2);
     8ec:	98 b1       	in	r25, 0x08	; 8
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 27       	eor	r24, r25
     8f2:	88 b9       	out	0x08, r24	; 8
    step_count++;
     8f4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <step_count.2054>
     8f8:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <step_count.2054+0x1>
     8fc:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <step_count.2054+0x2>
     900:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <step_count.2054+0x3>
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	a1 1d       	adc	r26, r1
     908:	b1 1d       	adc	r27, r1
     90a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <step_count.2054>
     90e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <step_count.2054+0x1>
     912:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <step_count.2054+0x2>
     916:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <step_count.2054+0x3>
    new_step_delay = srd.min_delay;
     91a:	e6 ea       	ldi	r30, 0xA6	; 166
     91c:	f5 e0       	ldi	r31, 0x05	; 5
     91e:	47 81       	ldd	r20, Z+7	; 0x07
     920:	50 85       	ldd	r21, Z+8	; 0x08
     922:	2a 01       	movw	r4, r20
     924:	55 0f       	add	r21, r21
     926:	66 08       	sbc	r6, r6
     928:	77 08       	sbc	r7, r7
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
     92a:	c3 80       	ldd	r12, Z+3	; 0x03
     92c:	d4 80       	ldd	r13, Z+4	; 0x04
     92e:	e1 2c       	mov	r14, r1
     930:	f1 2c       	mov	r15, r1
     932:	8c 15       	cp	r24, r12
     934:	9d 05       	cpc	r25, r13
     936:	ae 05       	cpc	r26, r14
     938:	bf 05       	cpc	r27, r15
     93a:	08 f4       	brcc	.+2      	; 0x93e <__stack+0x3f>
     93c:	6c c0       	rjmp	.+216    	; 0xa16 <__stack+0x117>
    {
      srd.accel_count = srd.decel_val;
     93e:	85 81       	ldd	r24, Z+5	; 0x05
     940:	96 81       	ldd	r25, Z+6	; 0x06
     942:	92 87       	std	Z+10, r25	; 0x0a
     944:	81 87       	std	Z+9, r24	; 0x09
      // Start decelration with same delay as accel ended with.
      new_step_delay = last_accel_delay;
     946:	40 90 6e 02 	lds	r4, 0x026E	; 0x80026e <last_accel_delay.2053>
     94a:	50 90 6f 02 	lds	r5, 0x026F	; 0x80026f <last_accel_delay.2053+0x1>
     94e:	60 90 70 02 	lds	r6, 0x0270	; 0x800270 <last_accel_delay.2053+0x2>
     952:	70 90 71 02 	lds	r7, 0x0271	; 0x800271 <last_accel_delay.2053+0x3>
      srd.run_state = DECEL;
     956:	80 81       	ld	r24, Z
     958:	88 7f       	andi	r24, 0xF8	; 248
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	80 83       	st	Z, r24
     95e:	5b c0       	rjmp	.+182    	; 0xa16 <__stack+0x117>
    }
    break;

  case DECEL:
    /*sm_driver_StepCounter(srd.dir);*/
    PORTC ^= (1 << PINC2);
     960:	98 b1       	in	r25, 0x08	; 8
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	89 27       	eor	r24, r25
     966:	88 b9       	out	0x08, r24	; 8
    step_count++;
     968:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <step_count.2054>
     96c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <step_count.2054+0x1>
     970:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <step_count.2054+0x2>
     974:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <step_count.2054+0x3>
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	a1 1d       	adc	r26, r1
     97c:	b1 1d       	adc	r27, r1
     97e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <step_count.2054>
     982:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <step_count.2054+0x1>
     986:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <step_count.2054+0x2>
     98a:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <step_count.2054+0x3>
    srd.accel_count++;
     98e:	e6 ea       	ldi	r30, 0xA6	; 166
     990:	f5 e0       	ldi	r31, 0x05	; 5
     992:	c1 85       	ldd	r28, Z+9	; 0x09
     994:	d2 85       	ldd	r29, Z+10	; 0x0a
     996:	21 96       	adiw	r28, 0x01	; 1
     998:	d2 87       	std	Z+10, r29	; 0x0a
     99a:	c1 87       	std	Z+9, r28	; 0x09
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
     99c:	41 81       	ldd	r20, Z+1	; 0x01
     99e:	52 81       	ldd	r21, Z+2	; 0x02
     9a0:	6a 01       	movw	r12, r20
     9a2:	e1 2c       	mov	r14, r1
     9a4:	f1 2c       	mov	r15, r1
     9a6:	b7 01       	movw	r22, r14
     9a8:	a6 01       	movw	r20, r12
     9aa:	44 0f       	add	r20, r20
     9ac:	55 1f       	adc	r21, r21
     9ae:	66 1f       	adc	r22, r22
     9b0:	77 1f       	adc	r23, r23
     9b2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rest.2055>
     9b6:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <rest.2055+0x1>
     9ba:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <rest.2055+0x2>
     9be:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <rest.2055+0x3>
     9c2:	8a 01       	movw	r16, r20
     9c4:	9b 01       	movw	r18, r22
     9c6:	08 0f       	add	r16, r24
     9c8:	19 1f       	adc	r17, r25
     9ca:	2a 1f       	adc	r18, r26
     9cc:	3b 1f       	adc	r19, r27
     9ce:	c9 01       	movw	r24, r18
     9d0:	b8 01       	movw	r22, r16
     9d2:	9e 01       	movw	r18, r28
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	2f 5f       	subi	r18, 0xFF	; 255
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	03 2e       	mov	r0, r19
     9e2:	00 0c       	add	r0, r0
     9e4:	44 0b       	sbc	r20, r20
     9e6:	55 0b       	sbc	r21, r21
     9e8:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     9ec:	26 01       	movw	r4, r12
     9ee:	37 01       	movw	r6, r14
     9f0:	42 1a       	sub	r4, r18
     9f2:	53 0a       	sbc	r5, r19
     9f4:	64 0a       	sbc	r6, r20
     9f6:	75 0a       	sbc	r7, r21
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
     9f8:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <rest.2055>
     9fc:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <rest.2055+0x1>
     a00:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rest.2055+0x2>
     a04:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <rest.2055+0x3>
    // Check if we at last step
    if (srd.accel_count >= 0)
     a08:	dd 23       	and	r29, r29
     a0a:	2c f0       	brlt	.+10     	; 0xa16 <__stack+0x117>
    {
      srd.run_state = STOP_M;
     a0c:	e6 ea       	ldi	r30, 0xA6	; 166
     a0e:	f5 e0       	ldi	r31, 0x05	; 5
     a10:	80 81       	ld	r24, Z
     a12:	88 7f       	andi	r24, 0xF8	; 248
     a14:	80 83       	st	Z, r24
    }
    break;
  }
  srd.step_delay = new_step_delay;
     a16:	50 92 a8 05 	sts	0x05A8, r5	; 0x8005a8 <srd+0x2>
     a1a:	40 92 a7 05 	sts	0x05A7, r4	; 0x8005a7 <srd+0x1>
}
     a1e:	ff 91       	pop	r31
     a20:	ef 91       	pop	r30
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	9f 90       	pop	r9
     a4c:	8f 90       	pop	r8
     a4e:	7f 90       	pop	r7
     a50:	6f 90       	pop	r6
     a52:	5f 90       	pop	r5
     a54:	4f 90       	pop	r4
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <SCH_Initialize>:
  * @retval system ticks
  *****************************************************************************/
uint16_t SCH_SystemTick(void)
{
  return s_SystemTick;
}
     a60:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <s_SystemTick+0x1>
     a64:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <s_SystemTick>
     a68:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <s_NumOfTaskScheduled>
     a6c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <s_NumOfTimers>
     a70:	8c e3       	ldi	r24, 0x3C	; 60
     a72:	ea e9       	ldi	r30, 0x9A	; 154
     a74:	f2 e0       	ldi	r31, 0x02	; 2
     a76:	df 01       	movw	r26, r30
     a78:	1d 92       	st	X+, r1
     a7a:	8a 95       	dec	r24
     a7c:	e9 f7       	brne	.-6      	; 0xa78 <SCH_Initialize+0x18>
     a7e:	8e e1       	ldi	r24, 0x1E	; 30
     a80:	eb e7       	ldi	r30, 0x7B	; 123
     a82:	f2 e0       	ldi	r31, 0x02	; 2
     a84:	df 01       	movw	r26, r30
     a86:	1d 92       	st	X+, r1
     a88:	8a 95       	dec	r24
     a8a:	e9 f7       	brne	.-6      	; 0xa86 <SCH_Initialize+0x26>
     a8c:	88 e0       	ldi	r24, 0x08	; 8
     a8e:	e3 eb       	ldi	r30, 0xB3	; 179
     a90:	f5 e0       	ldi	r31, 0x05	; 5
     a92:	df 01       	movw	r26, r30
     a94:	1d 92       	st	X+, r1
     a96:	8a 95       	dec	r24
     a98:	e9 f7       	brne	.-6      	; 0xa94 <SCH_Initialize+0x34>
     a9a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <timer_timer0_init>
     a9e:	08 95       	ret

00000aa0 <SCH_TASK_CreateTask>:
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ec 01       	movw	r28, r24
     aa6:	89 2b       	or	r24, r25
     aa8:	39 f1       	breq	.+78     	; 0xaf8 <SCH_TASK_CreateTask+0x58>
     aaa:	61 15       	cp	r22, r1
     aac:	71 05       	cpc	r23, r1
     aae:	31 f1       	breq	.+76     	; 0xafc <SCH_TASK_CreateTask+0x5c>
     ab0:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <s_NumOfTaskScheduled>
     ab4:	99 30       	cpi	r25, 0x09	; 9
     ab6:	20 f5       	brcc	.+72     	; 0xb00 <SCH_TASK_CreateTask+0x60>
     ab8:	29 2f       	mov	r18, r25
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	f9 01       	movw	r30, r18
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	df 01       	movw	r26, r30
     ac4:	a2 0f       	add	r26, r18
     ac6:	b3 1f       	adc	r27, r19
     ac8:	aa 0f       	add	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	a6 56       	subi	r26, 0x66	; 102
     ace:	bd 4f       	sbci	r27, 0xFD	; 253
     ad0:	15 96       	adiw	r26, 0x05	; 5
     ad2:	7c 93       	st	X, r23
     ad4:	6e 93       	st	-X, r22
     ad6:	14 97       	sbiw	r26, 0x04	; 4
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	1c 92       	st	X, r1
     adc:	11 97       	sbiw	r26, 0x01	; 1
     ade:	13 96       	adiw	r26, 0x03	; 3
     ae0:	1c 92       	st	X, r1
     ae2:	1e 92       	st	-X, r1
     ae4:	12 97       	sbiw	r26, 0x02	; 2
     ae6:	fd 01       	movw	r30, r26
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 83       	st	Z, r24
     aec:	98 83       	st	Y, r25
     aee:	9f 5f       	subi	r25, 0xFF	; 255
     af0:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <s_NumOfTaskScheduled>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <SCH_TASK_CreateTask+0x62>
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <SCH_TASK_CreateTask+0x62>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <SCH_TASK_CreateTask+0x62>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <SCH_RunSystemTickTimer>:
     b08:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <s_SystemTick>
     b0c:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <s_SystemTick+0x1>
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <s_SystemTick+0x1>
     b16:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <s_SystemTick>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	43 c0       	rjmp	.+134    	; 0xba4 <SCH_RunSystemTickTimer+0x9c>
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	e2 0f       	add	r30, r18
     b2a:	f3 1f       	adc	r31, r19
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	e6 56       	subi	r30, 0x66	; 102
     b32:	fd 4f       	sbci	r31, 0xFD	; 253
     b34:	a4 81       	ldd	r26, Z+4	; 0x04
     b36:	b5 81       	ldd	r27, Z+5	; 0x05
     b38:	9c 91       	ld	r25, X
     b3a:	91 30       	cpi	r25, 0x01	; 1
     b3c:	91 f5       	brne	.+100    	; 0xba2 <SCH_RunSystemTickTimer+0x9a>
     b3e:	f9 01       	movw	r30, r18
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e2 0f       	add	r30, r18
     b46:	f3 1f       	adc	r31, r19
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e6 56       	subi	r30, 0x66	; 102
     b4e:	fd 4f       	sbci	r31, 0xFD	; 253
     b50:	90 81       	ld	r25, Z
     b52:	91 30       	cpi	r25, 0x01	; 1
     b54:	31 f5       	brne	.+76     	; 0xba2 <SCH_RunSystemTickTimer+0x9a>
     b56:	f9 01       	movw	r30, r18
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	e2 0f       	add	r30, r18
     b5e:	f3 1f       	adc	r31, r19
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	e6 56       	subi	r30, 0x66	; 102
     b66:	fd 4f       	sbci	r31, 0xFD	; 253
     b68:	42 81       	ldd	r20, Z+2	; 0x02
     b6a:	53 81       	ldd	r21, Z+3	; 0x03
     b6c:	4f 5f       	subi	r20, 0xFF	; 255
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	53 83       	std	Z+3, r21	; 0x03
     b72:	42 83       	std	Z+2, r20	; 0x02
     b74:	12 96       	adiw	r26, 0x02	; 2
     b76:	6d 91       	ld	r22, X+
     b78:	7c 91       	ld	r23, X
     b7a:	13 97       	sbiw	r26, 0x03	; 3
     b7c:	46 17       	cp	r20, r22
     b7e:	57 07       	cpc	r21, r23
     b80:	80 f0       	brcs	.+32     	; 0xba2 <SCH_RunSystemTickTimer+0x9a>
     b82:	f9 01       	movw	r30, r18
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	df 01       	movw	r26, r30
     b8a:	a2 0f       	add	r26, r18
     b8c:	b3 1f       	adc	r27, r19
     b8e:	aa 0f       	add	r26, r26
     b90:	bb 1f       	adc	r27, r27
     b92:	a6 56       	subi	r26, 0x66	; 102
     b94:	bd 4f       	sbci	r27, 0xFD	; 253
     b96:	13 96       	adiw	r26, 0x03	; 3
     b98:	1c 92       	st	X, r1
     b9a:	1e 92       	st	-X, r1
     b9c:	12 97       	sbiw	r26, 0x02	; 2
     b9e:	fd 01       	movw	r30, r26
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <s_NumOfTaskScheduled>
     ba8:	89 17       	cp	r24, r25
     baa:	08 f4       	brcc	.+2      	; 0xbae <SCH_RunSystemTickTimer+0xa6>
     bac:	b8 cf       	rjmp	.-144    	; 0xb1e <SCH_RunSystemTickTimer+0x16>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	41 c0       	rjmp	.+130    	; 0xc34 <SCH_RunSystemTickTimer+0x12c>
     bb2:	82 2f       	mov	r24, r18
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	fc 01       	movw	r30, r24
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e8 0f       	add	r30, r24
     bbe:	f9 1f       	adc	r31, r25
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	e5 58       	subi	r30, 0x85	; 133
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	30 81       	ld	r19, Z
     bca:	31 30       	cpi	r19, 0x01	; 1
     bcc:	91 f5       	brne	.+100    	; 0xc32 <SCH_RunSystemTickTimer+0x12a>
     bce:	fc 01       	movw	r30, r24
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e5 58       	subi	r30, 0x85	; 133
     bde:	fd 4f       	sbci	r31, 0xFD	; 253
     be0:	42 81       	ldd	r20, Z+2	; 0x02
     be2:	53 81       	ldd	r21, Z+3	; 0x03
     be4:	4f 5f       	subi	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	53 83       	std	Z+3, r21	; 0x03
     bea:	42 83       	std	Z+2, r20	; 0x02
     bec:	a4 81       	ldd	r26, Z+4	; 0x04
     bee:	b5 81       	ldd	r27, Z+5	; 0x05
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	6d 91       	ld	r22, X+
     bf4:	7c 91       	ld	r23, X
     bf6:	12 97       	sbiw	r26, 0x02	; 2
     bf8:	46 17       	cp	r20, r22
     bfa:	57 07       	cpc	r21, r23
     bfc:	d0 f0       	brcs	.+52     	; 0xc32 <SCH_RunSystemTickTimer+0x12a>
     bfe:	fc 01       	movw	r30, r24
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e8 0f       	add	r30, r24
     c06:	f9 1f       	adc	r31, r25
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	e5 58       	subi	r30, 0x85	; 133
     c0e:	fd 4f       	sbci	r31, 0xFD	; 253
     c10:	31 83       	std	Z+1, r19	; 0x01
     c12:	13 82       	std	Z+3, r1	; 0x03
     c14:	12 82       	std	Z+2, r1	; 0x02
     c16:	4c 91       	ld	r20, X
     c18:	42 30       	cpi	r20, 0x02	; 2
     c1a:	09 f0       	breq	.+2      	; 0xc1e <SCH_RunSystemTickTimer+0x116>
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	e8 0f       	add	r30, r24
     c26:	f9 1f       	adc	r31, r25
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e5 58       	subi	r30, 0x85	; 133
     c2e:	fd 4f       	sbci	r31, 0xFD	; 253
     c30:	30 83       	st	Z, r19
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <s_NumOfTimers>
     c38:	28 17       	cp	r18, r24
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <SCH_RunSystemTickTimer+0x136>
     c3c:	ba cf       	rjmp	.-140    	; 0xbb2 <SCH_RunSystemTickTimer+0xaa>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	17 c0       	rjmp	.+46     	; 0xc70 <SCH_RunSystemTickTimer+0x168>
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	f9 01       	movw	r30, r18
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ed 54       	subi	r30, 0x4D	; 77
     c4e:	fa 4f       	sbci	r31, 0xFA	; 250
     c50:	40 81       	ld	r20, Z
     c52:	51 81       	ldd	r21, Z+1	; 0x01
     c54:	45 2b       	or	r20, r21
     c56:	59 f0       	breq	.+22     	; 0xc6e <SCH_RunSystemTickTimer+0x166>
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	f9 01       	movw	r30, r18
     c5e:	ed 54       	subi	r30, 0x4D	; 77
     c60:	fa 4f       	sbci	r31, 0xFA	; 250
     c62:	20 81       	ld	r18, Z
     c64:	31 81       	ldd	r19, Z+1	; 0x01
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	31 09       	sbc	r19, r1
     c6a:	31 83       	std	Z+1, r19	; 0x01
     c6c:	20 83       	st	Z, r18
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	38 f3       	brcs	.-50     	; 0xc42 <SCH_RunSystemTickTimer+0x13a>
     c74:	08 95       	ret

00000c76 <SCH_StartSchedular>:
     c76:	0e 94 d7 06 	call	0xdae	; 0xdae <timer_start_timer0>
     c7a:	08 95       	ret

00000c7c <SCH_HandleScheduledTask>:
     c7c:	cf 93       	push	r28
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	32 c0       	rjmp	.+100    	; 0xce6 <SCH_HandleScheduledTask+0x6a>
     c82:	8c 2f       	mov	r24, r28
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc 01       	movw	r30, r24
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	e8 0f       	add	r30, r24
     c8e:	f9 1f       	adc	r31, r25
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	e6 56       	subi	r30, 0x66	; 102
     c96:	fd 4f       	sbci	r31, 0xFD	; 253
     c98:	21 81       	ldd	r18, Z+1	; 0x01
     c9a:	21 30       	cpi	r18, 0x01	; 1
     c9c:	19 f5       	brne	.+70     	; 0xce4 <SCH_HandleScheduledTask+0x68>
     c9e:	fc 01       	movw	r30, r24
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e8 0f       	add	r30, r24
     ca6:	f9 1f       	adc	r31, r25
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e6 56       	subi	r30, 0x66	; 102
     cae:	fd 4f       	sbci	r31, 0xFD	; 253
     cb0:	20 81       	ld	r18, Z
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	b9 f4       	brne	.+46     	; 0xce4 <SCH_HandleScheduledTask+0x68>
     cb6:	fc 01       	movw	r30, r24
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	df 01       	movw	r26, r30
     cbe:	a8 0f       	add	r26, r24
     cc0:	b9 1f       	adc	r27, r25
     cc2:	aa 0f       	add	r26, r26
     cc4:	bb 1f       	adc	r27, r27
     cc6:	a6 56       	subi	r26, 0x66	; 102
     cc8:	bd 4f       	sbci	r27, 0xFD	; 253
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	1c 92       	st	X, r1
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	fd 01       	movw	r30, r26
     cd2:	04 80       	ldd	r0, Z+4	; 0x04
     cd4:	f5 81       	ldd	r31, Z+5	; 0x05
     cd6:	e0 2d       	mov	r30, r0
     cd8:	04 80       	ldd	r0, Z+4	; 0x04
     cda:	f5 81       	ldd	r31, Z+5	; 0x05
     cdc:	e0 2d       	mov	r30, r0
     cde:	30 97       	sbiw	r30, 0x00	; 0
     ce0:	09 f0       	breq	.+2      	; 0xce4 <SCH_HandleScheduledTask+0x68>
     ce2:	09 95       	icall
     ce4:	cf 5f       	subi	r28, 0xFF	; 255
     ce6:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <s_NumOfTaskScheduled>
     cea:	c8 17       	cp	r28, r24
     cec:	50 f2       	brcs	.-108    	; 0xc82 <SCH_HandleScheduledTask+0x6>
     cee:	c0 e0       	ldi	r28, 0x00	; 0
     cf0:	26 c0       	rjmp	.+76     	; 0xd3e <SCH_HandleScheduledTask+0xc2>
     cf2:	8c 2f       	mov	r24, r28
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e5 58       	subi	r30, 0x85	; 133
     d06:	fd 4f       	sbci	r31, 0xFD	; 253
     d08:	21 81       	ldd	r18, Z+1	; 0x01
     d0a:	21 30       	cpi	r18, 0x01	; 1
     d0c:	b9 f4       	brne	.+46     	; 0xd3c <SCH_HandleScheduledTask+0xc0>
     d0e:	fc 01       	movw	r30, r24
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	df 01       	movw	r26, r30
     d16:	a8 0f       	add	r26, r24
     d18:	b9 1f       	adc	r27, r25
     d1a:	aa 0f       	add	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	a5 58       	subi	r26, 0x85	; 133
     d20:	bd 4f       	sbci	r27, 0xFD	; 253
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 92       	st	X, r1
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	fd 01       	movw	r30, r26
     d2a:	04 80       	ldd	r0, Z+4	; 0x04
     d2c:	f5 81       	ldd	r31, Z+5	; 0x05
     d2e:	e0 2d       	mov	r30, r0
     d30:	03 80       	ldd	r0, Z+3	; 0x03
     d32:	f4 81       	ldd	r31, Z+4	; 0x04
     d34:	e0 2d       	mov	r30, r0
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <SCH_HandleScheduledTask+0xc0>
     d3a:	09 95       	icall
     d3c:	cf 5f       	subi	r28, 0xFF	; 255
     d3e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <s_NumOfTimers>
     d42:	c8 17       	cp	r28, r24
     d44:	b0 f2       	brcs	.-84     	; 0xcf2 <SCH_HandleScheduledTask+0x76>
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
	SCH_RunSystemTickTimer();
     d6c:	0e 94 84 05 	call	0xb08	; 0xb08 <SCH_RunSystemTickTimer>
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <step_motor_update>:
		step_motor_update                // taskFunction;
	}
};

static void step_motor_update(void)
{
     d92:	08 95       	ret

00000d94 <step_motor_init>:
}

void step_motor_init(void)
{
	// Init of IO pins
	sm_driver_Init_IO();
     d94:	0e 94 cc 01 	call	0x398	; 0x398 <sm_driver_Init_IO>

	// Init of Timer/Counter1
	speed_ctrl_Init_Timer1();
     d98:	0e 94 7d 03 	call	0x6fa	; 0x6fa <speed_ctrl_Init_Timer1>
	
	sei();
     d9c:	78 94       	sei
     d9e:	08 95       	ret

00000da0 <step_motor_create_task>:
	
}

void step_motor_create_task(void)
{
	SCH_TASK_CreateTask(&s_StepMotorTaskContext.taskHandle, &s_StepMotorTaskContext.taskProperty);
     da0:	64 e2       	ldi	r22, 0x24	; 36
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	83 e2       	ldi	r24, 0x23	; 35
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SCH_TASK_CreateTask>
     dac:	08 95       	ret

00000dae <timer_start_timer0>:
	TIMSK0 |= (1<<OCIE0A);
	sei();
}
void timer_stop_timer0(void)
{
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	85 bd       	out	0x25, r24	; 37
     db2:	ee e6       	ldi	r30, 0x6E	; 110
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	80 83       	st	Z, r24
     dbc:	78 94       	sei
     dbe:	08 95       	ret

00000dc0 <timer_timer0_init>:
}
void timer_timer0_init(void)
{
	TCCR0A = (1<<WGM01);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
     dc4:	16 bc       	out	0x26, r1	; 38
	OCR0A = 125 - 1;
     dc6:	8c e7       	ldi	r24, 0x7C	; 124
     dc8:	87 bd       	out	0x27, r24	; 39
     dca:	08 95       	ret

00000dcc <rbuffer_init>:
    while(!(UCSR0A & (1 << TXC0)));										// Wait for Tx unit to transmit the LAST character of ringbuffer

    _delay_ms(200);                                             // Extra safety for Tx to finish!

	UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0) | (1<<UDRIE0));					//disable TX, RX, RX interrupt
	UCSR0C &= (1<<UCSZ01) | (1<<UCSZ00);
     dcc:	3f b7       	in	r19, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	21 e0       	ldi	r18, 0x01	; 1
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <rbuffer_init+0x1a>
     dd4:	fc 01       	movw	r30, r24
     dd6:	e0 5c       	subi	r30, 0xC0	; 192
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	10 82       	st	Z, r1
     ddc:	31 96       	adiw	r30, 0x01	; 1
     dde:	10 82       	st	Z, r1
     de0:	31 96       	adiw	r30, 0x01	; 1
     de2:	10 82       	st	Z, r1
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	21 11       	cpse	r18, r1
     de8:	f5 cf       	rjmp	.-22     	; 0xdd4 <rbuffer_init+0x8>
     dea:	3f bf       	out	0x3f, r19	; 63
     dec:	08 95       	ret

00000dee <rbuffer_full>:
     dee:	8e 5b       	subi	r24, 0xBE	; 190
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	fc 01       	movw	r30, r24
     df4:	90 81       	ld	r25, Z
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 34       	cpi	r25, 0x40	; 64
     dfa:	09 f0       	breq	.+2      	; 0xdfe <rbuffer_full+0x10>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret

00000e00 <rbuffer_empty>:
     e00:	8e 5b       	subi	r24, 0xBE	; 190
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	fc 01       	movw	r30, r24
     e06:	90 81       	ld	r25, Z
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	91 11       	cpse	r25, r1
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <rbuffer_insert>:
     e10:	fb 01       	movw	r30, r22
     e12:	e0 5c       	subi	r30, 0xC0	; 192
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	90 81       	ld	r25, Z
     e18:	fb 01       	movw	r30, r22
     e1a:	e9 0f       	add	r30, r25
     e1c:	f1 1d       	adc	r31, r1
     e1e:	80 83       	st	Z, r24
     e20:	9f b7       	in	r25, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0c c0       	rjmp	.+24     	; 0xe40 <rbuffer_insert+0x30>
     e28:	fb 01       	movw	r30, r22
     e2a:	e0 5c       	subi	r30, 0xC0	; 192
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	80 81       	ld	r24, Z
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	8f 73       	andi	r24, 0x3F	; 63
     e34:	80 83       	st	Z, r24
     e36:	32 96       	adiw	r30, 0x02	; 2
     e38:	80 81       	ld	r24, Z
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	81 11       	cpse	r24, r1
     e42:	f2 cf       	rjmp	.-28     	; 0xe28 <rbuffer_insert+0x18>
     e44:	9f bf       	out	0x3f, r25	; 63
     e46:	08 95       	ret

00000e48 <rbuffer_remove>:
     e48:	9c 01       	movw	r18, r24
     e4a:	fc 01       	movw	r30, r24
     e4c:	ef 5b       	subi	r30, 0xBF	; 191
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	f9 01       	movw	r30, r18
     e54:	e8 0f       	add	r30, r24
     e56:	f1 1d       	adc	r31, r1
     e58:	80 81       	ld	r24, Z
     e5a:	4f b7       	in	r20, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <rbuffer_remove+0x32>
     e62:	f9 01       	movw	r30, r18
     e64:	ef 5b       	subi	r30, 0xBF	; 191
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	90 81       	ld	r25, Z
     e6a:	9f 5f       	subi	r25, 0xFF	; 255
     e6c:	9f 73       	andi	r25, 0x3F	; 63
     e6e:	90 83       	st	Z, r25
     e70:	31 96       	adiw	r30, 0x01	; 1
     e72:	90 81       	ld	r25, Z
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	90 83       	st	Z, r25
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	91 11       	cpse	r25, r1
     e7c:	f2 cf       	rjmp	.-28     	; 0xe62 <rbuffer_remove+0x1a>
     e7e:	4f bf       	out	0x3f, r20	; 63
     e80:	08 95       	ret

00000e82 <usart0_init>:
     e82:	8a b1       	in	r24, 0x0a	; 10
     e84:	8d 7f       	andi	r24, 0xFD	; 253
     e86:	8a b9       	out	0x0a, r24	; 10
     e88:	8b b1       	in	r24, 0x0b	; 11
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	8b b9       	out	0x0b, r24	; 11
     e8e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
     e92:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     e96:	8d 5b       	subi	r24, 0xBD	; 189
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rbuffer_init>
     e9e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
     ea2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     ea6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rbuffer_init>
     eaa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     eae:	83 e3       	ldi	r24, 0x33	; 51
     eb0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     eb4:	e1 ec       	ldi	r30, 0xC1	; 193
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 69       	ori	r24, 0x98	; 152
     ebc:	80 83       	st	Z, r24
     ebe:	e2 ec       	ldi	r30, 0xC2	; 194
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	86 60       	ori	r24, 0x06	; 6
     ec6:	80 83       	st	Z, r24
     ec8:	78 94       	sei
     eca:	08 95       	ret

00000ecc <usart0_send_char>:
     ecc:	cf 93       	push	r28
     ece:	c8 2f       	mov	r28, r24
     ed0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
     ed4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     ed8:	8d 5b       	subi	r24, 0xBD	; 189
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	0e 94 f7 06 	call	0xdee	; 0xdee <rbuffer_full>
     ee0:	81 11       	cpse	r24, r1
     ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <usart0_send_char+0x4>
     ee4:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <p_UART0_meta>
     ee8:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     eec:	6d 5b       	subi	r22, 0xBD	; 189
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8c 2f       	mov	r24, r28
     ef2:	0e 94 08 07 	call	0xe10	; 0xe10 <rbuffer_insert>
     ef6:	e1 ec       	ldi	r30, 0xC1	; 193
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	80 83       	st	Z, r24
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <usart0_send_string>:
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <usart0_send_string+0xe>
     f0c:	21 96       	adiw	r28, 0x01	; 1
     f0e:	0e 94 66 07 	call	0xecc	; 0xecc <usart0_send_char>
     f12:	88 81       	ld	r24, Y
     f14:	81 11       	cpse	r24, r1
     f16:	fa cf       	rjmp	.-12     	; 0xf0c <usart0_send_string+0x8>
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <usart0_send_array>:
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	fc 01       	movw	r30, r24
     f28:	d6 2f       	mov	r29, r22
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <usart0_send_array+0x20>
     f2e:	8f 01       	movw	r16, r30
     f30:	0f 5f       	subi	r16, 0xFF	; 255
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	0e 94 66 07 	call	0xecc	; 0xecc <usart0_send_char>
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
     f3c:	f8 01       	movw	r30, r16
     f3e:	cd 17       	cp	r28, r29
     f40:	b0 f3       	brcs	.-20     	; 0xf2e <usart0_send_array+0x10>
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <uart_get_uart0_rx_buffer_address>:
}

volatile ringbuffer_t * uart_get_uart0_rx_buffer_address(void)
{
	return &(p_UART0_meta->rb_rx);
}
     f4c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
     f50:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     f54:	08 95       	ret

00000f56 <__vector_18>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART_RX_vect) {
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	cf 93       	push	r28
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	
   char	data = UDR0;
     f7a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
     f7e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
     f82:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     f86:	0e 94 f7 06 	call	0xdee	; 0xdee <rbuffer_full>
     f8a:	81 11       	cpse	r24, r1
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <__vector_18+0x60>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
     f8e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <p_UART0_meta>
     f92:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     f96:	8c 2f       	mov	r24, r28
     f98:	0e 94 08 07 	call	0xe10	; 0xe10 <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
     f9c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p_UART0_meta>
     fa0:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     fa4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fa8:	8c 71       	andi	r24, 0x1C	; 28
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	ea 57       	subi	r30, 0x7A	; 122
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <__vector_18+0x7a>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
     fb6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p_UART0_meta>
     fba:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p_UART0_meta+0x1>
     fbe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fc2:	8c 71       	andi	r24, 0x1C	; 28
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	ea 57       	subi	r30, 0x7A	; 122
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
    }   
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	cf 91       	pop	r28
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_19>:
ISR(USART_UDRE_vect) {
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
    1016:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
    101a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
    101e:	8d 5b       	subi	r24, 0xBD	; 189
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	0e 94 00 07 	call	0xe00	; 0xe00 <rbuffer_empty>
    1026:	81 11       	cpse	r24, r1
    1028:	0b c0       	rjmp	.+22     	; 0x1040 <__vector_19+0x4c>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
    102a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <p_UART0_meta>
    102e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <p_UART0_meta+0x1>
    1032:	8d 5b       	subi	r24, 0xBD	; 189
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	0e 94 24 07 	call	0xe48	; 0xe48 <rbuffer_remove>
    103a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__vector_19+0x56>
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
    1040:	e1 ec       	ldi	r30, 0xC1	; 193
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 7d       	andi	r24, 0xDF	; 223
    1048:	80 83       	st	Z, r24
    }
}
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
    106c:	4f 92       	push	r4
    106e:	5f 92       	push	r5
    1070:	6f 92       	push	r6
    1072:	7f 92       	push	r7
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	a8 97       	sbiw	r28, 0x28	; 40
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8c 01       	movw	r16, r24
    109a:	7b 01       	movw	r14, r22
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    109c:	b8 c2       	rjmp	.+1392   	; 0x160e <UARTvprintf+0x5a2>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    109e:	19 82       	std	Y+1, r1	; 0x01
    10a0:	1a 82       	std	Y+2, r1	; 0x02
    10a2:	1b 82       	std	Y+3, r1	; 0x03
    10a4:	1c 82       	std	Y+4, r1	; 0x04
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <UARTvprintf+0x52>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	ab 81       	ldd	r26, Y+3	; 0x03
    10ae:	bc 81       	ldd	r27, Y+4	; 0x04
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	a1 1d       	adc	r26, r1
    10b4:	b1 1d       	adc	r27, r1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	ab 83       	std	Y+3, r26	; 0x03
    10bc:	bc 83       	std	Y+4, r27	; 0x04
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	ab 81       	ldd	r26, Y+3	; 0x03
    10c4:	bc 81       	ldd	r27, Y+4	; 0x04
    10c6:	f8 01       	movw	r30, r16
    10c8:	e8 0f       	add	r30, r24
    10ca:	f9 1f       	adc	r31, r25
    10cc:	80 81       	ld	r24, Z
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    10ce:	85 32       	cpi	r24, 0x25	; 37
    10d0:	51 f0       	breq	.+20     	; 0x10e6 <UARTvprintf+0x7a>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	ab 81       	ldd	r26, Y+3	; 0x03
    10d8:	bc 81       	ldd	r27, Y+4	; 0x04
    10da:	f8 01       	movw	r30, r16
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	81 11       	cpse	r24, r1
    10e4:	e1 cf       	rjmp	.-62     	; 0x10a8 <UARTvprintf+0x3c>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
    10e6:	69 81       	ldd	r22, Y+1	; 0x01
    10e8:	7a 81       	ldd	r23, Y+2	; 0x02
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	c8 01       	movw	r24, r16
    10f0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	ab 81       	ldd	r26, Y+3	; 0x03
    10fa:	bc 81       	ldd	r27, Y+4	; 0x04
    10fc:	08 0f       	add	r16, r24
    10fe:	19 1f       	adc	r17, r25

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
    1100:	f8 01       	movw	r30, r16
    1102:	80 81       	ld	r24, Z
    1104:	85 32       	cpi	r24, 0x25	; 37
    1106:	09 f0       	breq	.+2      	; 0x110a <UARTvprintf+0x9e>
    1108:	82 c2       	rjmp	.+1284   	; 0x160e <UARTvprintf+0x5a2>
        {
            //
            // Skip the %.
            //
            pcString++;
    110a:	d8 01       	movw	r26, r16
    110c:	11 96       	adiw	r26, 0x01	; 1

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
    110e:	1d 86       	std	Y+13, r1	; 0x0d
    1110:	1e 86       	std	Y+14, r1	; 0x0e
    1112:	1f 86       	std	Y+15, r1	; 0x0f
    1114:	18 8a       	std	Y+16, r1	; 0x10
            cFill = ' ';
    1116:	68 94       	set
    1118:	bb 24       	eor	r11, r11
    111a:	b5 f8       	bld	r11, 5
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    111c:	8d 01       	movw	r16, r26
    111e:	0f 5f       	subi	r16, 0xFF	; 255
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	8c 91       	ld	r24, X
    1124:	48 2f       	mov	r20, r24
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	fa 01       	movw	r30, r20
    112a:	b5 97       	sbiw	r30, 0x25	; 37
    112c:	e4 35       	cpi	r30, 0x54	; 84
    112e:	f1 05       	cpc	r31, r1
    1130:	08 f0       	brcs	.+2      	; 0x1134 <UARTvprintf+0xc8>
    1132:	66 c2       	rjmp	.+1228   	; 0x1600 <UARTvprintf+0x594>
    1134:	ec 5c       	subi	r30, 0xCC	; 204
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__tablejump2__>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
    113c:	80 33       	cpi	r24, 0x30	; 48
    113e:	61 f4       	brne	.+24     	; 0x1158 <UARTvprintf+0xec>
    1140:	4d 85       	ldd	r20, Y+13	; 0x0d
    1142:	5e 85       	ldd	r21, Y+14	; 0x0e
    1144:	6f 85       	ldd	r22, Y+15	; 0x0f
    1146:	78 89       	ldd	r23, Y+16	; 0x10
    1148:	45 2b       	or	r20, r21
    114a:	46 2b       	or	r20, r22
    114c:	47 2b       	or	r20, r23
    114e:	21 f4       	brne	.+8      	; 0x1158 <UARTvprintf+0xec>
                    {
                        cFill = '0';
    1150:	0f 2e       	mov	r0, r31
    1152:	f0 e3       	ldi	r31, 0x30	; 48
    1154:	bf 2e       	mov	r11, r31
    1156:	f0 2d       	mov	r31, r0
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
    1158:	4d 85       	ldd	r20, Y+13	; 0x0d
    115a:	5e 85       	ldd	r21, Y+14	; 0x0e
    115c:	6f 85       	ldd	r22, Y+15	; 0x0f
    115e:	78 89       	ldd	r23, Y+16	; 0x10
    1160:	44 0f       	add	r20, r20
    1162:	55 1f       	adc	r21, r21
    1164:	66 1f       	adc	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	2a 01       	movw	r4, r20
    116a:	3b 01       	movw	r6, r22
    116c:	44 0c       	add	r4, r4
    116e:	55 1c       	adc	r5, r5
    1170:	66 1c       	adc	r6, r6
    1172:	77 1c       	adc	r7, r7
    1174:	44 0c       	add	r4, r4
    1176:	55 1c       	adc	r5, r5
    1178:	66 1c       	adc	r6, r6
    117a:	77 1c       	adc	r7, r7
    117c:	44 0d       	add	r20, r4
    117e:	55 1d       	adc	r21, r5
    1180:	66 1d       	adc	r22, r6
    1182:	77 1d       	adc	r23, r7
    1184:	4d 87       	std	Y+13, r20	; 0x0d
    1186:	5e 87       	std	Y+14, r21	; 0x0e
    1188:	6f 87       	std	Y+15, r22	; 0x0f
    118a:	78 8b       	std	Y+16, r23	; 0x10
                    ui32Count += pcString[-1] - '0';
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	c0 97       	sbiw	r24, 0x30	; 48
    1190:	4d 85       	ldd	r20, Y+13	; 0x0d
    1192:	5e 85       	ldd	r21, Y+14	; 0x0e
    1194:	6f 85       	ldd	r22, Y+15	; 0x0f
    1196:	78 89       	ldd	r23, Y+16	; 0x10
    1198:	09 2e       	mov	r0, r25
    119a:	00 0c       	add	r0, r0
    119c:	aa 0b       	sbc	r26, r26
    119e:	bb 0b       	sbc	r27, r27
    11a0:	84 0f       	add	r24, r20
    11a2:	95 1f       	adc	r25, r21
    11a4:	a6 1f       	adc	r26, r22
    11a6:	b7 1f       	adc	r27, r23
    11a8:	8d 87       	std	Y+13, r24	; 0x0d
    11aa:	9e 87       	std	Y+14, r25	; 0x0e
    11ac:	af 87       	std	Y+15, r26	; 0x0f
    11ae:	b8 8b       	std	Y+16, r27	; 0x10
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    11b0:	d8 01       	movw	r26, r16
                    ui32Count += pcString[-1] - '0';

                    //
                    // Get the next character.
                    //
                    goto again;
    11b2:	b4 cf       	rjmp	.-152    	; 0x111c <UARTvprintf+0xb0>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    11b4:	57 01       	movw	r10, r14
    11b6:	f4 e0       	ldi	r31, 0x04	; 4
    11b8:	af 0e       	add	r10, r31
    11ba:	b1 1c       	adc	r11, r1
    11bc:	f7 01       	movw	r30, r14
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	a2 81       	ldd	r26, Z+2	; 0x02
    11c4:	b3 81       	ldd	r27, Z+3	; 0x03
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	af 83       	std	Y+7, r26	; 0x07
    11cc:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	ce 01       	movw	r24, r28
    11d2:	05 96       	adiw	r24, 0x05	; 5
    11d4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    11d8:	75 01       	movw	r14, r10
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);

                    //
                    // This command has been handled.
                    //
                    break;
    11da:	19 c2       	rjmp	.+1074   	; 0x160e <UARTvprintf+0x5a2>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    11dc:	97 01       	movw	r18, r14
    11de:	2e 5f       	subi	r18, 0xFE	; 254
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	f7 01       	movw	r30, r14
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	af 83       	std	Y+7, r26	; 0x07
    11f2:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    11f4:	19 86       	std	Y+9, r1	; 0x09
    11f6:	1a 86       	std	Y+10, r1	; 0x0a
    11f8:	1b 86       	std	Y+11, r1	; 0x0b
    11fa:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	af 81       	ldd	r26, Y+7	; 0x07
    1202:	b8 85       	ldd	r27, Y+8	; 0x08
    1204:	bb 23       	and	r27, r27
    1206:	c4 f4       	brge	.+48     	; 0x1238 <UARTvprintf+0x1cc>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	af 81       	ldd	r26, Y+7	; 0x07
    120e:	b8 85       	ldd	r27, Y+8	; 0x08
    1210:	b0 95       	com	r27
    1212:	a0 95       	com	r26
    1214:	90 95       	com	r25
    1216:	81 95       	neg	r24
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	af 4f       	sbci	r26, 0xFF	; 255
    121c:	bf 4f       	sbci	r27, 0xFF	; 255
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	af 83       	std	Y+7, r26	; 0x07
    1224:	b8 87       	std	Y+8, r27	; 0x08

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	8d 8b       	std	Y+21, r24	; 0x15
    1230:	9e 8b       	std	Y+22, r25	; 0x16
    1232:	af 8b       	std	Y+23, r26	; 0x17
    1234:	b8 8f       	std	Y+24, r27	; 0x18
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <UARTvprintf+0x1d4>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
    1238:	1d 8a       	std	Y+21, r1	; 0x15
    123a:	1e 8a       	std	Y+22, r1	; 0x16
    123c:	1f 8a       	std	Y+23, r1	; 0x17
    123e:	18 8e       	std	Y+24, r1	; 0x18
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    1240:	8a e0       	ldi	r24, 0x0A	; 10
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	89 8b       	std	Y+17, r24	; 0x11
    124a:	9a 8b       	std	Y+18, r25	; 0x12
    124c:	ab 8b       	std	Y+19, r26	; 0x13
    124e:	bc 8b       	std	Y+20, r27	; 0x14
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1250:	79 01       	movw	r14, r18
                    ui32Base = 10;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    1252:	9a c0       	rjmp	.+308    	; 0x1388 <UARTvprintf+0x31c>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1254:	57 01       	movw	r10, r14
    1256:	f2 e0       	ldi	r31, 0x02	; 2
    1258:	af 0e       	add	r10, r31
    125a:	b1 1c       	adc	r11, r1
    125c:	f7 01       	movw	r30, r14
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	1a 82       	std	Y+2, r1	; 0x02
    1266:	1b 82       	std	Y+3, r1	; 0x03
    1268:	1c 82       	std	Y+4, r1	; 0x04
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <UARTvprintf+0x218>
    126c:	49 81       	ldd	r20, Y+1	; 0x01
    126e:	5a 81       	ldd	r21, Y+2	; 0x02
    1270:	6b 81       	ldd	r22, Y+3	; 0x03
    1272:	7c 81       	ldd	r23, Y+4	; 0x04
    1274:	4f 5f       	subi	r20, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	6f 4f       	sbci	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	49 83       	std	Y+1, r20	; 0x01
    127e:	5a 83       	std	Y+2, r21	; 0x02
    1280:	6b 83       	std	Y+3, r22	; 0x03
    1282:	7c 83       	std	Y+4, r23	; 0x04
    1284:	49 81       	ldd	r20, Y+1	; 0x01
    1286:	5a 81       	ldd	r21, Y+2	; 0x02
    1288:	6b 81       	ldd	r22, Y+3	; 0x03
    128a:	7c 81       	ldd	r23, Y+4	; 0x04
    128c:	fc 01       	movw	r30, r24
    128e:	e4 0f       	add	r30, r20
    1290:	f5 1f       	adc	r31, r21
    1292:	20 81       	ld	r18, Z
    1294:	21 11       	cpse	r18, r1
    1296:	ea cf       	rjmp	.-44     	; 0x126c <UARTvprintf+0x200>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
    1298:	49 81       	ldd	r20, Y+1	; 0x01
    129a:	5a 81       	ldd	r21, Y+2	; 0x02
    129c:	6b 81       	ldd	r22, Y+3	; 0x03
    129e:	7c 81       	ldd	r23, Y+4	; 0x04
    12a0:	64 2f       	mov	r22, r20
    12a2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
    12a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    12a8:	5e 85       	ldd	r21, Y+14	; 0x0e
    12aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ac:	78 89       	ldd	r23, Y+16	; 0x10
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	ab 81       	ldd	r26, Y+3	; 0x03
    12b4:	bc 81       	ldd	r27, Y+4	; 0x04
    12b6:	84 17       	cp	r24, r20
    12b8:	95 07       	cpc	r25, r21
    12ba:	a6 07       	cpc	r26, r22
    12bc:	b7 07       	cpc	r27, r23
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <UARTvprintf+0x256>
    12c0:	a5 c1       	rjmp	.+842    	; 0x160c <UARTvprintf+0x5a0>
                    {
                        ui32Count -= ui32Idx;
    12c2:	49 81       	ldd	r20, Y+1	; 0x01
    12c4:	5a 81       	ldd	r21, Y+2	; 0x02
    12c6:	6b 81       	ldd	r22, Y+3	; 0x03
    12c8:	7c 81       	ldd	r23, Y+4	; 0x04
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	af 85       	ldd	r26, Y+15	; 0x0f
    12d0:	b8 89       	ldd	r27, Y+16	; 0x10
    12d2:	84 1b       	sub	r24, r20
    12d4:	95 0b       	sbc	r25, r21
    12d6:	a6 0b       	sbc	r26, r22
    12d8:	b7 0b       	sbc	r27, r23
    12da:	8d 87       	std	Y+13, r24	; 0x0d
    12dc:	9e 87       	std	Y+14, r25	; 0x0e
    12de:	af 87       	std	Y+15, r26	; 0x0f
    12e0:	b8 8b       	std	Y+16, r27	; 0x10
                        while(ui32Count--)
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <UARTvprintf+0x282>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	8a e5       	ldi	r24, 0x5A	; 90
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
                    {
                        ui32Count -= ui32Idx;
                        while(ui32Count--)
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	af 85       	ldd	r26, Y+15	; 0x0f
    12f4:	b8 89       	ldd	r27, Y+16	; 0x10
    12f6:	ac 01       	movw	r20, r24
    12f8:	bd 01       	movw	r22, r26
    12fa:	41 50       	subi	r20, 0x01	; 1
    12fc:	51 09       	sbc	r21, r1
    12fe:	61 09       	sbc	r22, r1
    1300:	71 09       	sbc	r23, r1
    1302:	4d 87       	std	Y+13, r20	; 0x0d
    1304:	5e 87       	std	Y+14, r21	; 0x0e
    1306:	6f 87       	std	Y+15, r22	; 0x0f
    1308:	78 8b       	std	Y+16, r23	; 0x10
    130a:	89 2b       	or	r24, r25
    130c:	8a 2b       	or	r24, r26
    130e:	8b 2b       	or	r24, r27
    1310:	49 f7       	brne	.-46     	; 0x12e4 <UARTvprintf+0x278>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1312:	75 01       	movw	r14, r10
    1314:	7c c1       	rjmp	.+760    	; 0x160e <UARTvprintf+0x5a2>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1316:	f7 01       	movw	r30, r14
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	af 83       	std	Y+7, r26	; 0x07
    1326:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    1328:	19 86       	std	Y+9, r1	; 0x09
    132a:	1a 86       	std	Y+10, r1	; 0x0a
    132c:	1b 86       	std	Y+11, r1	; 0x0b
    132e:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    1330:	8a e0       	ldi	r24, 0x0A	; 10
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	89 8b       	std	Y+17, r24	; 0x11
    133a:	9a 8b       	std	Y+18, r25	; 0x12
    133c:	ab 8b       	std	Y+19, r26	; 0x13
    133e:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    1340:	1d 8a       	std	Y+21, r1	; 0x15
    1342:	1e 8a       	std	Y+22, r1	; 0x16
    1344:	1f 8a       	std	Y+23, r1	; 0x17
    1346:	18 8e       	std	Y+24, r1	; 0x18
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1348:	c7 01       	movw	r24, r14
    134a:	02 96       	adiw	r24, 0x02	; 2
    134c:	7c 01       	movw	r14, r24
                    ui32Neg = 0;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    134e:	1c c0       	rjmp	.+56     	; 0x1388 <UARTvprintf+0x31c>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1350:	f7 01       	movw	r30, r14
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	af 83       	std	Y+7, r26	; 0x07
    1360:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    1362:	19 86       	std	Y+9, r1	; 0x09
    1364:	1a 86       	std	Y+10, r1	; 0x0a
    1366:	1b 86       	std	Y+11, r1	; 0x0b
    1368:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	89 8b       	std	Y+17, r24	; 0x11
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	ab 8b       	std	Y+19, r26	; 0x13
    1378:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    137a:	1d 8a       	std	Y+21, r1	; 0x15
    137c:	1e 8a       	std	Y+22, r1	; 0x16
    137e:	1f 8a       	std	Y+23, r1	; 0x17
    1380:	18 8e       	std	Y+24, r1	; 0x18
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1382:	c7 01       	movw	r24, r14
    1384:	02 96       	adiw	r24, 0x02	; 2
    1386:	7c 01       	movw	r14, r24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a0 e0       	ldi	r26, 0x00	; 0
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	ab 83       	std	Y+3, r26	; 0x03
    1396:	bc 83       	std	Y+4, r27	; 0x04
    1398:	19 c0       	rjmp	.+50     	; 0x13cc <UARTvprintf+0x360>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
    139a:	29 89       	ldd	r18, Y+17	; 0x11
    139c:	3a 89       	ldd	r19, Y+18	; 0x12
    139e:	4b 89       	ldd	r20, Y+19	; 0x13
    13a0:	5c 89       	ldd	r21, Y+20	; 0x14
    13a2:	69 81       	ldd	r22, Y+1	; 0x01
    13a4:	7a 81       	ldd	r23, Y+2	; 0x02
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsi3>
    13ae:	69 83       	std	Y+1, r22	; 0x01
    13b0:	7a 83       	std	Y+2, r23	; 0x02
    13b2:	8b 83       	std	Y+3, r24	; 0x03
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ba:	af 85       	ldd	r26, Y+15	; 0x0f
    13bc:	b8 89       	ldd	r27, Y+16	; 0x10
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	a1 09       	sbc	r26, r1
    13c2:	b1 09       	sbc	r27, r1
    13c4:	8d 87       	std	Y+13, r24	; 0x0d
    13c6:	9e 87       	std	Y+14, r25	; 0x0e
    13c8:	af 87       	std	Y+15, r26	; 0x0f
    13ca:	b8 8b       	std	Y+16, r27	; 0x10
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    13cc:	29 81       	ldd	r18, Y+1	; 0x01
    13ce:	3a 81       	ldd	r19, Y+2	; 0x02
    13d0:	4b 81       	ldd	r20, Y+3	; 0x03
    13d2:	5c 81       	ldd	r21, Y+4	; 0x04
    13d4:	69 89       	ldd	r22, Y+17	; 0x11
    13d6:	7a 89       	ldd	r23, Y+18	; 0x12
    13d8:	8b 89       	ldd	r24, Y+19	; 0x13
    13da:	9c 89       	ldd	r25, Y+20	; 0x14
    13dc:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsi3>
    13e0:	4d 80       	ldd	r4, Y+5	; 0x05
    13e2:	5e 80       	ldd	r5, Y+6	; 0x06
    13e4:	6f 80       	ldd	r6, Y+7	; 0x07
    13e6:	78 84       	ldd	r7, Y+8	; 0x08
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    13e8:	46 16       	cp	r4, r22
    13ea:	57 06       	cpc	r5, r23
    13ec:	68 06       	cpc	r6, r24
    13ee:	79 06       	cpc	r7, r25
    13f0:	d0 f0       	brcs	.+52     	; 0x1426 <UARTvprintf+0x3ba>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
    13f2:	29 81       	ldd	r18, Y+1	; 0x01
    13f4:	3a 81       	ldd	r19, Y+2	; 0x02
    13f6:	4b 81       	ldd	r20, Y+3	; 0x03
    13f8:	5c 81       	ldd	r21, Y+4	; 0x04
    13fa:	69 89       	ldd	r22, Y+17	; 0x11
    13fc:	7a 89       	ldd	r23, Y+18	; 0x12
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsi3>
    1406:	29 89       	ldd	r18, Y+17	; 0x11
    1408:	3a 89       	ldd	r19, Y+18	; 0x12
    140a:	4b 89       	ldd	r20, Y+19	; 0x13
    140c:	5c 89       	ldd	r21, Y+20	; 0x14
    140e:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	ab 81       	ldd	r26, Y+3	; 0x03
    1418:	bc 81       	ldd	r27, Y+4	; 0x04
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    141a:	28 17       	cp	r18, r24
    141c:	39 07       	cpc	r19, r25
    141e:	4a 07       	cpc	r20, r26
    1420:	5b 07       	cpc	r21, r27
    1422:	09 f4       	brne	.+2      	; 0x1426 <UARTvprintf+0x3ba>
    1424:	ba cf       	rjmp	.-140    	; 0x139a <UARTvprintf+0x32e>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
    1426:	8d 89       	ldd	r24, Y+21	; 0x15
    1428:	9e 89       	ldd	r25, Y+22	; 0x16
    142a:	af 89       	ldd	r26, Y+23	; 0x17
    142c:	b8 8d       	ldd	r27, Y+24	; 0x18
    142e:	89 2b       	or	r24, r25
    1430:	8a 2b       	or	r24, r26
    1432:	8b 2b       	or	r24, r27
    1434:	59 f0       	breq	.+22     	; 0x144c <UARTvprintf+0x3e0>
                    {
                        ui32Count--;
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	af 85       	ldd	r26, Y+15	; 0x0f
    143c:	b8 89       	ldd	r27, Y+16	; 0x10
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	a1 09       	sbc	r26, r1
    1442:	b1 09       	sbc	r27, r1
    1444:	8d 87       	std	Y+13, r24	; 0x0d
    1446:	9e 87       	std	Y+14, r25	; 0x0e
    1448:	af 87       	std	Y+15, r26	; 0x0f
    144a:	b8 8b       	std	Y+16, r27	; 0x10

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
    144c:	8d 89       	ldd	r24, Y+21	; 0x15
    144e:	9e 89       	ldd	r25, Y+22	; 0x16
    1450:	af 89       	ldd	r26, Y+23	; 0x17
    1452:	b8 8d       	ldd	r27, Y+24	; 0x18
    1454:	89 2b       	or	r24, r25
    1456:	8a 2b       	or	r24, r26
    1458:	8b 2b       	or	r24, r27
    145a:	e9 f0       	breq	.+58     	; 0x1496 <UARTvprintf+0x42a>
    145c:	90 e3       	ldi	r25, 0x30	; 48
    145e:	b9 12       	cpse	r11, r25
    1460:	1a c0       	rjmp	.+52     	; 0x1496 <UARTvprintf+0x42a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	ab 85       	ldd	r26, Y+11	; 0x0b
    1468:	bc 85       	ldd	r27, Y+12	; 0x0c
    146a:	ac 01       	movw	r20, r24
    146c:	bd 01       	movw	r22, r26
    146e:	4f 5f       	subi	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	6f 4f       	sbci	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	49 87       	std	Y+9, r20	; 0x09
    1478:	5a 87       	std	Y+10, r21	; 0x0a
    147a:	6b 87       	std	Y+11, r22	; 0x0b
    147c:	7c 87       	std	Y+12, r23	; 0x0c
    147e:	e9 e1       	ldi	r30, 0x19	; 25
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	ec 0f       	add	r30, r28
    1484:	fd 1f       	adc	r31, r29
    1486:	e8 0f       	add	r30, r24
    1488:	f9 1f       	adc	r31, r25
    148a:	2d e2       	ldi	r18, 0x2D	; 45
    148c:	20 83       	st	Z, r18

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
    148e:	1d 8a       	std	Y+21, r1	; 0x15
    1490:	1e 8a       	std	Y+22, r1	; 0x16
    1492:	1f 8a       	std	Y+23, r1	; 0x17
    1494:	18 8e       	std	Y+24, r1	; 0x18

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	af 85       	ldd	r26, Y+15	; 0x0f
    149c:	b8 89       	ldd	r27, Y+16	; 0x10
    149e:	02 97       	sbiw	r24, 0x02	; 2
    14a0:	a1 05       	cpc	r26, r1
    14a2:	b1 05       	cpc	r27, r1
    14a4:	e0 f1       	brcs	.+120    	; 0x151e <UARTvprintf+0x4b2>
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	af 85       	ldd	r26, Y+15	; 0x0f
    14ac:	b8 89       	ldd	r27, Y+16	; 0x10
    14ae:	40 97       	sbiw	r24, 0x10	; 16
    14b0:	a1 05       	cpc	r26, r1
    14b2:	b1 05       	cpc	r27, r1
    14b4:	a0 f5       	brcc	.+104    	; 0x151e <UARTvprintf+0x4b2>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	af 85       	ldd	r26, Y+15	; 0x0f
    14bc:	b8 89       	ldd	r27, Y+16	; 0x10
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	a1 09       	sbc	r26, r1
    14c2:	b1 09       	sbc	r27, r1
    14c4:	8d 87       	std	Y+13, r24	; 0x0d
    14c6:	9e 87       	std	Y+14, r25	; 0x0e
    14c8:	af 87       	std	Y+15, r26	; 0x0f
    14ca:	b8 8b       	std	Y+16, r27	; 0x10
    14cc:	20 c0       	rjmp	.+64     	; 0x150e <UARTvprintf+0x4a2>
                        {
                            pcBuf[ui32Pos++] = cFill;
    14ce:	89 85       	ldd	r24, Y+9	; 0x09
    14d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    14d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    14d6:	ac 01       	movw	r20, r24
    14d8:	bd 01       	movw	r22, r26
    14da:	4f 5f       	subi	r20, 0xFF	; 255
    14dc:	5f 4f       	sbci	r21, 0xFF	; 255
    14de:	6f 4f       	sbci	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	49 87       	std	Y+9, r20	; 0x09
    14e4:	5a 87       	std	Y+10, r21	; 0x0a
    14e6:	6b 87       	std	Y+11, r22	; 0x0b
    14e8:	7c 87       	std	Y+12, r23	; 0x0c
    14ea:	e9 e1       	ldi	r30, 0x19	; 25
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ec 0f       	add	r30, r28
    14f0:	fd 1f       	adc	r31, r29
    14f2:	e8 0f       	add	r30, r24
    14f4:	f9 1f       	adc	r31, r25
    14f6:	b0 82       	st	Z, r11
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    14f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fc:	af 85       	ldd	r26, Y+15	; 0x0f
    14fe:	b8 89       	ldd	r27, Y+16	; 0x10
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	8d 87       	std	Y+13, r24	; 0x0d
    1508:	9e 87       	std	Y+14, r25	; 0x0e
    150a:	af 87       	std	Y+15, r26	; 0x0f
    150c:	b8 8b       	std	Y+16, r27	; 0x10
    150e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1510:	9e 85       	ldd	r25, Y+14	; 0x0e
    1512:	af 85       	ldd	r26, Y+15	; 0x0f
    1514:	b8 89       	ldd	r27, Y+16	; 0x10
    1516:	89 2b       	or	r24, r25
    1518:	8a 2b       	or	r24, r26
    151a:	8b 2b       	or	r24, r27
    151c:	c1 f6       	brne	.-80     	; 0x14ce <UARTvprintf+0x462>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
    151e:	8d 89       	ldd	r24, Y+21	; 0x15
    1520:	9e 89       	ldd	r25, Y+22	; 0x16
    1522:	af 89       	ldd	r26, Y+23	; 0x17
    1524:	b8 8d       	ldd	r27, Y+24	; 0x18
    1526:	89 2b       	or	r24, r25
    1528:	8a 2b       	or	r24, r26
    152a:	8b 2b       	or	r24, r27
    152c:	09 f4       	brne	.+2      	; 0x1530 <UARTvprintf+0x4c4>
    152e:	51 c0       	rjmp	.+162    	; 0x15d2 <UARTvprintf+0x566>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	ab 85       	ldd	r26, Y+11	; 0x0b
    1536:	bc 85       	ldd	r27, Y+12	; 0x0c
    1538:	ac 01       	movw	r20, r24
    153a:	bd 01       	movw	r22, r26
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	6f 4f       	sbci	r22, 0xFF	; 255
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	49 87       	std	Y+9, r20	; 0x09
    1546:	5a 87       	std	Y+10, r21	; 0x0a
    1548:	6b 87       	std	Y+11, r22	; 0x0b
    154a:	7c 87       	std	Y+12, r23	; 0x0c
    154c:	e9 e1       	ldi	r30, 0x19	; 25
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	ec 0f       	add	r30, r28
    1552:	fd 1f       	adc	r31, r29
    1554:	e8 0f       	add	r30, r24
    1556:	f9 1f       	adc	r31, r25
    1558:	2d e2       	ldi	r18, 0x2D	; 45
    155a:	20 83       	st	Z, r18
    155c:	3a c0       	rjmp	.+116    	; 0x15d2 <UARTvprintf+0x566>
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    155e:	89 84       	ldd	r8, Y+9	; 0x09
    1560:	9a 84       	ldd	r9, Y+10	; 0x0a
    1562:	ab 84       	ldd	r10, Y+11	; 0x0b
    1564:	bc 84       	ldd	r11, Y+12	; 0x0c
    1566:	d5 01       	movw	r26, r10
    1568:	c4 01       	movw	r24, r8
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	a1 1d       	adc	r26, r1
    156e:	b1 1d       	adc	r27, r1
    1570:	89 87       	std	Y+9, r24	; 0x09
    1572:	9a 87       	std	Y+10, r25	; 0x0a
    1574:	ab 87       	std	Y+11, r26	; 0x0b
    1576:	bc 87       	std	Y+12, r27	; 0x0c
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
    1578:	6d 81       	ldd	r22, Y+5	; 0x05
    157a:	7e 81       	ldd	r23, Y+6	; 0x06
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	29 81       	ldd	r18, Y+1	; 0x01
    1582:	3a 81       	ldd	r19, Y+2	; 0x02
    1584:	4b 81       	ldd	r20, Y+3	; 0x03
    1586:	5c 81       	ldd	r21, Y+4	; 0x04
    1588:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
    158c:	49 88       	ldd	r4, Y+17	; 0x11
    158e:	5a 88       	ldd	r5, Y+18	; 0x12
    1590:	6b 88       	ldd	r6, Y+19	; 0x13
    1592:	7c 88       	ldd	r7, Y+20	; 0x14
    1594:	ca 01       	movw	r24, r20
    1596:	b9 01       	movw	r22, r18
    1598:	a3 01       	movw	r20, r6
    159a:	92 01       	movw	r18, r4
    159c:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
    15a0:	fb 01       	movw	r30, r22
    15a2:	ef 5f       	subi	r30, 0xFF	; 255
    15a4:	fd 4f       	sbci	r31, 0xFD	; 253
    15a6:	80 81       	ld	r24, Z
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    15a8:	e9 e1       	ldi	r30, 0x19	; 25
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	ec 0f       	add	r30, r28
    15ae:	fd 1f       	adc	r31, r29
    15b0:	e8 0d       	add	r30, r8
    15b2:	f9 1d       	adc	r31, r9
    15b4:	80 83       	st	Z, r24
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
                    }
    15b6:	29 89       	ldd	r18, Y+17	; 0x11
    15b8:	3a 89       	ldd	r19, Y+18	; 0x12
    15ba:	4b 89       	ldd	r20, Y+19	; 0x13
    15bc:	5c 89       	ldd	r21, Y+20	; 0x14
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
    15be:	69 81       	ldd	r22, Y+1	; 0x01
    15c0:	7a 81       	ldd	r23, Y+2	; 0x02
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
    15ca:	29 83       	std	Y+1, r18	; 0x01
    15cc:	3a 83       	std	Y+2, r19	; 0x02
    15ce:	4b 83       	std	Y+3, r20	; 0x03
    15d0:	5c 83       	std	Y+4, r21	; 0x04
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	ab 81       	ldd	r26, Y+3	; 0x03
    15d8:	bc 81       	ldd	r27, Y+4	; 0x04
    15da:	89 2b       	or	r24, r25
    15dc:	8a 2b       	or	r24, r26
    15de:	8b 2b       	or	r24, r27
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <UARTvprintf+0x578>
    15e2:	bd cf       	rjmp	.-134    	; 0x155e <UARTvprintf+0x4f2>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
    15e4:	69 85       	ldd	r22, Y+9	; 0x09
    15e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    15e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ec:	ce 01       	movw	r24, r28
    15ee:	49 96       	adiw	r24, 0x19	; 25
    15f0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <UARTvprintf+0x5a2>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <UARTvprintf+0x5a2>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
    1600:	65 e0       	ldi	r22, 0x05	; 5
    1602:	82 e1       	ldi	r24, 0x12	; 18
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	0e 94 8f 07 	call	0xf1e	; 0xf1e <usart0_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    160a:	01 c0       	rjmp	.+2      	; 0x160e <UARTvprintf+0x5a2>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    160c:	75 01       	movw	r14, r10
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    160e:	f8 01       	movw	r30, r16
    1610:	80 81       	ld	r24, Z
    1612:	81 11       	cpse	r24, r1
    1614:	44 cd       	rjmp	.-1400   	; 0x109e <UARTvprintf+0x32>
                    break;
                }
            }
        }
    }
}
    1616:	a8 96       	adiw	r28, 0x28	; 40
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	4f 90       	pop	r4
    163e:	08 95       	ret

00001640 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	be 01       	movw	r22, r28
    164a:	6b 5f       	subi	r22, 0xFB	; 251
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	fb 01       	movw	r30, r22
    1650:	81 91       	ld	r24, Z+
    1652:	91 91       	ld	r25, Z+
    1654:	bf 01       	movw	r22, r30
    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);

    UARTvprintf(pcString, vaArgP);
    1656:	0e 94 36 08 	call	0x106c	; 0x106c <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <__mulsi3>:
    1660:	db 01       	movw	r26, r22
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	0e 94 87 0b 	call	0x170e	; 0x170e <__muluhisi3>
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	a2 9f       	mul	r26, r18
    1670:	80 0d       	add	r24, r0
    1672:	91 1d       	adc	r25, r1
    1674:	a3 9f       	mul	r26, r19
    1676:	90 0d       	add	r25, r0
    1678:	b2 9f       	mul	r27, r18
    167a:	90 0d       	add	r25, r0
    167c:	11 24       	eor	r1, r1
    167e:	08 95       	ret

00001680 <__udivmodsi4>:
    1680:	a1 e2       	ldi	r26, 0x21	; 33
    1682:	1a 2e       	mov	r1, r26
    1684:	aa 1b       	sub	r26, r26
    1686:	bb 1b       	sub	r27, r27
    1688:	fd 01       	movw	r30, r26
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <__udivmodsi4_ep>

0000168c <__udivmodsi4_loop>:
    168c:	aa 1f       	adc	r26, r26
    168e:	bb 1f       	adc	r27, r27
    1690:	ee 1f       	adc	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	a2 17       	cp	r26, r18
    1696:	b3 07       	cpc	r27, r19
    1698:	e4 07       	cpc	r30, r20
    169a:	f5 07       	cpc	r31, r21
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <__udivmodsi4_ep>
    169e:	a2 1b       	sub	r26, r18
    16a0:	b3 0b       	sbc	r27, r19
    16a2:	e4 0b       	sbc	r30, r20
    16a4:	f5 0b       	sbc	r31, r21

000016a6 <__udivmodsi4_ep>:
    16a6:	66 1f       	adc	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	1a 94       	dec	r1
    16b0:	69 f7       	brne	.-38     	; 0x168c <__udivmodsi4_loop>
    16b2:	60 95       	com	r22
    16b4:	70 95       	com	r23
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	bd 01       	movw	r22, r26
    16c0:	cf 01       	movw	r24, r30
    16c2:	08 95       	ret

000016c4 <__divmodsi4>:
    16c4:	05 2e       	mov	r0, r21
    16c6:	97 fb       	bst	r25, 7
    16c8:	1e f4       	brtc	.+6      	; 0x16d0 <__divmodsi4+0xc>
    16ca:	00 94       	com	r0
    16cc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__negsi2>
    16d0:	57 fd       	sbrc	r21, 7
    16d2:	07 d0       	rcall	.+14     	; 0x16e2 <__divmodsi4_neg2>
    16d4:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
    16d8:	07 fc       	sbrc	r0, 7
    16da:	03 d0       	rcall	.+6      	; 0x16e2 <__divmodsi4_neg2>
    16dc:	4e f4       	brtc	.+18     	; 0x16f0 <__divmodsi4_exit>
    16de:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__negsi2>

000016e2 <__divmodsi4_neg2>:
    16e2:	50 95       	com	r21
    16e4:	40 95       	com	r20
    16e6:	30 95       	com	r19
    16e8:	21 95       	neg	r18
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	4f 4f       	sbci	r20, 0xFF	; 255
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255

000016f0 <__divmodsi4_exit>:
    16f0:	08 95       	ret

000016f2 <__negsi2>:
    16f2:	90 95       	com	r25
    16f4:	80 95       	com	r24
    16f6:	70 95       	com	r23
    16f8:	61 95       	neg	r22
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	08 95       	ret

00001702 <__tablejump2__>:
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	05 90       	lpm	r0, Z+
    1708:	f4 91       	lpm	r31, Z
    170a:	e0 2d       	mov	r30, r0
    170c:	09 94       	ijmp

0000170e <__muluhisi3>:
    170e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__umulhisi3>
    1712:	a5 9f       	mul	r26, r21
    1714:	90 0d       	add	r25, r0
    1716:	b4 9f       	mul	r27, r20
    1718:	90 0d       	add	r25, r0
    171a:	a4 9f       	mul	r26, r20
    171c:	80 0d       	add	r24, r0
    171e:	91 1d       	adc	r25, r1
    1720:	11 24       	eor	r1, r1
    1722:	08 95       	ret

00001724 <__mulshisi3>:
    1724:	b7 ff       	sbrs	r27, 7
    1726:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__muluhisi3>

0000172a <__mulohisi3>:
    172a:	0e 94 87 0b 	call	0x170e	; 0x170e <__muluhisi3>
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
    1732:	08 95       	ret

00001734 <__umulhisi3>:
    1734:	a2 9f       	mul	r26, r18
    1736:	b0 01       	movw	r22, r0
    1738:	b3 9f       	mul	r27, r19
    173a:	c0 01       	movw	r24, r0
    173c:	a3 9f       	mul	r26, r19
    173e:	70 0d       	add	r23, r0
    1740:	81 1d       	adc	r24, r1
    1742:	11 24       	eor	r1, r1
    1744:	91 1d       	adc	r25, r1
    1746:	b2 9f       	mul	r27, r18
    1748:	70 0d       	add	r23, r0
    174a:	81 1d       	adc	r24, r1
    174c:	11 24       	eor	r1, r1
    174e:	91 1d       	adc	r25, r1
    1750:	08 95       	ret

00001752 <atoi>:
    1752:	fc 01       	movw	r30, r24
    1754:	88 27       	eor	r24, r24
    1756:	99 27       	eor	r25, r25
    1758:	e8 94       	clt
    175a:	21 91       	ld	r18, Z+
    175c:	20 32       	cpi	r18, 0x20	; 32
    175e:	e9 f3       	breq	.-6      	; 0x175a <atoi+0x8>
    1760:	29 30       	cpi	r18, 0x09	; 9
    1762:	10 f0       	brcs	.+4      	; 0x1768 <atoi+0x16>
    1764:	2e 30       	cpi	r18, 0x0E	; 14
    1766:	c8 f3       	brcs	.-14     	; 0x175a <atoi+0x8>
    1768:	2b 32       	cpi	r18, 0x2B	; 43
    176a:	41 f0       	breq	.+16     	; 0x177c <atoi+0x2a>
    176c:	2d 32       	cpi	r18, 0x2D	; 45
    176e:	39 f4       	brne	.+14     	; 0x177e <atoi+0x2c>
    1770:	68 94       	set
    1772:	04 c0       	rjmp	.+8      	; 0x177c <atoi+0x2a>
    1774:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__mulhi_const_10>
    1778:	82 0f       	add	r24, r18
    177a:	91 1d       	adc	r25, r1
    177c:	21 91       	ld	r18, Z+
    177e:	20 53       	subi	r18, 0x30	; 48
    1780:	2a 30       	cpi	r18, 0x0A	; 10
    1782:	c0 f3       	brcs	.-16     	; 0x1774 <atoi+0x22>
    1784:	1e f4       	brtc	.+6      	; 0x178c <atoi+0x3a>
    1786:	90 95       	com	r25
    1788:	81 95       	neg	r24
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	08 95       	ret

0000178e <strcmp>:
    178e:	fb 01       	movw	r30, r22
    1790:	dc 01       	movw	r26, r24
    1792:	8d 91       	ld	r24, X+
    1794:	01 90       	ld	r0, Z+
    1796:	80 19       	sub	r24, r0
    1798:	01 10       	cpse	r0, r1
    179a:	d9 f3       	breq	.-10     	; 0x1792 <strcmp+0x4>
    179c:	99 0b       	sbc	r25, r25
    179e:	08 95       	ret

000017a0 <__mulhi_const_10>:
    17a0:	7a e0       	ldi	r23, 0x0A	; 10
    17a2:	97 9f       	mul	r25, r23
    17a4:	90 2d       	mov	r25, r0
    17a6:	87 9f       	mul	r24, r23
    17a8:	80 2d       	mov	r24, r0
    17aa:	91 0d       	add	r25, r1
    17ac:	11 24       	eor	r1, r1
    17ae:	08 95       	ret

000017b0 <_exit>:
    17b0:	f8 94       	cli

000017b2 <__stop_program>:
    17b2:	ff cf       	rjmp	.-2      	; 0x17b2 <__stop_program>
