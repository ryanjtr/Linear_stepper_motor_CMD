
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000fa6  0000103a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f2  00800110  00800110  0000104a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c51  00000000  00000000  000028ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e46  00000000  00000000  000034fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00004344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa6  00000000  00000000  00004f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_18>
  4c:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  9e:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
 *  Setup IO, uart, stepper, timer and interrupt.
 */
void Init(void)
{
  // Init of IO pins
  sm_driver_Init_IO();
  a6:	0e 94 89 00 	call	0x112	; 0x112 <sm_driver_Init_IO>

  // Init of Timer/Counter1
  speed_cntr_Init_Timer1();	
  aa:	0e 94 01 02 	call	0x402	; 0x402 <speed_cntr_Init_Timer1>
	// Init Uart
	usart0_init();
  ae:	0e 94 9b 03 	call	0x736	; 0x736 <usart0_init>
   sei();
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <main>:
// 	printf("min delay= %d\n",min_delay);
// 	unsigned int step_delay = (T1_FREQ_148_ * sqrt_t_(A_SQ_ / accel_)) / 100;
// 	printf("step delay= %d\n",step_delay);
// 
// 
	Init();
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
// // 	usart0_send_string(str3);
// // 	usart0_send_string("\n");

	while(1)
	{
	speed_cntr_Move(steps, acceleration, deceleration, speed);
  ba:	20 e2       	ldi	r18, 0x20	; 32
  bc:	33 e0       	ldi	r19, 0x03	; 3
  be:	44 e6       	ldi	r20, 0x64	; 100
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	64 e6       	ldi	r22, 0x64	; 100
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <speed_cntr_Move>

	usart0_send_string("status= ");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <usart0_send_string>
	sprintf(str2,"%d",srd.run_state);
  d6:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <srd>
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	1f 92       	push	r1
  de:	8f 93       	push	r24
  e0:	8b e0       	ldi	r24, 0x0B	; 11
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	9f 93       	push	r25
  e6:	8f 93       	push	r24
  e8:	87 ef       	ldi	r24, 0xF7	; 247
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	9f 93       	push	r25
  ee:	8f 93       	push	r24
  f0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <sprintf>
	usart0_send_string(str2);
  f4:	87 ef       	ldi	r24, 0xF7	; 247
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <usart0_send_string>
	usart0_send_string("\n");
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <usart0_send_string>
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	d4 cf       	rjmp	.-88     	; 0xba <main+0x4>

00000112 <sm_driver_Init_IO>:
 */
void sm_driver_Init_IO(void)
{
  // Init of IO pins
  
  DDRC |= ((1<<DDC2) |(1<<DDC3)) ; // Set output pin direction registers to output
 112:	87 b1       	in	r24, 0x07	; 7
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	87 b9       	out	0x07, r24	; 7
 118:	08 95       	ret

0000011a <sqrt_t>:
 *
 *  \param x  Value to find square root of.
 *  \return  Square root of x.
 */
static unsigned long sqrt_t(unsigned long x)
{
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	6b 01       	movw	r12, r22
 128:	7c 01       	movw	r14, r24
  register unsigned long xr; // result register
  register unsigned long q2; // scan-bit register
  register unsigned char f;  // flag (one bit)

  xr = 0;           // clear result
  q2 = 0x40000000L; // higest possible result bit
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e4       	ldi	r27, 0x40	; 64
{
  register unsigned long xr; // result register
  register unsigned long q2; // scan-bit register
  register unsigned char f;  // flag (one bit)

  xr = 0;           // clear result
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	ba 01       	movw	r22, r20
  q2 = 0x40000000L; // higest possible result bit
  do
  {
    if ((xr + q2) <= x)
 138:	8a 01       	movw	r16, r20
 13a:	9b 01       	movw	r18, r22
 13c:	08 0f       	add	r16, r24
 13e:	19 1f       	adc	r17, r25
 140:	2a 1f       	adc	r18, r26
 142:	3b 1f       	adc	r19, r27
 144:	c0 16       	cp	r12, r16
 146:	d1 06       	cpc	r13, r17
 148:	e2 06       	cpc	r14, r18
 14a:	f3 06       	cpc	r15, r19
 14c:	30 f0       	brcs	.+12     	; 0x15a <sqrt_t+0x40>
    {
      x -= xr + q2;
 14e:	c0 1a       	sub	r12, r16
 150:	d1 0a       	sbc	r13, r17
 152:	e2 0a       	sbc	r14, r18
 154:	f3 0a       	sbc	r15, r19
      f = 1; // set flag
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	01 c0       	rjmp	.+2      	; 0x15c <sqrt_t+0x42>
    }
    else
    {
      f = 0; // clear flag
 15a:	20 e0       	ldi	r18, 0x00	; 0
    }
    xr >>= 1;
 15c:	76 95       	lsr	r23
 15e:	67 95       	ror	r22
 160:	57 95       	ror	r21
 162:	47 95       	ror	r20
    if (f)
 164:	22 23       	and	r18, r18
 166:	21 f0       	breq	.+8      	; 0x170 <sqrt_t+0x56>
    {
      xr += q2; // test flag
 168:	48 0f       	add	r20, r24
 16a:	59 1f       	adc	r21, r25
 16c:	6a 1f       	adc	r22, r26
 16e:	7b 1f       	adc	r23, r27
    }
  } while (q2 >>= 2); // shift twice
 170:	b6 95       	lsr	r27
 172:	a7 95       	ror	r26
 174:	97 95       	ror	r25
 176:	87 95       	ror	r24
 178:	b6 95       	lsr	r27
 17a:	a7 95       	ror	r26
 17c:	97 95       	ror	r25
 17e:	87 95       	ror	r24
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	a1 05       	cpc	r26, r1
 184:	b1 05       	cpc	r27, r1
 186:	c1 f6       	brne	.-80     	; 0x138 <sqrt_t+0x1e>
  if (xr < x)
 188:	4c 15       	cp	r20, r12
 18a:	5d 05       	cpc	r21, r13
 18c:	6e 05       	cpc	r22, r14
 18e:	7f 05       	cpc	r23, r15
 190:	38 f4       	brcc	.+14     	; 0x1a0 <sqrt_t+0x86>
  {
    return xr + 1; // add for rounding
 192:	cb 01       	movw	r24, r22
 194:	ba 01       	movw	r22, r20
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	8f 4f       	sbci	r24, 0xFF	; 255
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <sqrt_t+0x8a>
  }
  else
  {
    return xr;
 1a0:	cb 01       	movw	r24, r22
 1a2:	ba 01       	movw	r22, r20
  }
}
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	08 95       	ret

000001b2 <speed_cntr_Move>:
 *  \param accel  Accelration to use, in 0.01*rad/sec^2.
 *  \param decel  Decelration to use, in 0.01*rad/sec^2.
 *  \param speed  Max speed, in 0.01*rad/sec.
 */
void speed_cntr_Move(signed int step, unsigned int accel, unsigned int decel, unsigned int speed)
{
 1b2:	2f 92       	push	r2
 1b4:	3f 92       	push	r3
 1b6:	6f 92       	push	r6
 1b8:	7f 92       	push	r7
 1ba:	8f 92       	push	r8
 1bc:	9f 92       	push	r9
 1be:	af 92       	push	r10
 1c0:	bf 92       	push	r11
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	28 97       	sbiw	r28, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	8c 01       	movw	r16, r24
 1e4:	1b 01       	movw	r2, r22
 1e6:	3a 01       	movw	r6, r20
  unsigned int max_s_lim;
  //! Number of steps before we must start deceleration (if accel does not hit max speed).
  unsigned int accel_lim;

  // Set direction from sign on step value.
  if (step < 0)
 1e8:	99 23       	and	r25, r25
 1ea:	4c f4       	brge	.+18     	; 0x1fe <speed_cntr_Move+0x4c>
  {
    srd.dir = CCW;
 1ec:	e7 ee       	ldi	r30, 0xE7	; 231
 1ee:	f3 e0       	ldi	r31, 0x03	; 3
 1f0:	80 81       	ld	r24, Z
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	80 83       	st	Z, r24
    step = -step;
 1f6:	11 95       	neg	r17
 1f8:	01 95       	neg	r16
 1fa:	11 09       	sbc	r17, r1
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <speed_cntr_Move+0x56>
  }
  else
  {
    srd.dir = CW;
 1fe:	e7 ee       	ldi	r30, 0xE7	; 231
 200:	f3 e0       	ldi	r31, 0x03	; 3
 202:	80 81       	ld	r24, Z
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	80 83       	st	Z, r24
  }

  // If moving only 1 step.
  if (step == 1)
 208:	01 30       	cpi	r16, 0x01	; 1
 20a:	11 05       	cpc	r17, r1
 20c:	c9 f4       	brne	.+50     	; 0x240 <speed_cntr_Move+0x8e>
  {
    // Move one step...
    srd.accel_count = -1;
 20e:	e7 ee       	ldi	r30, 0xE7	; 231
 210:	f3 e0       	ldi	r31, 0x03	; 3
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	92 87       	std	Z+10, r25	; 0x0a
 218:	81 87       	std	Z+9, r24	; 0x09
    // ...in DECEL state.
    srd.run_state = DECEL;
 21a:	80 81       	ld	r24, Z
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	80 83       	st	Z, r24
    // Just a short delay so main() can act on 'running'.
    srd.step_delay = 1000;
 222:	88 ee       	ldi	r24, 0xE8	; 232
 224:	93 e0       	ldi	r25, 0x03	; 3
 226:	92 83       	std	Z+2, r25	; 0x02
 228:	81 83       	std	Z+1, r24	; 0x01
    status.running = TRUE;
 22a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
    /*OCR1A = 10;*/
	OCR0A = 10;
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	87 bd       	out	0x27, r24	; 39
    // Run Timer/Counter 1 with prescaler = 8.
    /*TCCR1B |=  (1 << CS11);*/
	TCCR0B |= ((1<<CS01) |(0<<CS00));
 238:	85 b5       	in	r24, 0x25	; 37
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	85 bd       	out	0x25, r24	; 37
 23e:	ca c0       	rjmp	.+404    	; 0x3d4 <speed_cntr_Move+0x222>
  }
  // Only move if number of steps to move is not zero.
  else if (step != 0)
 240:	01 15       	cp	r16, r1
 242:	11 05       	cpc	r17, r1
 244:	09 f4       	brne	.+2      	; 0x248 <speed_cntr_Move+0x96>
 246:	c6 c0       	rjmp	.+396    	; 0x3d4 <speed_cntr_Move+0x222>
  {
    // Refer to documentation for detailed information about these calculations.

    // Set max speed limit, by calc min_delay to use in timer.
    // min_delay = (alpha / tt)/ w
    srd.min_delay = A_T_x100 / speed;
 248:	69 01       	movw	r12, r18
 24a:	e1 2c       	mov	r14, r1
 24c:	f1 2c       	mov	r15, r1
 24e:	6a ef       	ldi	r22, 0xFA	; 250
 250:	7d ef       	ldi	r23, 0xFD	; 253
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 25e:	49 01       	movw	r8, r18
 260:	5a 01       	movw	r10, r20
 262:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <srd+0x8>
 266:	20 93 ee 03 	sts	0x03EE, r18	; 0x8003ee <srd+0x7>

    // Set accelration by calc the first (c0) step delay .
    // step_delay = 1/tt * sqrt(2*alpha/accel)
    // step_delay = ( tfreq*0.676/100 )*100 * sqrt( (2*alpha*10000000000) / (accel*100) )/10000
    srd.step_delay = (T1_FREQ_148 * sqrt_t(A_SQ / accel)) / 100;
 26a:	c1 01       	movw	r24, r2
 26c:	a0 e0       	ldi	r26, 0x00	; 0
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	ab 83       	std	Y+3, r26	; 0x03
 276:	bc 83       	std	Y+4, r27	; 0x04
 278:	60 e4       	ldi	r22, 0x40	; 64
 27a:	7f e5       	ldi	r23, 0x5F	; 95
 27c:	83 e7       	ldi	r24, 0x73	; 115
 27e:	95 e2       	ldi	r25, 0x25	; 37
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	4b 81       	ldd	r20, Y+3	; 0x03
 286:	5c 81       	ldd	r21, Y+4	; 0x04
 288:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 28c:	ca 01       	movw	r24, r20
 28e:	b9 01       	movw	r22, r18
 290:	0e 94 8d 00 	call	0x11a	; 0x11a <sqrt_t>
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	ad e4       	ldi	r26, 0x4D	; 77
 29a:	b3 e0       	ldi	r27, 0x03	; 3
 29c:	0e 94 c5 04 	call	0x98a	; 0x98a <__muluhisi3>
 2a0:	24 e6       	ldi	r18, 0x64	; 100
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodsi4>
 2ac:	3e 83       	std	Y+6, r19	; 0x06
 2ae:	2d 83       	std	Y+5, r18	; 0x05
 2b0:	30 93 e9 03 	sts	0x03E9, r19	; 0x8003e9 <srd+0x2>
 2b4:	20 93 e8 03 	sts	0x03E8, r18	; 0x8003e8 <srd+0x1>
	/*usart0_send_string("step delay = %f\n",srd.step_delay);*/
    // Find out after how many steps does the speed hit the max speed limit.
    // max_s_lim = speed^2 / (2*alpha*accel)
    max_s_lim = (long)speed * speed / (long)(((long)A_x20000 * accel) / 100);
 2b8:	a7 01       	movw	r20, r14
 2ba:	96 01       	movw	r18, r12
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__mulsi3>
 2c4:	6b 01       	movw	r12, r22
 2c6:	7c 01       	movw	r14, r24
 2c8:	a4 e7       	ldi	r26, 0x74	; 116
 2ca:	b2 e0       	ldi	r27, 0x02	; 2
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	3a 81       	ldd	r19, Y+2	; 0x02
 2d0:	4b 81       	ldd	r20, Y+3	; 0x03
 2d2:	5c 81       	ldd	r21, Y+4	; 0x04
 2d4:	0e 94 c5 04 	call	0x98a	; 0x98a <__muluhisi3>
 2d8:	24 e6       	ldi	r18, 0x64	; 100
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 2ec:	38 87       	std	Y+8, r19	; 0x08
 2ee:	2f 83       	std	Y+7, r18	; 0x07
	/*usart0_send_string("max_s_lim = %f\n",max_s_lim);*/
    // If we hit max speed limit before 0,5 step it will round to 0.
    // But in practice we need to move atleast 1 step to get any speed at all.
    if (max_s_lim == 0)
 2f0:	d9 01       	movw	r26, r18
 2f2:	ab 2b       	or	r26, r27
 2f4:	21 f4       	brne	.+8      	; 0x2fe <speed_cntr_Move+0x14c>
    {
      max_s_lim = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	98 87       	std	Y+8, r25	; 0x08
 2fc:	8f 83       	std	Y+7, r24	; 0x07
    }

    // Find out after how many steps we must start deceleration.
    // n1 = (n1+n2)decel / (accel + decel)
    accel_lim = ((long)step * decel) / (accel + decel);
 2fe:	63 01       	movw	r12, r6
 300:	e1 2c       	mov	r14, r1
 302:	f1 2c       	mov	r15, r1
 304:	d8 01       	movw	r26, r16
 306:	a7 01       	movw	r20, r14
 308:	96 01       	movw	r18, r12
 30a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulshisi3>
 30e:	91 01       	movw	r18, r2
 310:	26 0d       	add	r18, r6
 312:	37 1d       	adc	r19, r7
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
    // We must accelrate at least 1 step before we can start deceleration.
    if (accel_lim == 0)
 31c:	21 15       	cp	r18, r1
 31e:	31 05       	cpc	r19, r1
 320:	11 f4       	brne	.+4      	; 0x326 <speed_cntr_Move+0x174>
    {
      accel_lim = 1;
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
    }

    // Use the limit we hit first to calc decel.
    if (accel_lim <= max_s_lim)
 326:	af 81       	ldd	r26, Y+7	; 0x07
 328:	b8 85       	ldd	r27, Y+8	; 0x08
 32a:	a2 17       	cp	r26, r18
 32c:	b3 07       	cpc	r27, r19
 32e:	38 f0       	brcs	.+14     	; 0x33e <speed_cntr_Move+0x18c>
    {
      srd.decel_val = accel_lim - step;
 330:	20 1b       	sub	r18, r16
 332:	31 0b       	sbc	r19, r17
 334:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <srd+0x6>
 338:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <srd+0x5>
 33c:	17 c0       	rjmp	.+46     	; 0x36c <speed_cntr_Move+0x1ba>
    }
    else
    {
      srd.decel_val = -((long)max_s_lim * accel) / decel;
 33e:	af 81       	ldd	r26, Y+7	; 0x07
 340:	b8 85       	ldd	r27, Y+8	; 0x08
 342:	29 81       	ldd	r18, Y+1	; 0x01
 344:	3a 81       	ldd	r19, Y+2	; 0x02
 346:	4b 81       	ldd	r20, Y+3	; 0x03
 348:	5c 81       	ldd	r21, Y+4	; 0x04
 34a:	0e 94 c5 04 	call	0x98a	; 0x98a <__muluhisi3>
 34e:	90 95       	com	r25
 350:	80 95       	com	r24
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	a7 01       	movw	r20, r14
 35e:	96 01       	movw	r18, r12
 360:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 364:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <srd+0x6>
 368:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <srd+0x5>
    }
    // We must decelrate at least 1 step to stop.
    if (srd.decel_val == 0)
 36c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <srd+0x5>
 370:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <srd+0x6>
 374:	89 2b       	or	r24, r25
 376:	31 f4       	brne	.+12     	; 0x384 <speed_cntr_Move+0x1d2>
    {
      srd.decel_val = -1;
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <srd+0x6>
 380:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <srd+0x5>
    }

    // Find step to start decleration.
    srd.decel_start = step + srd.decel_val;
 384:	e7 ee       	ldi	r30, 0xE7	; 231
 386:	f3 e0       	ldi	r31, 0x03	; 3
 388:	85 81       	ldd	r24, Z+5	; 0x05
 38a:	96 81       	ldd	r25, Z+6	; 0x06
 38c:	08 0f       	add	r16, r24
 38e:	19 1f       	adc	r17, r25
 390:	14 83       	std	Z+4, r17	; 0x04
 392:	03 83       	std	Z+3, r16	; 0x03

    // If the maximum speed is so low that we dont need to go via accelration state.
     if (srd.step_delay <= srd.min_delay)
 394:	8d 81       	ldd	r24, Y+5	; 0x05
 396:	9e 81       	ldd	r25, Y+6	; 0x06
 398:	88 16       	cp	r8, r24
 39a:	99 06       	cpc	r9, r25
 39c:	38 f0       	brcs	.+14     	; 0x3ac <speed_cntr_Move+0x1fa>
     {
       srd.step_delay = srd.min_delay;
 39e:	92 82       	std	Z+2, r9	; 0x02
 3a0:	81 82       	std	Z+1, r8	; 0x01
       srd.run_state = RUN;
 3a2:	80 81       	ld	r24, Z
 3a4:	88 7f       	andi	r24, 0xF8	; 248
 3a6:	83 60       	ori	r24, 0x03	; 3
 3a8:	80 83       	st	Z, r24
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <speed_cntr_Move+0x206>
     }
     else
     {
       srd.run_state = ACCEL;
 3ac:	e7 ee       	ldi	r30, 0xE7	; 231
 3ae:	f3 e0       	ldi	r31, 0x03	; 3
 3b0:	80 81       	ld	r24, Z
 3b2:	88 7f       	andi	r24, 0xF8	; 248
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	80 83       	st	Z, r24
    }

    // Reset counter.
    srd.accel_count = 0;
 3b8:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <srd+0xa>
 3bc:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <srd+0x9>
    status.running = TRUE;
 3c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
    /*OCR1A = 10;*/
	OCR0A = 10;
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	87 bd       	out	0x27, r24	; 39
    // Set Timer/Counter to divide clock by 8
    /*TCCR1B |=  (1 << CS11);*/
	TCCR0B |= ((1<<CS01) |(0<<CS00));
 3ce:	85 b5       	in	r24, 0x25	; 37
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	85 bd       	out	0x25, r24	; 37
  }

}
 3d4:	28 96       	adiw	r28, 0x08	; 8
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	df 90       	pop	r13
 3ee:	cf 90       	pop	r12
 3f0:	bf 90       	pop	r11
 3f2:	af 90       	pop	r10
 3f4:	9f 90       	pop	r9
 3f6:	8f 90       	pop	r8
 3f8:	7f 90       	pop	r7
 3fa:	6f 90       	pop	r6
 3fc:	3f 90       	pop	r3
 3fe:	2f 90       	pop	r2
 400:	08 95       	ret

00000402 <speed_cntr_Init_Timer1>:
 *  enable Output Compare A Match Interrupt.
 */
void speed_cntr_Init_Timer1(void)
{
	// Tells what part of speed ramp we are in.
	srd.run_state = STOP;
 402:	e7 ee       	ldi	r30, 0xE7	; 231
 404:	f3 e0       	ldi	r31, 0x03	; 3
 406:	80 81       	ld	r24, Z
 408:	88 7f       	andi	r24, 0xF8	; 248
 40a:	80 83       	st	Z, r24
	// Timer/Counter 1 in mode 4 CTC (Not running).
	/*TCCR1B = (1 << WGM12);*/
	TCCR0A |= (1<<WGM01);
 40c:	84 b5       	in	r24, 0x24	; 36
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	84 bd       	out	0x24, r24	; 36
	// Timer/Counter 1 Output Compare A Match Interrupt enable.
	/* TIMSK1 = (1 << OCIE1A);*/
	TIMSK0 |= (1<<OCIE0A);
 412:	ee e6       	ldi	r30, 0x6E	; 110
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
 41c:	08 95       	ret

0000041e <__vector_14>:
 *  A new step delay is calculated to follow wanted speed profile
 *  on basis of accel/decel parameters.
 */

ISR(TIMER0_COMPA_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
  static unsigned int step_count = 0;
  // Keep track of remainder from new_step-delay calculation to incrase accurancy
  static unsigned int rest = 0;

  /*OCR1A = srd.step_delay;*/
  OCR0A = srd.step_delay;
 44c:	e7 ee       	ldi	r30, 0xE7	; 231
 44e:	f3 e0       	ldi	r31, 0x03	; 3
 450:	41 81       	ldd	r20, Z+1	; 0x01
 452:	47 bd       	out	0x27, r20	; 39
  
  //Output step motor direction
  PORTC |= ((srd.dir)<<PINC3);
 454:	48 b1       	in	r20, 0x08	; 8
 456:	50 81       	ld	r21, Z
 458:	53 fb       	bst	r21, 3
 45a:	88 27       	eor	r24, r24
 45c:	80 f9       	bld	r24, 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	84 2b       	or	r24, r20
 46e:	88 b9       	out	0x08, r24	; 8

  switch (srd.run_state)
 470:	80 81       	ld	r24, Z
 472:	87 70       	andi	r24, 0x07	; 7
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	c9 f0       	breq	.+50     	; 0x4aa <__vector_14+0x8c>
 478:	38 f0       	brcs	.+14     	; 0x488 <__vector_14+0x6a>
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	09 f4       	brne	.+2      	; 0x480 <__vector_14+0x62>
 47e:	a2 c0       	rjmp	.+324    	; 0x5c4 <__vector_14+0x1a6>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	09 f4       	brne	.+2      	; 0x486 <__vector_14+0x68>
 484:	7b c0       	rjmp	.+246    	; 0x57c <__vector_14+0x15e>
 486:	e1 c0       	rjmp	.+450    	; 0x64a <__vector_14+0x22c>
  {
  case STOP:
    step_count = 0;
 488:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <step_count.2058+0x1>
 48c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <step_count.2058>
    rest = 0;
 490:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rest.2059+0x1>
 494:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rest.2059>
    // Stop Timer/Counter 1.
    /*TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));*/
	TCCR0B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 498:	85 b5       	in	r24, 0x25	; 37
 49a:	88 7f       	andi	r24, 0xF8	; 248
 49c:	85 bd       	out	0x25, r24	; 37
    status.running = FALSE;
 49e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4a2:	8e 7f       	andi	r24, 0xFE	; 254
 4a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
    break;
 4a8:	d0 c0       	rjmp	.+416    	; 0x64a <__vector_14+0x22c>

  case ACCEL:
    /*sm_driver_StepCounter(srd.dir);*/
	PORTC ^=(1<<PINC2);
 4aa:	98 b1       	in	r25, 0x08	; 8
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	89 27       	eor	r24, r25
 4b0:	88 b9       	out	0x08, r24	; 8
    step_count++;
 4b2:	00 91 15 01 	lds	r16, 0x0115	; 0x800115 <step_count.2058>
 4b6:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <step_count.2058+0x1>
 4ba:	0f 5f       	subi	r16, 0xFF	; 255
 4bc:	1f 4f       	sbci	r17, 0xFF	; 255
 4be:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <step_count.2058+0x1>
 4c2:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <step_count.2058>
    srd.accel_count++;
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f7 ee       	ldi	r31, 0xE7	; 231
 4ca:	ef 2e       	mov	r14, r31
 4cc:	f3 e0       	ldi	r31, 0x03	; 3
 4ce:	ff 2e       	mov	r15, r31
 4d0:	f0 2d       	mov	r31, r0
 4d2:	f7 01       	movw	r30, r14
 4d4:	21 85       	ldd	r18, Z+9	; 0x09
 4d6:	32 85       	ldd	r19, Z+10	; 0x0a
 4d8:	2f 5f       	subi	r18, 0xFF	; 255
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	32 87       	std	Z+10, r19	; 0x0a
 4de:	21 87       	std	Z+9, r18	; 0x09
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
 4e0:	c1 81       	ldd	r28, Z+1	; 0x01
 4e2:	d2 81       	ldd	r29, Z+2	; 0x02
 4e4:	ce 01       	movw	r24, r28
 4e6:	a0 e0       	ldi	r26, 0x00	; 0
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <rest.2059>
 4f6:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <rest.2059+0x1>
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	64 0f       	add	r22, r20
 500:	75 1f       	adc	r23, r21
 502:	81 1d       	adc	r24, r1
 504:	91 1d       	adc	r25, r1
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	2f 5f       	subi	r18, 0xFF	; 255
 510:	3f 4f       	sbci	r19, 0xFF	; 255
 512:	03 2e       	mov	r0, r19
 514:	00 0c       	add	r0, r0
 516:	44 0b       	sbc	r20, r20
 518:	55 0b       	sbc	r21, r21
 51a:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 51e:	fe 01       	movw	r30, r28
 520:	e2 1b       	sub	r30, r18
 522:	f3 0b       	sbc	r31, r19
 524:	9f 01       	movw	r18, r30
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
 526:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <rest.2059+0x1>
 52a:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <rest.2059>
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
 52e:	f7 01       	movw	r30, r14
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	94 81       	ldd	r25, Z+4	; 0x04
 534:	08 17       	cp	r16, r24
 536:	19 07       	cpc	r17, r25
 538:	48 f0       	brcs	.+18     	; 0x54c <__vector_14+0x12e>
    {
      srd.accel_count = srd.decel_val;
 53a:	85 81       	ldd	r24, Z+5	; 0x05
 53c:	96 81       	ldd	r25, Z+6	; 0x06
 53e:	92 87       	std	Z+10, r25	; 0x0a
 540:	81 87       	std	Z+9, r24	; 0x09
      srd.run_state = DECEL;
 542:	80 81       	ld	r24, Z
 544:	88 7f       	andi	r24, 0xF8	; 248
 546:	82 60       	ori	r24, 0x02	; 2
 548:	80 83       	st	Z, r24
 54a:	7f c0       	rjmp	.+254    	; 0x64a <__vector_14+0x22c>
    }
    // Chech if we hitted max speed.
    else if (new_step_delay <= srd.min_delay)
 54c:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <srd+0x7>
 550:	50 91 ef 03 	lds	r21, 0x03EF	; 0x8003ef <srd+0x8>
 554:	42 17       	cp	r20, r18
 556:	53 07       	cpc	r21, r19
 558:	08 f4       	brcc	.+2      	; 0x55c <__vector_14+0x13e>
 55a:	77 c0       	rjmp	.+238    	; 0x64a <__vector_14+0x22c>
    {
      last_accel_delay = new_step_delay;
 55c:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <last_accel_delay.2057+0x1>
 560:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <last_accel_delay.2057>
      new_step_delay = srd.min_delay;
      rest = 0;
 564:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rest.2059+0x1>
 568:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rest.2059>
      srd.run_state = RUN;
 56c:	e7 ee       	ldi	r30, 0xE7	; 231
 56e:	f3 e0       	ldi	r31, 0x03	; 3
 570:	80 81       	ld	r24, Z
 572:	88 7f       	andi	r24, 0xF8	; 248
 574:	83 60       	ori	r24, 0x03	; 3
 576:	80 83       	st	Z, r24
    }
    // Chech if we hitted max speed.
    else if (new_step_delay <= srd.min_delay)
    {
      last_accel_delay = new_step_delay;
      new_step_delay = srd.min_delay;
 578:	9a 01       	movw	r18, r20
 57a:	67 c0       	rjmp	.+206    	; 0x64a <__vector_14+0x22c>
    }
    break;

  case RUN:
    //sm_driver_StepCounter(srd.dir);
	PORTC ^=(1<<PINC2);
 57c:	98 b1       	in	r25, 0x08	; 8
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	89 27       	eor	r24, r25
 582:	88 b9       	out	0x08, r24	; 8
    step_count++;
 584:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <step_count.2058>
 588:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <step_count.2058+0x1>
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <step_count.2058+0x1>
 592:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <step_count.2058>
    new_step_delay = srd.min_delay;
 596:	e7 ee       	ldi	r30, 0xE7	; 231
 598:	f3 e0       	ldi	r31, 0x03	; 3
 59a:	27 81       	ldd	r18, Z+7	; 0x07
 59c:	30 85       	ldd	r19, Z+8	; 0x08
    // Chech if we should start decelration.
    if (step_count >= srd.decel_start)
 59e:	43 81       	ldd	r20, Z+3	; 0x03
 5a0:	54 81       	ldd	r21, Z+4	; 0x04
 5a2:	84 17       	cp	r24, r20
 5a4:	95 07       	cpc	r25, r21
 5a6:	08 f4       	brcc	.+2      	; 0x5aa <__vector_14+0x18c>
 5a8:	50 c0       	rjmp	.+160    	; 0x64a <__vector_14+0x22c>
    {
      srd.accel_count = srd.decel_val;
 5aa:	85 81       	ldd	r24, Z+5	; 0x05
 5ac:	96 81       	ldd	r25, Z+6	; 0x06
 5ae:	92 87       	std	Z+10, r25	; 0x0a
 5b0:	81 87       	std	Z+9, r24	; 0x09
      // Start decelration with same delay as accel ended with.
      new_step_delay = last_accel_delay;
 5b2:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <last_accel_delay.2057>
 5b6:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <last_accel_delay.2057+0x1>
      srd.run_state = DECEL;
 5ba:	80 81       	ld	r24, Z
 5bc:	88 7f       	andi	r24, 0xF8	; 248
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	80 83       	st	Z, r24
 5c2:	43 c0       	rjmp	.+134    	; 0x64a <__vector_14+0x22c>
    }
    break;

  case DECEL:
    /*sm_driver_StepCounter(srd.dir);*/
	PORTC ^=(1<<PINC2);
 5c4:	98 b1       	in	r25, 0x08	; 8
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	89 27       	eor	r24, r25
 5ca:	88 b9       	out	0x08, r24	; 8
    step_count++;
 5cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <step_count.2058>
 5d0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <step_count.2058+0x1>
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <step_count.2058+0x1>
 5da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <step_count.2058>
    srd.accel_count++;
 5de:	e7 ee       	ldi	r30, 0xE7	; 231
 5e0:	f3 e0       	ldi	r31, 0x03	; 3
 5e2:	c1 85       	ldd	r28, Z+9	; 0x09
 5e4:	d2 85       	ldd	r29, Z+10	; 0x0a
 5e6:	21 96       	adiw	r28, 0x01	; 1
 5e8:	d2 87       	std	Z+10, r29	; 0x0a
 5ea:	c1 87       	std	Z+9, r28	; 0x09
    new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest) / (4 * srd.accel_count + 1));
 5ec:	01 81       	ldd	r16, Z+1	; 0x01
 5ee:	12 81       	ldd	r17, Z+2	; 0x02
 5f0:	c8 01       	movw	r24, r16
 5f2:	a0 e0       	ldi	r26, 0x00	; 0
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	aa 1f       	adc	r26, r26
 5fc:	bb 1f       	adc	r27, r27
 5fe:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <rest.2059>
 602:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <rest.2059+0x1>
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	62 0f       	add	r22, r18
 60c:	73 1f       	adc	r23, r19
 60e:	81 1d       	adc	r24, r1
 610:	91 1d       	adc	r25, r1
 612:	9e 01       	movw	r18, r28
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	22 0f       	add	r18, r18
 61a:	33 1f       	adc	r19, r19
 61c:	2f 5f       	subi	r18, 0xFF	; 255
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
 620:	03 2e       	mov	r0, r19
 622:	00 0c       	add	r0, r0
 624:	44 0b       	sbc	r20, r20
 626:	55 0b       	sbc	r21, r21
 628:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodsi4>
 62c:	f8 01       	movw	r30, r16
 62e:	e2 1b       	sub	r30, r18
 630:	f3 0b       	sbc	r31, r19
 632:	9f 01       	movw	r18, r30
    rest = ((2 * (long)srd.step_delay) + rest) % (4 * srd.accel_count + 1);
 634:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <rest.2059+0x1>
 638:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <rest.2059>
    // Check if we at last step
    if (srd.accel_count >= 0)
 63c:	dd 23       	and	r29, r29
 63e:	2c f0       	brlt	.+10     	; 0x64a <__vector_14+0x22c>
    {
      srd.run_state = STOP;
 640:	e7 ee       	ldi	r30, 0xE7	; 231
 642:	f3 e0       	ldi	r31, 0x03	; 3
 644:	80 81       	ld	r24, Z
 646:	88 7f       	andi	r24, 0xF8	; 248
 648:	80 83       	st	Z, r24
    }
    break;
  }
  srd.step_delay = new_step_delay;
 64a:	30 93 e9 03 	sts	0x03E9, r19	; 0x8003e9 <srd+0x2>
 64e:	20 93 e8 03 	sts	0x03E8, r18	; 0x8003e8 <srd+0x1>

}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <rbuffer_init>:
}

volatile ringbuffer_t * uart_get_uart0_rx_buffer_address(void)
{
	return &(p_UART0_meta->rb_rx);
}
 680:	3f b7       	in	r19, 0x3f	; 63
 682:	f8 94       	cli
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	09 c0       	rjmp	.+18     	; 0x69a <rbuffer_init+0x1a>
 688:	fc 01       	movw	r30, r24
 68a:	e0 5c       	subi	r30, 0xC0	; 192
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	10 82       	st	Z, r1
 690:	31 96       	adiw	r30, 0x01	; 1
 692:	10 82       	st	Z, r1
 694:	31 96       	adiw	r30, 0x01	; 1
 696:	10 82       	st	Z, r1
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	21 11       	cpse	r18, r1
 69c:	f5 cf       	rjmp	.-22     	; 0x688 <rbuffer_init+0x8>
 69e:	3f bf       	out	0x3f, r19	; 63
 6a0:	08 95       	ret

000006a2 <rbuffer_full>:
 6a2:	8e 5b       	subi	r24, 0xBE	; 190
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	fc 01       	movw	r30, r24
 6a8:	90 81       	ld	r25, Z
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 34       	cpi	r25, 0x40	; 64
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <rbuffer_full+0x10>
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret

000006b4 <rbuffer_empty>:
 6b4:	8e 5b       	subi	r24, 0xBE	; 190
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	fc 01       	movw	r30, r24
 6ba:	90 81       	ld	r25, Z
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	91 11       	cpse	r25, r1
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret

000006c4 <rbuffer_insert>:
 6c4:	fb 01       	movw	r30, r22
 6c6:	e0 5c       	subi	r30, 0xC0	; 192
 6c8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ca:	90 81       	ld	r25, Z
 6cc:	fb 01       	movw	r30, r22
 6ce:	e9 0f       	add	r30, r25
 6d0:	f1 1d       	adc	r31, r1
 6d2:	80 83       	st	Z, r24
 6d4:	9f b7       	in	r25, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <rbuffer_insert+0x30>
 6dc:	fb 01       	movw	r30, r22
 6de:	e0 5c       	subi	r30, 0xC0	; 192
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	80 81       	ld	r24, Z
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	8f 73       	andi	r24, 0x3F	; 63
 6e8:	80 83       	st	Z, r24
 6ea:	32 96       	adiw	r30, 0x02	; 2
 6ec:	80 81       	ld	r24, Z
 6ee:	8f 5f       	subi	r24, 0xFF	; 255
 6f0:	80 83       	st	Z, r24
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	81 11       	cpse	r24, r1
 6f6:	f2 cf       	rjmp	.-28     	; 0x6dc <rbuffer_insert+0x18>
 6f8:	9f bf       	out	0x3f, r25	; 63
 6fa:	08 95       	ret

000006fc <rbuffer_remove>:
 6fc:	9c 01       	movw	r18, r24
 6fe:	fc 01       	movw	r30, r24
 700:	ef 5b       	subi	r30, 0xBF	; 191
 702:	ff 4f       	sbci	r31, 0xFF	; 255
 704:	80 81       	ld	r24, Z
 706:	f9 01       	movw	r30, r18
 708:	e8 0f       	add	r30, r24
 70a:	f1 1d       	adc	r31, r1
 70c:	80 81       	ld	r24, Z
 70e:	4f b7       	in	r20, 0x3f	; 63
 710:	f8 94       	cli
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	0c c0       	rjmp	.+24     	; 0x72e <rbuffer_remove+0x32>
 716:	f9 01       	movw	r30, r18
 718:	ef 5b       	subi	r30, 0xBF	; 191
 71a:	ff 4f       	sbci	r31, 0xFF	; 255
 71c:	90 81       	ld	r25, Z
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	9f 73       	andi	r25, 0x3F	; 63
 722:	90 83       	st	Z, r25
 724:	31 96       	adiw	r30, 0x01	; 1
 726:	90 81       	ld	r25, Z
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	90 83       	st	Z, r25
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	91 11       	cpse	r25, r1
 730:	f2 cf       	rjmp	.-28     	; 0x716 <rbuffer_remove+0x1a>
 732:	4f bf       	out	0x3f, r20	; 63
 734:	08 95       	ret

00000736 <usart0_init>:
 736:	8a b1       	in	r24, 0x0a	; 10
 738:	8d 7f       	andi	r24, 0xFD	; 253
 73a:	8a b9       	out	0x0a, r24	; 10
 73c:	8b b1       	in	r24, 0x0b	; 11
 73e:	82 60       	ori	r24, 0x02	; 2
 740:	8b b9       	out	0x0b, r24	; 11
 742:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 746:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 74a:	8d 5b       	subi	r24, 0xBD	; 189
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	0e 94 40 03 	call	0x680	; 0x680 <rbuffer_init>
 752:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 756:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 75a:	0e 94 40 03 	call	0x680	; 0x680 <rbuffer_init>
 75e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 762:	83 e3       	ldi	r24, 0x33	; 51
 764:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 768:	e1 ec       	ldi	r30, 0xC1	; 193
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	88 69       	ori	r24, 0x98	; 152
 770:	80 83       	st	Z, r24
 772:	e2 ec       	ldi	r30, 0xC2	; 194
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	86 60       	ori	r24, 0x06	; 6
 77a:	80 83       	st	Z, r24
 77c:	78 94       	sei
 77e:	08 95       	ret

00000780 <usart0_send_char>:
 780:	cf 93       	push	r28
 782:	c8 2f       	mov	r28, r24
 784:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 788:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 78c:	8d 5b       	subi	r24, 0xBD	; 189
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	0e 94 51 03 	call	0x6a2	; 0x6a2 <rbuffer_full>
 794:	81 11       	cpse	r24, r1
 796:	f6 cf       	rjmp	.-20     	; 0x784 <usart0_send_char+0x4>
 798:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 79c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7a0:	6d 5b       	subi	r22, 0xBD	; 189
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8c 2f       	mov	r24, r28
 7a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <rbuffer_insert>
 7aa:	e1 ec       	ldi	r30, 0xC1	; 193
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	80 62       	ori	r24, 0x20	; 32
 7b2:	80 83       	st	Z, r24
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <usart0_send_string>:
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	ec 01       	movw	r28, r24
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <usart0_send_string+0xe>
 7c0:	21 96       	adiw	r28, 0x01	; 1
 7c2:	0e 94 c0 03 	call	0x780	; 0x780 <usart0_send_char>
 7c6:	88 81       	ld	r24, Y
 7c8:	81 11       	cpse	r24, r1
 7ca:	fa cf       	rjmp	.-12     	; 0x7c0 <usart0_send_string+0x8>
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <__vector_18>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART_RX_vect) {
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	cf 93       	push	r28
 7f2:	ef 93       	push	r30
 7f4:	ff 93       	push	r31
	
   char	data = UDR0;
 7f6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
 7fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 802:	0e 94 51 03 	call	0x6a2	; 0x6a2 <rbuffer_full>
 806:	81 11       	cpse	r24, r1
 808:	14 c0       	rjmp	.+40     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
 80a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 80e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 812:	8c 2f       	mov	r24, r28
 814:	0e 94 62 03 	call	0x6c4	; 0x6c4 <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
 818:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 81c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 820:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 824:	8c 71       	andi	r24, 0x1C	; 28
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	ea 57       	subi	r30, 0x7A	; 122
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	91 83       	std	Z+1, r25	; 0x01
 82e:	80 83       	st	Z, r24
 830:	0d c0       	rjmp	.+26     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
 832:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 836:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 83a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 83e:	8c 71       	andi	r24, 0x1C	; 28
 840:	81 60       	ori	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	ea 57       	subi	r30, 0x7A	; 122
 846:	ff 4f       	sbci	r31, 0xFF	; 255
 848:	91 83       	std	Z+1, r25	; 0x01
 84a:	80 83       	st	Z, r24
    }   
}
 84c:	ff 91       	pop	r31
 84e:	ef 91       	pop	r30
 850:	cf 91       	pop	r28
 852:	bf 91       	pop	r27
 854:	af 91       	pop	r26
 856:	9f 91       	pop	r25
 858:	8f 91       	pop	r24
 85a:	7f 91       	pop	r23
 85c:	6f 91       	pop	r22
 85e:	5f 91       	pop	r21
 860:	4f 91       	pop	r20
 862:	3f 91       	pop	r19
 864:	2f 91       	pop	r18
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	0f 90       	pop	r0
 86c:	1f 90       	pop	r1
 86e:	18 95       	reti

00000870 <__vector_19>:
ISR(USART_UDRE_vect) {
 870:	1f 92       	push	r1
 872:	0f 92       	push	r0
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	0f 92       	push	r0
 878:	11 24       	eor	r1, r1
 87a:	2f 93       	push	r18
 87c:	3f 93       	push	r19
 87e:	4f 93       	push	r20
 880:	5f 93       	push	r21
 882:	6f 93       	push	r22
 884:	7f 93       	push	r23
 886:	8f 93       	push	r24
 888:	9f 93       	push	r25
 88a:	af 93       	push	r26
 88c:	bf 93       	push	r27
 88e:	ef 93       	push	r30
 890:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
 892:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 896:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 89a:	8d 5b       	subi	r24, 0xBD	; 189
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rbuffer_empty>
 8a2:	81 11       	cpse	r24, r1
 8a4:	0b c0       	rjmp	.+22     	; 0x8bc <__vector_19+0x4c>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
 8a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8ae:	8d 5b       	subi	r24, 0xBD	; 189
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <rbuffer_remove>
 8b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <__vector_19+0x56>
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
 8bc:	e1 ec       	ldi	r30, 0xC1	; 193
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	8f 7d       	andi	r24, 0xDF	; 223
 8c4:	80 83       	st	Z, r24
    }
}
 8c6:	ff 91       	pop	r31
 8c8:	ef 91       	pop	r30
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <__mulsi3>:
 8e8:	db 01       	movw	r26, r22
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	0e 94 c5 04 	call	0x98a	; 0x98a <__muluhisi3>
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	a2 9f       	mul	r26, r18
 8f8:	80 0d       	add	r24, r0
 8fa:	91 1d       	adc	r25, r1
 8fc:	a3 9f       	mul	r26, r19
 8fe:	90 0d       	add	r25, r0
 900:	b2 9f       	mul	r27, r18
 902:	90 0d       	add	r25, r0
 904:	11 24       	eor	r1, r1
 906:	08 95       	ret

00000908 <__udivmodsi4>:
 908:	a1 e2       	ldi	r26, 0x21	; 33
 90a:	1a 2e       	mov	r1, r26
 90c:	aa 1b       	sub	r26, r26
 90e:	bb 1b       	sub	r27, r27
 910:	fd 01       	movw	r30, r26
 912:	0d c0       	rjmp	.+26     	; 0x92e <__udivmodsi4_ep>

00000914 <__udivmodsi4_loop>:
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	ee 1f       	adc	r30, r30
 91a:	ff 1f       	adc	r31, r31
 91c:	a2 17       	cp	r26, r18
 91e:	b3 07       	cpc	r27, r19
 920:	e4 07       	cpc	r30, r20
 922:	f5 07       	cpc	r31, r21
 924:	20 f0       	brcs	.+8      	; 0x92e <__udivmodsi4_ep>
 926:	a2 1b       	sub	r26, r18
 928:	b3 0b       	sbc	r27, r19
 92a:	e4 0b       	sbc	r30, r20
 92c:	f5 0b       	sbc	r31, r21

0000092e <__udivmodsi4_ep>:
 92e:	66 1f       	adc	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	1a 94       	dec	r1
 938:	69 f7       	brne	.-38     	; 0x914 <__udivmodsi4_loop>
 93a:	60 95       	com	r22
 93c:	70 95       	com	r23
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	9b 01       	movw	r18, r22
 944:	ac 01       	movw	r20, r24
 946:	bd 01       	movw	r22, r26
 948:	cf 01       	movw	r24, r30
 94a:	08 95       	ret

0000094c <__divmodsi4>:
 94c:	05 2e       	mov	r0, r21
 94e:	97 fb       	bst	r25, 7
 950:	1e f4       	brtc	.+6      	; 0x958 <__divmodsi4+0xc>
 952:	00 94       	com	r0
 954:	0e 94 bd 04 	call	0x97a	; 0x97a <__negsi2>
 958:	57 fd       	sbrc	r21, 7
 95a:	07 d0       	rcall	.+14     	; 0x96a <__divmodsi4_neg2>
 95c:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodsi4>
 960:	07 fc       	sbrc	r0, 7
 962:	03 d0       	rcall	.+6      	; 0x96a <__divmodsi4_neg2>
 964:	4e f4       	brtc	.+18     	; 0x978 <__divmodsi4_exit>
 966:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__negsi2>

0000096a <__divmodsi4_neg2>:
 96a:	50 95       	com	r21
 96c:	40 95       	com	r20
 96e:	30 95       	com	r19
 970:	21 95       	neg	r18
 972:	3f 4f       	sbci	r19, 0xFF	; 255
 974:	4f 4f       	sbci	r20, 0xFF	; 255
 976:	5f 4f       	sbci	r21, 0xFF	; 255

00000978 <__divmodsi4_exit>:
 978:	08 95       	ret

0000097a <__negsi2>:
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	08 95       	ret

0000098a <__muluhisi3>:
 98a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__umulhisi3>
 98e:	a5 9f       	mul	r26, r21
 990:	90 0d       	add	r25, r0
 992:	b4 9f       	mul	r27, r20
 994:	90 0d       	add	r25, r0
 996:	a4 9f       	mul	r26, r20
 998:	80 0d       	add	r24, r0
 99a:	91 1d       	adc	r25, r1
 99c:	11 24       	eor	r1, r1
 99e:	08 95       	ret

000009a0 <__mulshisi3>:
 9a0:	b7 ff       	sbrs	r27, 7
 9a2:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__muluhisi3>

000009a6 <__mulohisi3>:
 9a6:	0e 94 c5 04 	call	0x98a	; 0x98a <__muluhisi3>
 9aa:	82 1b       	sub	r24, r18
 9ac:	93 0b       	sbc	r25, r19
 9ae:	08 95       	ret

000009b0 <__umulhisi3>:
 9b0:	a2 9f       	mul	r26, r18
 9b2:	b0 01       	movw	r22, r0
 9b4:	b3 9f       	mul	r27, r19
 9b6:	c0 01       	movw	r24, r0
 9b8:	a3 9f       	mul	r26, r19
 9ba:	70 0d       	add	r23, r0
 9bc:	81 1d       	adc	r24, r1
 9be:	11 24       	eor	r1, r1
 9c0:	91 1d       	adc	r25, r1
 9c2:	b2 9f       	mul	r27, r18
 9c4:	70 0d       	add	r23, r0
 9c6:	81 1d       	adc	r24, r1
 9c8:	11 24       	eor	r1, r1
 9ca:	91 1d       	adc	r25, r1
 9cc:	08 95       	ret

000009ce <sprintf>:
 9ce:	ae e0       	ldi	r26, 0x0E	; 14
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	ed ee       	ldi	r30, 0xED	; 237
 9d4:	f4 e0       	ldi	r31, 0x04	; 4
 9d6:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__prologue_saves__+0x1c>
 9da:	0d 89       	ldd	r16, Y+21	; 0x15
 9dc:	1e 89       	ldd	r17, Y+22	; 0x16
 9de:	86 e0       	ldi	r24, 0x06	; 6
 9e0:	8c 83       	std	Y+4, r24	; 0x04
 9e2:	1a 83       	std	Y+2, r17	; 0x02
 9e4:	09 83       	std	Y+1, r16	; 0x01
 9e6:	8f ef       	ldi	r24, 0xFF	; 255
 9e8:	9f e7       	ldi	r25, 0x7F	; 127
 9ea:	9e 83       	std	Y+6, r25	; 0x06
 9ec:	8d 83       	std	Y+5, r24	; 0x05
 9ee:	ae 01       	movw	r20, r28
 9f0:	47 5e       	subi	r20, 0xE7	; 231
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255
 9f4:	6f 89       	ldd	r22, Y+23	; 0x17
 9f6:	78 8d       	ldd	r23, Y+24	; 0x18
 9f8:	ce 01       	movw	r24, r28
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	0e 94 09 05 	call	0xa12	; 0xa12 <vfprintf>
 a00:	ef 81       	ldd	r30, Y+7	; 0x07
 a02:	f8 85       	ldd	r31, Y+8	; 0x08
 a04:	e0 0f       	add	r30, r16
 a06:	f1 1f       	adc	r31, r17
 a08:	10 82       	st	Z, r1
 a0a:	2e 96       	adiw	r28, 0x0e	; 14
 a0c:	e4 e0       	ldi	r30, 0x04	; 4
 a0e:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__epilogue_restores__+0x1c>

00000a12 <vfprintf>:
 a12:	ab e0       	ldi	r26, 0x0B	; 11
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	ef e0       	ldi	r30, 0x0F	; 15
 a18:	f5 e0       	ldi	r31, 0x05	; 5
 a1a:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__prologue_saves__>
 a1e:	6c 01       	movw	r12, r24
 a20:	7b 01       	movw	r14, r22
 a22:	8a 01       	movw	r16, r20
 a24:	fc 01       	movw	r30, r24
 a26:	17 82       	std	Z+7, r1	; 0x07
 a28:	16 82       	std	Z+6, r1	; 0x06
 a2a:	83 81       	ldd	r24, Z+3	; 0x03
 a2c:	81 ff       	sbrs	r24, 1
 a2e:	cc c1       	rjmp	.+920    	; 0xdc8 <vfprintf+0x3b6>
 a30:	ce 01       	movw	r24, r28
 a32:	01 96       	adiw	r24, 0x01	; 1
 a34:	3c 01       	movw	r6, r24
 a36:	f6 01       	movw	r30, r12
 a38:	93 81       	ldd	r25, Z+3	; 0x03
 a3a:	f7 01       	movw	r30, r14
 a3c:	93 fd       	sbrc	r25, 3
 a3e:	85 91       	lpm	r24, Z+
 a40:	93 ff       	sbrs	r25, 3
 a42:	81 91       	ld	r24, Z+
 a44:	7f 01       	movw	r14, r30
 a46:	88 23       	and	r24, r24
 a48:	09 f4       	brne	.+2      	; 0xa4c <vfprintf+0x3a>
 a4a:	ba c1       	rjmp	.+884    	; 0xdc0 <vfprintf+0x3ae>
 a4c:	85 32       	cpi	r24, 0x25	; 37
 a4e:	39 f4       	brne	.+14     	; 0xa5e <vfprintf+0x4c>
 a50:	93 fd       	sbrc	r25, 3
 a52:	85 91       	lpm	r24, Z+
 a54:	93 ff       	sbrs	r25, 3
 a56:	81 91       	ld	r24, Z+
 a58:	7f 01       	movw	r14, r30
 a5a:	85 32       	cpi	r24, 0x25	; 37
 a5c:	29 f4       	brne	.+10     	; 0xa68 <vfprintf+0x56>
 a5e:	b6 01       	movw	r22, r12
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 a66:	e7 cf       	rjmp	.-50     	; 0xa36 <vfprintf+0x24>
 a68:	91 2c       	mov	r9, r1
 a6a:	21 2c       	mov	r2, r1
 a6c:	31 2c       	mov	r3, r1
 a6e:	ff e1       	ldi	r31, 0x1F	; 31
 a70:	f3 15       	cp	r31, r3
 a72:	d8 f0       	brcs	.+54     	; 0xaaa <vfprintf+0x98>
 a74:	8b 32       	cpi	r24, 0x2B	; 43
 a76:	79 f0       	breq	.+30     	; 0xa96 <vfprintf+0x84>
 a78:	38 f4       	brcc	.+14     	; 0xa88 <vfprintf+0x76>
 a7a:	80 32       	cpi	r24, 0x20	; 32
 a7c:	79 f0       	breq	.+30     	; 0xa9c <vfprintf+0x8a>
 a7e:	83 32       	cpi	r24, 0x23	; 35
 a80:	a1 f4       	brne	.+40     	; 0xaaa <vfprintf+0x98>
 a82:	23 2d       	mov	r18, r3
 a84:	20 61       	ori	r18, 0x10	; 16
 a86:	1d c0       	rjmp	.+58     	; 0xac2 <vfprintf+0xb0>
 a88:	8d 32       	cpi	r24, 0x2D	; 45
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <vfprintf+0x92>
 a8c:	80 33       	cpi	r24, 0x30	; 48
 a8e:	69 f4       	brne	.+26     	; 0xaaa <vfprintf+0x98>
 a90:	23 2d       	mov	r18, r3
 a92:	21 60       	ori	r18, 0x01	; 1
 a94:	16 c0       	rjmp	.+44     	; 0xac2 <vfprintf+0xb0>
 a96:	83 2d       	mov	r24, r3
 a98:	82 60       	ori	r24, 0x02	; 2
 a9a:	38 2e       	mov	r3, r24
 a9c:	e3 2d       	mov	r30, r3
 a9e:	e4 60       	ori	r30, 0x04	; 4
 aa0:	3e 2e       	mov	r3, r30
 aa2:	2a c0       	rjmp	.+84     	; 0xaf8 <vfprintf+0xe6>
 aa4:	f3 2d       	mov	r31, r3
 aa6:	f8 60       	ori	r31, 0x08	; 8
 aa8:	1d c0       	rjmp	.+58     	; 0xae4 <vfprintf+0xd2>
 aaa:	37 fc       	sbrc	r3, 7
 aac:	2d c0       	rjmp	.+90     	; 0xb08 <vfprintf+0xf6>
 aae:	20 ed       	ldi	r18, 0xD0	; 208
 ab0:	28 0f       	add	r18, r24
 ab2:	2a 30       	cpi	r18, 0x0A	; 10
 ab4:	40 f0       	brcs	.+16     	; 0xac6 <vfprintf+0xb4>
 ab6:	8e 32       	cpi	r24, 0x2E	; 46
 ab8:	b9 f4       	brne	.+46     	; 0xae8 <vfprintf+0xd6>
 aba:	36 fc       	sbrc	r3, 6
 abc:	81 c1       	rjmp	.+770    	; 0xdc0 <vfprintf+0x3ae>
 abe:	23 2d       	mov	r18, r3
 ac0:	20 64       	ori	r18, 0x40	; 64
 ac2:	32 2e       	mov	r3, r18
 ac4:	19 c0       	rjmp	.+50     	; 0xaf8 <vfprintf+0xe6>
 ac6:	36 fe       	sbrs	r3, 6
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <vfprintf+0xc4>
 aca:	8a e0       	ldi	r24, 0x0A	; 10
 acc:	98 9e       	mul	r9, r24
 ace:	20 0d       	add	r18, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	92 2e       	mov	r9, r18
 ad4:	11 c0       	rjmp	.+34     	; 0xaf8 <vfprintf+0xe6>
 ad6:	ea e0       	ldi	r30, 0x0A	; 10
 ad8:	2e 9e       	mul	r2, r30
 ada:	20 0d       	add	r18, r0
 adc:	11 24       	eor	r1, r1
 ade:	22 2e       	mov	r2, r18
 ae0:	f3 2d       	mov	r31, r3
 ae2:	f0 62       	ori	r31, 0x20	; 32
 ae4:	3f 2e       	mov	r3, r31
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <vfprintf+0xe6>
 ae8:	8c 36       	cpi	r24, 0x6C	; 108
 aea:	21 f4       	brne	.+8      	; 0xaf4 <vfprintf+0xe2>
 aec:	83 2d       	mov	r24, r3
 aee:	80 68       	ori	r24, 0x80	; 128
 af0:	38 2e       	mov	r3, r24
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <vfprintf+0xe6>
 af4:	88 36       	cpi	r24, 0x68	; 104
 af6:	41 f4       	brne	.+16     	; 0xb08 <vfprintf+0xf6>
 af8:	f7 01       	movw	r30, r14
 afa:	93 fd       	sbrc	r25, 3
 afc:	85 91       	lpm	r24, Z+
 afe:	93 ff       	sbrs	r25, 3
 b00:	81 91       	ld	r24, Z+
 b02:	7f 01       	movw	r14, r30
 b04:	81 11       	cpse	r24, r1
 b06:	b3 cf       	rjmp	.-154    	; 0xa6e <vfprintf+0x5c>
 b08:	98 2f       	mov	r25, r24
 b0a:	9f 7d       	andi	r25, 0xDF	; 223
 b0c:	95 54       	subi	r25, 0x45	; 69
 b0e:	93 30       	cpi	r25, 0x03	; 3
 b10:	28 f4       	brcc	.+10     	; 0xb1c <vfprintf+0x10a>
 b12:	0c 5f       	subi	r16, 0xFC	; 252
 b14:	1f 4f       	sbci	r17, 0xFF	; 255
 b16:	9f e3       	ldi	r25, 0x3F	; 63
 b18:	99 83       	std	Y+1, r25	; 0x01
 b1a:	0d c0       	rjmp	.+26     	; 0xb36 <vfprintf+0x124>
 b1c:	83 36       	cpi	r24, 0x63	; 99
 b1e:	31 f0       	breq	.+12     	; 0xb2c <vfprintf+0x11a>
 b20:	83 37       	cpi	r24, 0x73	; 115
 b22:	71 f0       	breq	.+28     	; 0xb40 <vfprintf+0x12e>
 b24:	83 35       	cpi	r24, 0x53	; 83
 b26:	09 f0       	breq	.+2      	; 0xb2a <vfprintf+0x118>
 b28:	59 c0       	rjmp	.+178    	; 0xbdc <vfprintf+0x1ca>
 b2a:	21 c0       	rjmp	.+66     	; 0xb6e <vfprintf+0x15c>
 b2c:	f8 01       	movw	r30, r16
 b2e:	80 81       	ld	r24, Z
 b30:	89 83       	std	Y+1, r24	; 0x01
 b32:	0e 5f       	subi	r16, 0xFE	; 254
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	88 24       	eor	r8, r8
 b38:	83 94       	inc	r8
 b3a:	91 2c       	mov	r9, r1
 b3c:	53 01       	movw	r10, r6
 b3e:	13 c0       	rjmp	.+38     	; 0xb66 <vfprintf+0x154>
 b40:	28 01       	movw	r4, r16
 b42:	f2 e0       	ldi	r31, 0x02	; 2
 b44:	4f 0e       	add	r4, r31
 b46:	51 1c       	adc	r5, r1
 b48:	f8 01       	movw	r30, r16
 b4a:	a0 80       	ld	r10, Z
 b4c:	b1 80       	ldd	r11, Z+1	; 0x01
 b4e:	36 fe       	sbrs	r3, 6
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <vfprintf+0x146>
 b52:	69 2d       	mov	r22, r9
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0x14a>
 b58:	6f ef       	ldi	r22, 0xFF	; 255
 b5a:	7f ef       	ldi	r23, 0xFF	; 255
 b5c:	c5 01       	movw	r24, r10
 b5e:	0e 94 f5 06 	call	0xdea	; 0xdea <strnlen>
 b62:	4c 01       	movw	r8, r24
 b64:	82 01       	movw	r16, r4
 b66:	f3 2d       	mov	r31, r3
 b68:	ff 77       	andi	r31, 0x7F	; 127
 b6a:	3f 2e       	mov	r3, r31
 b6c:	16 c0       	rjmp	.+44     	; 0xb9a <vfprintf+0x188>
 b6e:	28 01       	movw	r4, r16
 b70:	22 e0       	ldi	r18, 0x02	; 2
 b72:	42 0e       	add	r4, r18
 b74:	51 1c       	adc	r5, r1
 b76:	f8 01       	movw	r30, r16
 b78:	a0 80       	ld	r10, Z
 b7a:	b1 80       	ldd	r11, Z+1	; 0x01
 b7c:	36 fe       	sbrs	r3, 6
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <vfprintf+0x174>
 b80:	69 2d       	mov	r22, r9
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x178>
 b86:	6f ef       	ldi	r22, 0xFF	; 255
 b88:	7f ef       	ldi	r23, 0xFF	; 255
 b8a:	c5 01       	movw	r24, r10
 b8c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <strnlen_P>
 b90:	4c 01       	movw	r8, r24
 b92:	f3 2d       	mov	r31, r3
 b94:	f0 68       	ori	r31, 0x80	; 128
 b96:	3f 2e       	mov	r3, r31
 b98:	82 01       	movw	r16, r4
 b9a:	33 fc       	sbrc	r3, 3
 b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <vfprintf+0x1c2>
 b9e:	82 2d       	mov	r24, r2
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	88 16       	cp	r8, r24
 ba4:	99 06       	cpc	r9, r25
 ba6:	b0 f4       	brcc	.+44     	; 0xbd4 <vfprintf+0x1c2>
 ba8:	b6 01       	movw	r22, r12
 baa:	80 e2       	ldi	r24, 0x20	; 32
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 bb2:	2a 94       	dec	r2
 bb4:	f4 cf       	rjmp	.-24     	; 0xb9e <vfprintf+0x18c>
 bb6:	f5 01       	movw	r30, r10
 bb8:	37 fc       	sbrc	r3, 7
 bba:	85 91       	lpm	r24, Z+
 bbc:	37 fe       	sbrs	r3, 7
 bbe:	81 91       	ld	r24, Z+
 bc0:	5f 01       	movw	r10, r30
 bc2:	b6 01       	movw	r22, r12
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 bca:	21 10       	cpse	r2, r1
 bcc:	2a 94       	dec	r2
 bce:	21 e0       	ldi	r18, 0x01	; 1
 bd0:	82 1a       	sub	r8, r18
 bd2:	91 08       	sbc	r9, r1
 bd4:	81 14       	cp	r8, r1
 bd6:	91 04       	cpc	r9, r1
 bd8:	71 f7       	brne	.-36     	; 0xbb6 <vfprintf+0x1a4>
 bda:	e8 c0       	rjmp	.+464    	; 0xdac <vfprintf+0x39a>
 bdc:	84 36       	cpi	r24, 0x64	; 100
 bde:	11 f0       	breq	.+4      	; 0xbe4 <vfprintf+0x1d2>
 be0:	89 36       	cpi	r24, 0x69	; 105
 be2:	41 f5       	brne	.+80     	; 0xc34 <vfprintf+0x222>
 be4:	f8 01       	movw	r30, r16
 be6:	37 fe       	sbrs	r3, 7
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <vfprintf+0x1e6>
 bea:	60 81       	ld	r22, Z
 bec:	71 81       	ldd	r23, Z+1	; 0x01
 bee:	82 81       	ldd	r24, Z+2	; 0x02
 bf0:	93 81       	ldd	r25, Z+3	; 0x03
 bf2:	0c 5f       	subi	r16, 0xFC	; 252
 bf4:	1f 4f       	sbci	r17, 0xFF	; 255
 bf6:	08 c0       	rjmp	.+16     	; 0xc08 <vfprintf+0x1f6>
 bf8:	60 81       	ld	r22, Z
 bfa:	71 81       	ldd	r23, Z+1	; 0x01
 bfc:	07 2e       	mov	r0, r23
 bfe:	00 0c       	add	r0, r0
 c00:	88 0b       	sbc	r24, r24
 c02:	99 0b       	sbc	r25, r25
 c04:	0e 5f       	subi	r16, 0xFE	; 254
 c06:	1f 4f       	sbci	r17, 0xFF	; 255
 c08:	f3 2d       	mov	r31, r3
 c0a:	ff 76       	andi	r31, 0x6F	; 111
 c0c:	3f 2e       	mov	r3, r31
 c0e:	97 ff       	sbrs	r25, 7
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <vfprintf+0x212>
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	f0 68       	ori	r31, 0x80	; 128
 c22:	3f 2e       	mov	r3, r31
 c24:	2a e0       	ldi	r18, 0x0A	; 10
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	a3 01       	movw	r20, r6
 c2a:	0e 94 3c 07 	call	0xe78	; 0xe78 <__ultoa_invert>
 c2e:	88 2e       	mov	r8, r24
 c30:	86 18       	sub	r8, r6
 c32:	45 c0       	rjmp	.+138    	; 0xcbe <vfprintf+0x2ac>
 c34:	85 37       	cpi	r24, 0x75	; 117
 c36:	31 f4       	brne	.+12     	; 0xc44 <vfprintf+0x232>
 c38:	23 2d       	mov	r18, r3
 c3a:	2f 7e       	andi	r18, 0xEF	; 239
 c3c:	b2 2e       	mov	r11, r18
 c3e:	2a e0       	ldi	r18, 0x0A	; 10
 c40:	30 e0       	ldi	r19, 0x00	; 0
 c42:	25 c0       	rjmp	.+74     	; 0xc8e <vfprintf+0x27c>
 c44:	93 2d       	mov	r25, r3
 c46:	99 7f       	andi	r25, 0xF9	; 249
 c48:	b9 2e       	mov	r11, r25
 c4a:	8f 36       	cpi	r24, 0x6F	; 111
 c4c:	c1 f0       	breq	.+48     	; 0xc7e <vfprintf+0x26c>
 c4e:	18 f4       	brcc	.+6      	; 0xc56 <vfprintf+0x244>
 c50:	88 35       	cpi	r24, 0x58	; 88
 c52:	79 f0       	breq	.+30     	; 0xc72 <vfprintf+0x260>
 c54:	b5 c0       	rjmp	.+362    	; 0xdc0 <vfprintf+0x3ae>
 c56:	80 37       	cpi	r24, 0x70	; 112
 c58:	19 f0       	breq	.+6      	; 0xc60 <vfprintf+0x24e>
 c5a:	88 37       	cpi	r24, 0x78	; 120
 c5c:	21 f0       	breq	.+8      	; 0xc66 <vfprintf+0x254>
 c5e:	b0 c0       	rjmp	.+352    	; 0xdc0 <vfprintf+0x3ae>
 c60:	e9 2f       	mov	r30, r25
 c62:	e0 61       	ori	r30, 0x10	; 16
 c64:	be 2e       	mov	r11, r30
 c66:	b4 fe       	sbrs	r11, 4
 c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x272>
 c6a:	fb 2d       	mov	r31, r11
 c6c:	f4 60       	ori	r31, 0x04	; 4
 c6e:	bf 2e       	mov	r11, r31
 c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x272>
 c72:	34 fe       	sbrs	r3, 4
 c74:	0a c0       	rjmp	.+20     	; 0xc8a <vfprintf+0x278>
 c76:	29 2f       	mov	r18, r25
 c78:	26 60       	ori	r18, 0x06	; 6
 c7a:	b2 2e       	mov	r11, r18
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x278>
 c7e:	28 e0       	ldi	r18, 0x08	; 8
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	05 c0       	rjmp	.+10     	; 0xc8e <vfprintf+0x27c>
 c84:	20 e1       	ldi	r18, 0x10	; 16
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0x27c>
 c8a:	20 e1       	ldi	r18, 0x10	; 16
 c8c:	32 e0       	ldi	r19, 0x02	; 2
 c8e:	f8 01       	movw	r30, r16
 c90:	b7 fe       	sbrs	r11, 7
 c92:	07 c0       	rjmp	.+14     	; 0xca2 <vfprintf+0x290>
 c94:	60 81       	ld	r22, Z
 c96:	71 81       	ldd	r23, Z+1	; 0x01
 c98:	82 81       	ldd	r24, Z+2	; 0x02
 c9a:	93 81       	ldd	r25, Z+3	; 0x03
 c9c:	0c 5f       	subi	r16, 0xFC	; 252
 c9e:	1f 4f       	sbci	r17, 0xFF	; 255
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x29c>
 ca2:	60 81       	ld	r22, Z
 ca4:	71 81       	ldd	r23, Z+1	; 0x01
 ca6:	80 e0       	ldi	r24, 0x00	; 0
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	0e 5f       	subi	r16, 0xFE	; 254
 cac:	1f 4f       	sbci	r17, 0xFF	; 255
 cae:	a3 01       	movw	r20, r6
 cb0:	0e 94 3c 07 	call	0xe78	; 0xe78 <__ultoa_invert>
 cb4:	88 2e       	mov	r8, r24
 cb6:	86 18       	sub	r8, r6
 cb8:	fb 2d       	mov	r31, r11
 cba:	ff 77       	andi	r31, 0x7F	; 127
 cbc:	3f 2e       	mov	r3, r31
 cbe:	36 fe       	sbrs	r3, 6
 cc0:	0d c0       	rjmp	.+26     	; 0xcdc <vfprintf+0x2ca>
 cc2:	23 2d       	mov	r18, r3
 cc4:	2e 7f       	andi	r18, 0xFE	; 254
 cc6:	a2 2e       	mov	r10, r18
 cc8:	89 14       	cp	r8, r9
 cca:	58 f4       	brcc	.+22     	; 0xce2 <vfprintf+0x2d0>
 ccc:	34 fe       	sbrs	r3, 4
 cce:	0b c0       	rjmp	.+22     	; 0xce6 <vfprintf+0x2d4>
 cd0:	32 fc       	sbrc	r3, 2
 cd2:	09 c0       	rjmp	.+18     	; 0xce6 <vfprintf+0x2d4>
 cd4:	83 2d       	mov	r24, r3
 cd6:	8e 7e       	andi	r24, 0xEE	; 238
 cd8:	a8 2e       	mov	r10, r24
 cda:	05 c0       	rjmp	.+10     	; 0xce6 <vfprintf+0x2d4>
 cdc:	b8 2c       	mov	r11, r8
 cde:	a3 2c       	mov	r10, r3
 ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x2d6>
 ce2:	b8 2c       	mov	r11, r8
 ce4:	01 c0       	rjmp	.+2      	; 0xce8 <vfprintf+0x2d6>
 ce6:	b9 2c       	mov	r11, r9
 ce8:	a4 fe       	sbrs	r10, 4
 cea:	0f c0       	rjmp	.+30     	; 0xd0a <vfprintf+0x2f8>
 cec:	fe 01       	movw	r30, r28
 cee:	e8 0d       	add	r30, r8
 cf0:	f1 1d       	adc	r31, r1
 cf2:	80 81       	ld	r24, Z
 cf4:	80 33       	cpi	r24, 0x30	; 48
 cf6:	21 f4       	brne	.+8      	; 0xd00 <vfprintf+0x2ee>
 cf8:	9a 2d       	mov	r25, r10
 cfa:	99 7e       	andi	r25, 0xE9	; 233
 cfc:	a9 2e       	mov	r10, r25
 cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x300>
 d00:	a2 fe       	sbrs	r10, 2
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x2fe>
 d04:	b3 94       	inc	r11
 d06:	b3 94       	inc	r11
 d08:	04 c0       	rjmp	.+8      	; 0xd12 <vfprintf+0x300>
 d0a:	8a 2d       	mov	r24, r10
 d0c:	86 78       	andi	r24, 0x86	; 134
 d0e:	09 f0       	breq	.+2      	; 0xd12 <vfprintf+0x300>
 d10:	b3 94       	inc	r11
 d12:	a3 fc       	sbrc	r10, 3
 d14:	11 c0       	rjmp	.+34     	; 0xd38 <vfprintf+0x326>
 d16:	a0 fe       	sbrs	r10, 0
 d18:	06 c0       	rjmp	.+12     	; 0xd26 <vfprintf+0x314>
 d1a:	b2 14       	cp	r11, r2
 d1c:	88 f4       	brcc	.+34     	; 0xd40 <vfprintf+0x32e>
 d1e:	28 0c       	add	r2, r8
 d20:	92 2c       	mov	r9, r2
 d22:	9b 18       	sub	r9, r11
 d24:	0e c0       	rjmp	.+28     	; 0xd42 <vfprintf+0x330>
 d26:	b2 14       	cp	r11, r2
 d28:	60 f4       	brcc	.+24     	; 0xd42 <vfprintf+0x330>
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 d34:	b3 94       	inc	r11
 d36:	f7 cf       	rjmp	.-18     	; 0xd26 <vfprintf+0x314>
 d38:	b2 14       	cp	r11, r2
 d3a:	18 f4       	brcc	.+6      	; 0xd42 <vfprintf+0x330>
 d3c:	2b 18       	sub	r2, r11
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x332>
 d40:	98 2c       	mov	r9, r8
 d42:	21 2c       	mov	r2, r1
 d44:	a4 fe       	sbrs	r10, 4
 d46:	10 c0       	rjmp	.+32     	; 0xd68 <vfprintf+0x356>
 d48:	b6 01       	movw	r22, r12
 d4a:	80 e3       	ldi	r24, 0x30	; 48
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 d52:	a2 fe       	sbrs	r10, 2
 d54:	17 c0       	rjmp	.+46     	; 0xd84 <vfprintf+0x372>
 d56:	a1 fc       	sbrc	r10, 1
 d58:	03 c0       	rjmp	.+6      	; 0xd60 <vfprintf+0x34e>
 d5a:	88 e7       	ldi	r24, 0x78	; 120
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x352>
 d60:	88 e5       	ldi	r24, 0x58	; 88
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	b6 01       	movw	r22, r12
 d66:	0c c0       	rjmp	.+24     	; 0xd80 <vfprintf+0x36e>
 d68:	8a 2d       	mov	r24, r10
 d6a:	86 78       	andi	r24, 0x86	; 134
 d6c:	59 f0       	breq	.+22     	; 0xd84 <vfprintf+0x372>
 d6e:	a1 fe       	sbrs	r10, 1
 d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x364>
 d72:	8b e2       	ldi	r24, 0x2B	; 43
 d74:	01 c0       	rjmp	.+2      	; 0xd78 <vfprintf+0x366>
 d76:	80 e2       	ldi	r24, 0x20	; 32
 d78:	a7 fc       	sbrc	r10, 7
 d7a:	8d e2       	ldi	r24, 0x2D	; 45
 d7c:	b6 01       	movw	r22, r12
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 d84:	89 14       	cp	r8, r9
 d86:	38 f4       	brcc	.+14     	; 0xd96 <vfprintf+0x384>
 d88:	b6 01       	movw	r22, r12
 d8a:	80 e3       	ldi	r24, 0x30	; 48
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 d92:	9a 94       	dec	r9
 d94:	f7 cf       	rjmp	.-18     	; 0xd84 <vfprintf+0x372>
 d96:	8a 94       	dec	r8
 d98:	f3 01       	movw	r30, r6
 d9a:	e8 0d       	add	r30, r8
 d9c:	f1 1d       	adc	r31, r1
 d9e:	80 81       	ld	r24, Z
 da0:	b6 01       	movw	r22, r12
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 da8:	81 10       	cpse	r8, r1
 daa:	f5 cf       	rjmp	.-22     	; 0xd96 <vfprintf+0x384>
 dac:	22 20       	and	r2, r2
 dae:	09 f4       	brne	.+2      	; 0xdb2 <vfprintf+0x3a0>
 db0:	42 ce       	rjmp	.-892    	; 0xa36 <vfprintf+0x24>
 db2:	b6 01       	movw	r22, r12
 db4:	80 e2       	ldi	r24, 0x20	; 32
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
 dbc:	2a 94       	dec	r2
 dbe:	f6 cf       	rjmp	.-20     	; 0xdac <vfprintf+0x39a>
 dc0:	f6 01       	movw	r30, r12
 dc2:	86 81       	ldd	r24, Z+6	; 0x06
 dc4:	97 81       	ldd	r25, Z+7	; 0x07
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x3ba>
 dc8:	8f ef       	ldi	r24, 0xFF	; 255
 dca:	9f ef       	ldi	r25, 0xFF	; 255
 dcc:	2b 96       	adiw	r28, 0x0b	; 11
 dce:	e2 e1       	ldi	r30, 0x12	; 18
 dd0:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__epilogue_restores__>

00000dd4 <strnlen_P>:
 dd4:	fc 01       	movw	r30, r24
 dd6:	05 90       	lpm	r0, Z+
 dd8:	61 50       	subi	r22, 0x01	; 1
 dda:	70 40       	sbci	r23, 0x00	; 0
 ddc:	01 10       	cpse	r0, r1
 dde:	d8 f7       	brcc	.-10     	; 0xdd6 <strnlen_P+0x2>
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	8e 0f       	add	r24, r30
 de6:	9f 1f       	adc	r25, r31
 de8:	08 95       	ret

00000dea <strnlen>:
 dea:	fc 01       	movw	r30, r24
 dec:	61 50       	subi	r22, 0x01	; 1
 dee:	70 40       	sbci	r23, 0x00	; 0
 df0:	01 90       	ld	r0, Z+
 df2:	01 10       	cpse	r0, r1
 df4:	d8 f7       	brcc	.-10     	; 0xdec <strnlen+0x2>
 df6:	80 95       	com	r24
 df8:	90 95       	com	r25
 dfa:	8e 0f       	add	r24, r30
 dfc:	9f 1f       	adc	r25, r31
 dfe:	08 95       	ret

00000e00 <fputc>:
 e00:	0f 93       	push	r16
 e02:	1f 93       	push	r17
 e04:	cf 93       	push	r28
 e06:	df 93       	push	r29
 e08:	fb 01       	movw	r30, r22
 e0a:	23 81       	ldd	r18, Z+3	; 0x03
 e0c:	21 fd       	sbrc	r18, 1
 e0e:	03 c0       	rjmp	.+6      	; 0xe16 <fputc+0x16>
 e10:	8f ef       	ldi	r24, 0xFF	; 255
 e12:	9f ef       	ldi	r25, 0xFF	; 255
 e14:	2c c0       	rjmp	.+88     	; 0xe6e <fputc+0x6e>
 e16:	22 ff       	sbrs	r18, 2
 e18:	16 c0       	rjmp	.+44     	; 0xe46 <fputc+0x46>
 e1a:	46 81       	ldd	r20, Z+6	; 0x06
 e1c:	57 81       	ldd	r21, Z+7	; 0x07
 e1e:	24 81       	ldd	r18, Z+4	; 0x04
 e20:	35 81       	ldd	r19, Z+5	; 0x05
 e22:	42 17       	cp	r20, r18
 e24:	53 07       	cpc	r21, r19
 e26:	44 f4       	brge	.+16     	; 0xe38 <fputc+0x38>
 e28:	a0 81       	ld	r26, Z
 e2a:	b1 81       	ldd	r27, Z+1	; 0x01
 e2c:	9d 01       	movw	r18, r26
 e2e:	2f 5f       	subi	r18, 0xFF	; 255
 e30:	3f 4f       	sbci	r19, 0xFF	; 255
 e32:	31 83       	std	Z+1, r19	; 0x01
 e34:	20 83       	st	Z, r18
 e36:	8c 93       	st	X, r24
 e38:	26 81       	ldd	r18, Z+6	; 0x06
 e3a:	37 81       	ldd	r19, Z+7	; 0x07
 e3c:	2f 5f       	subi	r18, 0xFF	; 255
 e3e:	3f 4f       	sbci	r19, 0xFF	; 255
 e40:	37 83       	std	Z+7, r19	; 0x07
 e42:	26 83       	std	Z+6, r18	; 0x06
 e44:	14 c0       	rjmp	.+40     	; 0xe6e <fputc+0x6e>
 e46:	8b 01       	movw	r16, r22
 e48:	ec 01       	movw	r28, r24
 e4a:	fb 01       	movw	r30, r22
 e4c:	00 84       	ldd	r0, Z+8	; 0x08
 e4e:	f1 85       	ldd	r31, Z+9	; 0x09
 e50:	e0 2d       	mov	r30, r0
 e52:	09 95       	icall
 e54:	89 2b       	or	r24, r25
 e56:	e1 f6       	brne	.-72     	; 0xe10 <fputc+0x10>
 e58:	d8 01       	movw	r26, r16
 e5a:	16 96       	adiw	r26, 0x06	; 6
 e5c:	8d 91       	ld	r24, X+
 e5e:	9c 91       	ld	r25, X
 e60:	17 97       	sbiw	r26, 0x07	; 7
 e62:	01 96       	adiw	r24, 0x01	; 1
 e64:	17 96       	adiw	r26, 0x07	; 7
 e66:	9c 93       	st	X, r25
 e68:	8e 93       	st	-X, r24
 e6a:	16 97       	sbiw	r26, 0x06	; 6
 e6c:	ce 01       	movw	r24, r28
 e6e:	df 91       	pop	r29
 e70:	cf 91       	pop	r28
 e72:	1f 91       	pop	r17
 e74:	0f 91       	pop	r16
 e76:	08 95       	ret

00000e78 <__ultoa_invert>:
 e78:	fa 01       	movw	r30, r20
 e7a:	aa 27       	eor	r26, r26
 e7c:	28 30       	cpi	r18, 0x08	; 8
 e7e:	51 f1       	breq	.+84     	; 0xed4 <__ultoa_invert+0x5c>
 e80:	20 31       	cpi	r18, 0x10	; 16
 e82:	81 f1       	breq	.+96     	; 0xee4 <__ultoa_invert+0x6c>
 e84:	e8 94       	clt
 e86:	6f 93       	push	r22
 e88:	6e 7f       	andi	r22, 0xFE	; 254
 e8a:	6e 5f       	subi	r22, 0xFE	; 254
 e8c:	7f 4f       	sbci	r23, 0xFF	; 255
 e8e:	8f 4f       	sbci	r24, 0xFF	; 255
 e90:	9f 4f       	sbci	r25, 0xFF	; 255
 e92:	af 4f       	sbci	r26, 0xFF	; 255
 e94:	b1 e0       	ldi	r27, 0x01	; 1
 e96:	3e d0       	rcall	.+124    	; 0xf14 <__ultoa_invert+0x9c>
 e98:	b4 e0       	ldi	r27, 0x04	; 4
 e9a:	3c d0       	rcall	.+120    	; 0xf14 <__ultoa_invert+0x9c>
 e9c:	67 0f       	add	r22, r23
 e9e:	78 1f       	adc	r23, r24
 ea0:	89 1f       	adc	r24, r25
 ea2:	9a 1f       	adc	r25, r26
 ea4:	a1 1d       	adc	r26, r1
 ea6:	68 0f       	add	r22, r24
 ea8:	79 1f       	adc	r23, r25
 eaa:	8a 1f       	adc	r24, r26
 eac:	91 1d       	adc	r25, r1
 eae:	a1 1d       	adc	r26, r1
 eb0:	6a 0f       	add	r22, r26
 eb2:	71 1d       	adc	r23, r1
 eb4:	81 1d       	adc	r24, r1
 eb6:	91 1d       	adc	r25, r1
 eb8:	a1 1d       	adc	r26, r1
 eba:	20 d0       	rcall	.+64     	; 0xefc <__ultoa_invert+0x84>
 ebc:	09 f4       	brne	.+2      	; 0xec0 <__ultoa_invert+0x48>
 ebe:	68 94       	set
 ec0:	3f 91       	pop	r19
 ec2:	2a e0       	ldi	r18, 0x0A	; 10
 ec4:	26 9f       	mul	r18, r22
 ec6:	11 24       	eor	r1, r1
 ec8:	30 19       	sub	r19, r0
 eca:	30 5d       	subi	r19, 0xD0	; 208
 ecc:	31 93       	st	Z+, r19
 ece:	de f6       	brtc	.-74     	; 0xe86 <__ultoa_invert+0xe>
 ed0:	cf 01       	movw	r24, r30
 ed2:	08 95       	ret
 ed4:	46 2f       	mov	r20, r22
 ed6:	47 70       	andi	r20, 0x07	; 7
 ed8:	40 5d       	subi	r20, 0xD0	; 208
 eda:	41 93       	st	Z+, r20
 edc:	b3 e0       	ldi	r27, 0x03	; 3
 ede:	0f d0       	rcall	.+30     	; 0xefe <__ultoa_invert+0x86>
 ee0:	c9 f7       	brne	.-14     	; 0xed4 <__ultoa_invert+0x5c>
 ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <__ultoa_invert+0x58>
 ee4:	46 2f       	mov	r20, r22
 ee6:	4f 70       	andi	r20, 0x0F	; 15
 ee8:	40 5d       	subi	r20, 0xD0	; 208
 eea:	4a 33       	cpi	r20, 0x3A	; 58
 eec:	18 f0       	brcs	.+6      	; 0xef4 <__ultoa_invert+0x7c>
 eee:	49 5d       	subi	r20, 0xD9	; 217
 ef0:	31 fd       	sbrc	r19, 1
 ef2:	40 52       	subi	r20, 0x20	; 32
 ef4:	41 93       	st	Z+, r20
 ef6:	02 d0       	rcall	.+4      	; 0xefc <__ultoa_invert+0x84>
 ef8:	a9 f7       	brne	.-22     	; 0xee4 <__ultoa_invert+0x6c>
 efa:	ea cf       	rjmp	.-44     	; 0xed0 <__ultoa_invert+0x58>
 efc:	b4 e0       	ldi	r27, 0x04	; 4
 efe:	a6 95       	lsr	r26
 f00:	97 95       	ror	r25
 f02:	87 95       	ror	r24
 f04:	77 95       	ror	r23
 f06:	67 95       	ror	r22
 f08:	ba 95       	dec	r27
 f0a:	c9 f7       	brne	.-14     	; 0xefe <__ultoa_invert+0x86>
 f0c:	00 97       	sbiw	r24, 0x00	; 0
 f0e:	61 05       	cpc	r22, r1
 f10:	71 05       	cpc	r23, r1
 f12:	08 95       	ret
 f14:	9b 01       	movw	r18, r22
 f16:	ac 01       	movw	r20, r24
 f18:	0a 2e       	mov	r0, r26
 f1a:	06 94       	lsr	r0
 f1c:	57 95       	ror	r21
 f1e:	47 95       	ror	r20
 f20:	37 95       	ror	r19
 f22:	27 95       	ror	r18
 f24:	ba 95       	dec	r27
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0xa2>
 f28:	62 0f       	add	r22, r18
 f2a:	73 1f       	adc	r23, r19
 f2c:	84 1f       	adc	r24, r20
 f2e:	95 1f       	adc	r25, r21
 f30:	a0 1d       	adc	r26, r0
 f32:	08 95       	ret

00000f34 <__prologue_saves__>:
 f34:	2f 92       	push	r2
 f36:	3f 92       	push	r3
 f38:	4f 92       	push	r4
 f3a:	5f 92       	push	r5
 f3c:	6f 92       	push	r6
 f3e:	7f 92       	push	r7
 f40:	8f 92       	push	r8
 f42:	9f 92       	push	r9
 f44:	af 92       	push	r10
 f46:	bf 92       	push	r11
 f48:	cf 92       	push	r12
 f4a:	df 92       	push	r13
 f4c:	ef 92       	push	r14
 f4e:	ff 92       	push	r15
 f50:	0f 93       	push	r16
 f52:	1f 93       	push	r17
 f54:	cf 93       	push	r28
 f56:	df 93       	push	r29
 f58:	cd b7       	in	r28, 0x3d	; 61
 f5a:	de b7       	in	r29, 0x3e	; 62
 f5c:	ca 1b       	sub	r28, r26
 f5e:	db 0b       	sbc	r29, r27
 f60:	0f b6       	in	r0, 0x3f	; 63
 f62:	f8 94       	cli
 f64:	de bf       	out	0x3e, r29	; 62
 f66:	0f be       	out	0x3f, r0	; 63
 f68:	cd bf       	out	0x3d, r28	; 61
 f6a:	09 94       	ijmp

00000f6c <__epilogue_restores__>:
 f6c:	2a 88       	ldd	r2, Y+18	; 0x12
 f6e:	39 88       	ldd	r3, Y+17	; 0x11
 f70:	48 88       	ldd	r4, Y+16	; 0x10
 f72:	5f 84       	ldd	r5, Y+15	; 0x0f
 f74:	6e 84       	ldd	r6, Y+14	; 0x0e
 f76:	7d 84       	ldd	r7, Y+13	; 0x0d
 f78:	8c 84       	ldd	r8, Y+12	; 0x0c
 f7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 f7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 f7e:	b9 84       	ldd	r11, Y+9	; 0x09
 f80:	c8 84       	ldd	r12, Y+8	; 0x08
 f82:	df 80       	ldd	r13, Y+7	; 0x07
 f84:	ee 80       	ldd	r14, Y+6	; 0x06
 f86:	fd 80       	ldd	r15, Y+5	; 0x05
 f88:	0c 81       	ldd	r16, Y+4	; 0x04
 f8a:	1b 81       	ldd	r17, Y+3	; 0x03
 f8c:	aa 81       	ldd	r26, Y+2	; 0x02
 f8e:	b9 81       	ldd	r27, Y+1	; 0x01
 f90:	ce 0f       	add	r28, r30
 f92:	d1 1d       	adc	r29, r1
 f94:	0f b6       	in	r0, 0x3f	; 63
 f96:	f8 94       	cli
 f98:	de bf       	out	0x3e, r29	; 62
 f9a:	0f be       	out	0x3f, r0	; 63
 f9c:	cd bf       	out	0x3d, r28	; 61
 f9e:	ed 01       	movw	r28, r26
 fa0:	08 95       	ret

00000fa2 <_exit>:
 fa2:	f8 94       	cli

00000fa4 <__stop_program>:
 fa4:	ff cf       	rjmp	.-2      	; 0xfa4 <__stop_program>
