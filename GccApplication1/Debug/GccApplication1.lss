
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  0000079a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000605  00000000  00000000  00001d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051f  00000000  00000000  00002a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9e:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init>:
 *  Setup IO, uart, stepper, timer and interrupt.
 */
void Init(void)
{
  // Init of IO pins
  sm_driver_Init_IO();
  a6:	0e 94 67 00 	call	0xce	; 0xce <sm_driver_Init_IO>

  // Set stepper motor driver output
/*  sm_driver_StepOutput(0);*/

  // Init of Timer/Counter1
  speed_cntr_Init_Timer0();
  aa:	0e 94 df 01 	call	0x3be	; 0x3be <speed_cntr_Init_Timer0>

  sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <main>:
	int deceleration = 200;
	// Speed to use.
	int speed = 800;


	Init();
  b2:	0e 94 53 00 	call	0xa6	; 0xa6 <Init>
	
	while(1)
	{
		speed_cntr_Move(steps, acceleration, deceleration, speed);
  b6:	20 e2       	ldi	r18, 0x20	; 32
  b8:	33 e0       	ldi	r19, 0x03	; 3
  ba:	48 ec       	ldi	r20, 0xC8	; 200
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	6c eb       	ldi	r22, 0xBC	; 188
  c0:	72 e0       	ldi	r23, 0x02	; 2
  c2:	80 ed       	ldi	r24, 0xD0	; 208
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	0e 94 b7 00 	call	0x16e	; 0x16e <speed_cntr_Move>
		__asm__ __volatile__("nop");
  ca:	00 00       	nop
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0x4>

000000ce <sm_driver_Init_IO>:
{
  // Init of IO pins
//   SM_PORT &= ~((1<<A1) | (1<<A2) | (1<<B1) | (1<<B2)); // Set output pin registers to zero
//   SM_DRIVE |= ((1<<A1) | (1<<A2) | (1<<B1) | (1<<B2)); // Set output pin direction registers to output
  
	DDRC  |= (1<<DDC2) | (1<<DDC3);
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	87 b9       	out	0x07, r24	; 7
  d4:	08 95       	ret

000000d6 <sqrt>:
 *
 *  \param x  Value to find square root of.
 *  \return  Square root of x.
 */
static unsigned long sqrt(unsigned long x)
{
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	6b 01       	movw	r12, r22
  e4:	7c 01       	movw	r14, r24
  register unsigned long xr;  // result register
  register unsigned long q2;  // scan-bit register
  register unsigned char f;   // flag (one bit)

  xr = 0;                     // clear result
  q2 = 0x40000000L;           // higest possible result bit
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e4       	ldi	r27, 0x40	; 64
{
  register unsigned long xr;  // result register
  register unsigned long q2;  // scan-bit register
  register unsigned char f;   // flag (one bit)

  xr = 0;                     // clear result
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	ba 01       	movw	r22, r20
  q2 = 0x40000000L;           // higest possible result bit
  do
  {
    if((xr + q2) <= x)
  f4:	8a 01       	movw	r16, r20
  f6:	9b 01       	movw	r18, r22
  f8:	08 0f       	add	r16, r24
  fa:	19 1f       	adc	r17, r25
  fc:	2a 1f       	adc	r18, r26
  fe:	3b 1f       	adc	r19, r27
 100:	c0 16       	cp	r12, r16
 102:	d1 06       	cpc	r13, r17
 104:	e2 06       	cpc	r14, r18
 106:	f3 06       	cpc	r15, r19
 108:	30 f0       	brcs	.+12     	; 0x116 <sqrt+0x40>
    {
      x -= xr + q2;
 10a:	c0 1a       	sub	r12, r16
 10c:	d1 0a       	sbc	r13, r17
 10e:	e2 0a       	sbc	r14, r18
 110:	f3 0a       	sbc	r15, r19
      f = 1;                  // set flag
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	01 c0       	rjmp	.+2      	; 0x118 <sqrt+0x42>
    }
    else{
      f = 0;                  // clear flag
 116:	20 e0       	ldi	r18, 0x00	; 0
    }
    xr >>= 1;
 118:	76 95       	lsr	r23
 11a:	67 95       	ror	r22
 11c:	57 95       	ror	r21
 11e:	47 95       	ror	r20
    if(f){
 120:	22 23       	and	r18, r18
 122:	21 f0       	breq	.+8      	; 0x12c <sqrt+0x56>
      xr += q2;               // test flag
 124:	48 0f       	add	r20, r24
 126:	59 1f       	adc	r21, r25
 128:	6a 1f       	adc	r22, r26
 12a:	7b 1f       	adc	r23, r27
    }
  } while(q2 >>= 2);          // shift twice
 12c:	b6 95       	lsr	r27
 12e:	a7 95       	ror	r26
 130:	97 95       	ror	r25
 132:	87 95       	ror	r24
 134:	b6 95       	lsr	r27
 136:	a7 95       	ror	r26
 138:	97 95       	ror	r25
 13a:	87 95       	ror	r24
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	a1 05       	cpc	r26, r1
 140:	b1 05       	cpc	r27, r1
 142:	c1 f6       	brne	.-80     	; 0xf4 <sqrt+0x1e>
  if(xr < x){
 144:	4c 15       	cp	r20, r12
 146:	5d 05       	cpc	r21, r13
 148:	6e 05       	cpc	r22, r14
 14a:	7f 05       	cpc	r23, r15
 14c:	38 f4       	brcc	.+14     	; 0x15c <sqrt+0x86>
    return xr +1;             // add for rounding
 14e:	cb 01       	movw	r24, r22
 150:	ba 01       	movw	r22, r20
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	8f 4f       	sbci	r24, 0xFF	; 255
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	02 c0       	rjmp	.+4      	; 0x160 <sqrt+0x8a>
  }
  else{
    return xr;
 15c:	cb 01       	movw	r24, r22
 15e:	ba 01       	movw	r22, r20
  }
}
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	cf 90       	pop	r12
 16c:	08 95       	ret

0000016e <speed_cntr_Move>:
 *  \param accel  Accelration to use, in 0.01*rad/sec^2.
 *  \param decel  Decelration to use, in 0.01*rad/sec^2.
 *  \param speed  Max speed, in 0.01*rad/sec.
 */
void speed_cntr_Move(signed int step, unsigned int accel, unsigned int decel, unsigned int speed)
{
 16e:	2f 92       	push	r2
 170:	3f 92       	push	r3
 172:	6f 92       	push	r6
 174:	7f 92       	push	r7
 176:	8f 92       	push	r8
 178:	9f 92       	push	r9
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	28 97       	sbiw	r28, 0x08	; 8
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	8c 01       	movw	r16, r24
 1a0:	1b 01       	movw	r2, r22
 1a2:	3a 01       	movw	r6, r20
  unsigned int max_s_lim;
  //! Number of steps before we must start deceleration (if accel does not hit max speed).
  unsigned int accel_lim;

  // Set direction from sign on step value.
  if(step < 0){
 1a4:	99 23       	and	r25, r25
 1a6:	4c f4       	brge	.+18     	; 0x1ba <speed_cntr_Move+0x4c>
    srd.dir = CCW;
 1a8:	e7 e0       	ldi	r30, 0x07	; 7
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	80 83       	st	Z, r24
    step = -step;
 1b2:	11 95       	neg	r17
 1b4:	01 95       	neg	r16
 1b6:	11 09       	sbc	r17, r1
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <speed_cntr_Move+0x56>
  }
  else{
    srd.dir = CW;
 1ba:	e7 e0       	ldi	r30, 0x07	; 7
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	80 83       	st	Z, r24
  }

  // If moving only 1 step.
  if(step == 1){
 1c4:	01 30       	cpi	r16, 0x01	; 1
 1c6:	11 05       	cpc	r17, r1
 1c8:	c9 f4       	brne	.+50     	; 0x1fc <speed_cntr_Move+0x8e>
    // Move one step...
    srd.accel_count = -1;
 1ca:	e7 e0       	ldi	r30, 0x07	; 7
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	9f ef       	ldi	r25, 0xFF	; 255
 1d2:	92 87       	std	Z+10, r25	; 0x0a
 1d4:	81 87       	std	Z+9, r24	; 0x09
    // ...in DECEL state.
    srd.run_state = DECEL;
 1d6:	80 81       	ld	r24, Z
 1d8:	88 7f       	andi	r24, 0xF8	; 248
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
    // Just a short delay so main() can act on 'running'.
    srd.step_delay = 1000;
 1de:	88 ee       	ldi	r24, 0xE8	; 232
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	92 83       	std	Z+2, r25	; 0x02
 1e4:	81 83       	std	Z+1, r24	; 0x01
    status.running = TRUE;
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    OCR0A = 10;
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	87 bd       	out	0x27, r24	; 39
    // Run Timer/Counter 1 with prescaler = 8.
    TCCR0B |= ((0<<CS02)|(1<<CS01)|(0<<CS00));//Prescaler 8
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	85 bd       	out	0x25, r24	; 37
 1fa:	ca c0       	rjmp	.+404    	; 0x390 <speed_cntr_Move+0x222>
  }
  // Only move if number of steps to move is not zero.
  else if(step != 0){
 1fc:	01 15       	cp	r16, r1
 1fe:	11 05       	cpc	r17, r1
 200:	09 f4       	brne	.+2      	; 0x204 <speed_cntr_Move+0x96>
 202:	c6 c0       	rjmp	.+396    	; 0x390 <speed_cntr_Move+0x222>
    // Refer to documentation for detailed information about these calculations.

    // Set max speed limit, by calc min_delay to use in timer.
    // min_delay = (alpha / tt)/ w
    srd.min_delay = A_T_x100 / speed;
 204:	69 01       	movw	r12, r18
 206:	e1 2c       	mov	r14, r1
 208:	f1 2c       	mov	r15, r1
 20a:	6f e1       	ldi	r22, 0x1F	; 31
 20c:	7b e0       	ldi	r23, 0x0B	; 11
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a7 01       	movw	r20, r14
 214:	96 01       	movw	r18, r12
 216:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 21a:	49 01       	movw	r8, r18
 21c:	5a 01       	movw	r10, r20
 21e:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <srd+0x8>
 222:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <srd+0x7>

    // Set accelration by calc the first (c0) step delay .
    // step_delay = 1/tt * sqrt(2*alpha/accel)
    // step_delay = ( tfreq*0.676/100 )*100 * sqrt( (2*alpha*10000000000) / (accel*100) )/10000
    srd.step_delay = (T1_FREQ_148 * sqrt(A_SQ / accel))/100;
 226:	c1 01       	movw	r24, r2
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04
 234:	60 ea       	ldi	r22, 0xA0	; 160
 236:	7f ea       	ldi	r23, 0xAF	; 175
 238:	89 eb       	ldi	r24, 0xB9	; 185
 23a:	92 e1       	ldi	r25, 0x12	; 18
 23c:	29 81       	ldd	r18, Y+1	; 0x01
 23e:	3a 81       	ldd	r19, Y+2	; 0x02
 240:	4b 81       	ldd	r20, Y+3	; 0x03
 242:	5c 81       	ldd	r21, Y+4	; 0x04
 244:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 248:	ca 01       	movw	r24, r20
 24a:	b9 01       	movw	r22, r18
 24c:	0e 94 6b 00 	call	0xd6	; 0xd6 <sqrt>
 250:	9b 01       	movw	r18, r22
 252:	ac 01       	movw	r20, r24
 254:	aa e2       	ldi	r26, 0x2A	; 42
 256:	bc e0       	ldi	r27, 0x0C	; 12
 258:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__muluhisi3>
 25c:	24 e6       	ldi	r18, 0x64	; 100
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 268:	3e 83       	std	Y+6, r19	; 0x06
 26a:	2d 83       	std	Y+5, r18	; 0x05
 26c:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <srd+0x2>
 270:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <srd+0x1>

    // Find out after how many steps does the speed hit the max speed limit.
    // max_s_lim = speed^2 / (2*alpha*accel)
    max_s_lim = (long)speed*speed/(long)(((long)A_x20000*accel)/100);
 274:	a7 01       	movw	r20, r14
 276:	96 01       	movw	r18, r12
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsi3>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
 284:	aa e3       	ldi	r26, 0x3A	; 58
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	3a 81       	ldd	r19, Y+2	; 0x02
 28c:	4b 81       	ldd	r20, Y+3	; 0x03
 28e:	5c 81       	ldd	r21, Y+4	; 0x04
 290:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__muluhisi3>
 294:	24 e6       	ldi	r18, 0x64	; 100
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 2a8:	38 87       	std	Y+8, r19	; 0x08
 2aa:	2f 83       	std	Y+7, r18	; 0x07
    // If we hit max speed limit before 0,5 step it will round to 0.
    // But in practice we need to move atleast 1 step to get any speed at all.
    if(max_s_lim == 0){
 2ac:	d9 01       	movw	r26, r18
 2ae:	ab 2b       	or	r26, r27
 2b0:	21 f4       	brne	.+8      	; 0x2ba <speed_cntr_Move+0x14c>
      max_s_lim = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	98 87       	std	Y+8, r25	; 0x08
 2b8:	8f 83       	std	Y+7, r24	; 0x07
    }

    // Find out after how many steps we must start deceleration.
    // n1 = (n1+n2)decel / (accel + decel)
    accel_lim = ((long)step*decel) / (accel+decel);
 2ba:	63 01       	movw	r12, r6
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
 2c0:	d8 01       	movw	r26, r16
 2c2:	a7 01       	movw	r20, r14
 2c4:	96 01       	movw	r18, r12
 2c6:	0e 94 89 03 	call	0x712	; 0x712 <__mulshisi3>
 2ca:	91 01       	movw	r18, r2
 2cc:	26 0d       	add	r18, r6
 2ce:	37 1d       	adc	r19, r7
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
    // We must accelrate at least 1 step before we can start deceleration.
    if(accel_lim == 0){
 2d8:	21 15       	cp	r18, r1
 2da:	31 05       	cpc	r19, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <speed_cntr_Move+0x174>
      accel_lim = 1;
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
    }

    // Use the limit we hit first to calc decel.
    if(accel_lim <= max_s_lim){
 2e2:	af 81       	ldd	r26, Y+7	; 0x07
 2e4:	b8 85       	ldd	r27, Y+8	; 0x08
 2e6:	a2 17       	cp	r26, r18
 2e8:	b3 07       	cpc	r27, r19
 2ea:	38 f0       	brcs	.+14     	; 0x2fa <speed_cntr_Move+0x18c>
      srd.decel_val = accel_lim - step;
 2ec:	20 1b       	sub	r18, r16
 2ee:	31 0b       	sbc	r19, r17
 2f0:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <srd+0x6>
 2f4:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <srd+0x5>
 2f8:	17 c0       	rjmp	.+46     	; 0x328 <speed_cntr_Move+0x1ba>
    }
    else{
      srd.decel_val = -((long)max_s_lim*accel)/decel;
 2fa:	af 81       	ldd	r26, Y+7	; 0x07
 2fc:	b8 85       	ldd	r27, Y+8	; 0x08
 2fe:	29 81       	ldd	r18, Y+1	; 0x01
 300:	3a 81       	ldd	r19, Y+2	; 0x02
 302:	4b 81       	ldd	r20, Y+3	; 0x03
 304:	5c 81       	ldd	r21, Y+4	; 0x04
 306:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__muluhisi3>
 30a:	90 95       	com	r25
 30c:	80 95       	com	r24
 30e:	70 95       	com	r23
 310:	61 95       	neg	r22
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	8f 4f       	sbci	r24, 0xFF	; 255
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	a7 01       	movw	r20, r14
 31a:	96 01       	movw	r18, r12
 31c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 320:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <srd+0x6>
 324:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <srd+0x5>
    }
    // We must decelrate at least 1 step to stop.
    if(srd.decel_val == 0){
 328:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <srd+0x5>
 32c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <srd+0x6>
 330:	89 2b       	or	r24, r25
 332:	31 f4       	brne	.+12     	; 0x340 <speed_cntr_Move+0x1d2>
      srd.decel_val = -1;
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <srd+0x6>
 33c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <srd+0x5>
    }

    // Find step to start decleration.
    srd.decel_start = step + srd.decel_val;
 340:	e7 e0       	ldi	r30, 0x07	; 7
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	85 81       	ldd	r24, Z+5	; 0x05
 346:	96 81       	ldd	r25, Z+6	; 0x06
 348:	08 0f       	add	r16, r24
 34a:	19 1f       	adc	r17, r25
 34c:	14 83       	std	Z+4, r17	; 0x04
 34e:	03 83       	std	Z+3, r16	; 0x03

    // If the maximum speed is so low that we dont need to go via accelration state.
    if(srd.step_delay <= srd.min_delay){
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	9e 81       	ldd	r25, Y+6	; 0x06
 354:	88 16       	cp	r8, r24
 356:	99 06       	cpc	r9, r25
 358:	38 f0       	brcs	.+14     	; 0x368 <speed_cntr_Move+0x1fa>
      srd.step_delay = srd.min_delay;
 35a:	92 82       	std	Z+2, r9	; 0x02
 35c:	81 82       	std	Z+1, r8	; 0x01
      srd.run_state = RUN;
 35e:	80 81       	ld	r24, Z
 360:	88 7f       	andi	r24, 0xF8	; 248
 362:	83 60       	ori	r24, 0x03	; 3
 364:	80 83       	st	Z, r24
 366:	06 c0       	rjmp	.+12     	; 0x374 <speed_cntr_Move+0x206>
    }
    else{
      srd.run_state = ACCEL;
 368:	e7 e0       	ldi	r30, 0x07	; 7
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	80 81       	ld	r24, Z
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 83       	st	Z, r24
    }

    // Reset counter.
    srd.accel_count = 0;
 374:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <srd+0xa>
 378:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <srd+0x9>
    status.running = TRUE;
 37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 380:	81 60       	ori	r24, 0x01	; 1
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    OCR0A = 10;
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	87 bd       	out	0x27, r24	; 39
    // Set Timer/Counter to divide clock by 8
    /*TCCR1B |= ((0<<CS12)|(1<<CS11)|(0<<CS10));*/
	TCCR0B |= ((0<<CS02)|(1<<CS01)|(0<<CS00));//Prescaler 8
 38a:	85 b5       	in	r24, 0x25	; 37
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	85 bd       	out	0x25, r24	; 37
  }
}
 390:	28 96       	adiw	r28, 0x08	; 8
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	df 90       	pop	r13
 3aa:	cf 90       	pop	r12
 3ac:	bf 90       	pop	r11
 3ae:	af 90       	pop	r10
 3b0:	9f 90       	pop	r9
 3b2:	8f 90       	pop	r8
 3b4:	7f 90       	pop	r7
 3b6:	6f 90       	pop	r6
 3b8:	3f 90       	pop	r3
 3ba:	2f 90       	pop	r2
 3bc:	08 95       	ret

000003be <speed_cntr_Init_Timer0>:
 *  enable Output Compare A Match Interrupt.
 */
void speed_cntr_Init_Timer0(void)
{
  // Tells what part of speed ramp we are in.
  srd.run_state = STOP;
 3be:	e7 e0       	ldi	r30, 0x07	; 7
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	80 81       	ld	r24, Z
 3c4:	88 7f       	andi	r24, 0xF8	; 248
 3c6:	80 83       	st	Z, r24
//   // Timer/Counter 1 in mode 4 CTC (Not running).
//   TCCR1B = (1<<WGM12);
//   // Timer/Counter 1 Output Compare A Match Interrupt enable.
//   TIMSK1 = (1<<OCIE1A);
	TCCR0A |= (1 << WGM01);//set mode CTC
 3c8:	84 b5       	in	r24, 0x24	; 36
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);
 3ce:	ee e6       	ldi	r30, 0x6E	; 110
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <__vector_14>:
 *  A new step delay is calculated to follow wanted speed profile
 *  on basis of accel/decel parameters.
 */
#pragma vector=TIMER1_COMPA_vect
ISR(TIMER0_COMPA_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
  // Counting steps when moving.
  static unsigned int step_count = 0;
  // Keep track of remainder from new_step-delay calculation to incrase accurancy
  static unsigned int rest = 0;

  OCR0A = srd.step_delay;
 408:	e7 e0       	ldi	r30, 0x07	; 7
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	41 81       	ldd	r20, Z+1	; 0x01
 40e:	47 bd       	out	0x27, r20	; 39
  PORTC |= (srd.dir<<PINC3);
 410:	48 b1       	in	r20, 0x08	; 8
 412:	50 81       	ld	r21, Z
 414:	53 fb       	bst	r21, 3
 416:	88 27       	eor	r24, r24
 418:	80 f9       	bld	r24, 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	84 2b       	or	r24, r20
 42a:	88 b9       	out	0x08, r24	; 8

  switch(srd.run_state) {
 42c:	80 81       	ld	r24, Z
 42e:	87 70       	andi	r24, 0x07	; 7
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	c9 f0       	breq	.+50     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 434:	38 f0       	brcs	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	09 f4       	brne	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	a2 c0       	rjmp	.+324    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 43c:	83 30       	cpi	r24, 0x03	; 3
 43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	7b c0       	rjmp	.+246    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 442:	e1 c0       	rjmp	.+450    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
    case STOP:
      step_count = 0;
 444:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <step_count.1674+0x1>
 448:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <step_count.1674>
      rest = 0;
 44c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rest.1675+0x1>
 450:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rest.1675>
//       // Stop Timer/Counter 1.
//       TCCR1B &= ~((1<<CS12)|(1<<CS11)|(1<<CS10));
		//stop timer0
		TCCR0B &= ~((1<<CS12)|(1<<CS11)|(1<<CS10));
 454:	85 b5       	in	r24, 0x25	; 37
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	85 bd       	out	0x25, r24	; 37
		
      status.running = FALSE;
 45a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      break;
 464:	d0 c0       	rjmp	.+416    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>

    case ACCEL:
      /*sm_driver_StepCounter(srd.dir);*/
	  PORTC ^= ((1 << PORTC2));
 466:	98 b1       	in	r25, 0x08	; 8
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	89 27       	eor	r24, r25
 46c:	88 b9       	out	0x08, r24	; 8
      step_count++;
 46e:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <step_count.1674>
 472:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <step_count.1674+0x1>
 476:	0f 5f       	subi	r16, 0xFF	; 255
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <step_count.1674+0x1>
 47e:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <step_count.1674>
      srd.accel_count++;
 482:	0f 2e       	mov	r0, r31
 484:	f7 e0       	ldi	r31, 0x07	; 7
 486:	ef 2e       	mov	r14, r31
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	ff 2e       	mov	r15, r31
 48c:	f0 2d       	mov	r31, r0
 48e:	f7 01       	movw	r30, r14
 490:	21 85       	ldd	r18, Z+9	; 0x09
 492:	32 85       	ldd	r19, Z+10	; 0x0a
 494:	2f 5f       	subi	r18, 0xFF	; 255
 496:	3f 4f       	sbci	r19, 0xFF	; 255
 498:	32 87       	std	Z+10, r19	; 0x0a
 49a:	21 87       	std	Z+9, r18	; 0x09
      new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest)/(4 * srd.accel_count + 1));
 49c:	c1 81       	ldd	r28, Z+1	; 0x01
 49e:	d2 81       	ldd	r29, Z+2	; 0x02
 4a0:	ce 01       	movw	r24, r28
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <rest.1675>
 4b2:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <rest.1675+0x1>
 4b6:	bc 01       	movw	r22, r24
 4b8:	cd 01       	movw	r24, r26
 4ba:	64 0f       	add	r22, r20
 4bc:	75 1f       	adc	r23, r21
 4be:	81 1d       	adc	r24, r1
 4c0:	91 1d       	adc	r25, r1
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	2f 5f       	subi	r18, 0xFF	; 255
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	03 2e       	mov	r0, r19
 4d0:	00 0c       	add	r0, r0
 4d2:	44 0b       	sbc	r20, r20
 4d4:	55 0b       	sbc	r21, r21
 4d6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 4da:	fe 01       	movw	r30, r28
 4dc:	e2 1b       	sub	r30, r18
 4de:	f3 0b       	sbc	r31, r19
 4e0:	9f 01       	movw	r18, r30
      rest = ((2 * (long)srd.step_delay)+rest)%(4 * srd.accel_count + 1);
 4e2:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <rest.1675+0x1>
 4e6:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <rest.1675>
      // Chech if we should start decelration.
      if(step_count >= srd.decel_start) {
 4ea:	f7 01       	movw	r30, r14
 4ec:	83 81       	ldd	r24, Z+3	; 0x03
 4ee:	94 81       	ldd	r25, Z+4	; 0x04
 4f0:	08 17       	cp	r16, r24
 4f2:	19 07       	cpc	r17, r25
 4f4:	48 f0       	brcs	.+18     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
        srd.accel_count = srd.decel_val;
 4f6:	85 81       	ldd	r24, Z+5	; 0x05
 4f8:	96 81       	ldd	r25, Z+6	; 0x06
 4fa:	92 87       	std	Z+10, r25	; 0x0a
 4fc:	81 87       	std	Z+9, r24	; 0x09
        srd.run_state = DECEL;
 4fe:	80 81       	ld	r24, Z
 500:	88 7f       	andi	r24, 0xF8	; 248
 502:	82 60       	ori	r24, 0x02	; 2
 504:	80 83       	st	Z, r24
 506:	7f c0       	rjmp	.+254    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
      }
      // Chech if we hitted max speed.
      else if(new_step_delay <= srd.min_delay) {
 508:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <srd+0x7>
 50c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <srd+0x8>
 510:	42 17       	cp	r20, r18
 512:	53 07       	cpc	r21, r19
 514:	08 f4       	brcc	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 516:	77 c0       	rjmp	.+238    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
        last_accel_delay = new_step_delay;
 518:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <last_accel_delay.1673+0x1>
 51c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <last_accel_delay.1673>
        new_step_delay = srd.min_delay;
        rest = 0;
 520:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rest.1675+0x1>
 524:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rest.1675>
        srd.run_state = RUN;
 528:	e7 e0       	ldi	r30, 0x07	; 7
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	80 81       	ld	r24, Z
 52e:	88 7f       	andi	r24, 0xF8	; 248
 530:	83 60       	ori	r24, 0x03	; 3
 532:	80 83       	st	Z, r24
        srd.run_state = DECEL;
      }
      // Chech if we hitted max speed.
      else if(new_step_delay <= srd.min_delay) {
        last_accel_delay = new_step_delay;
        new_step_delay = srd.min_delay;
 534:	9a 01       	movw	r18, r20
 536:	67 c0       	rjmp	.+206    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
      }
      break;

    case RUN:
      /*sm_driver_StepCounter(srd.dir);*/
	  PORTC ^= ((1 << PORTC2));
 538:	98 b1       	in	r25, 0x08	; 8
 53a:	84 e0       	ldi	r24, 0x04	; 4
 53c:	89 27       	eor	r24, r25
 53e:	88 b9       	out	0x08, r24	; 8
      step_count++;
 540:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <step_count.1674>
 544:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <step_count.1674+0x1>
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <step_count.1674+0x1>
 54e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <step_count.1674>
      new_step_delay = srd.min_delay;
 552:	e7 e0       	ldi	r30, 0x07	; 7
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	27 81       	ldd	r18, Z+7	; 0x07
 558:	30 85       	ldd	r19, Z+8	; 0x08
      // Chech if we should start decelration.
      if(step_count >= srd.decel_start) {
 55a:	43 81       	ldd	r20, Z+3	; 0x03
 55c:	54 81       	ldd	r21, Z+4	; 0x04
 55e:	84 17       	cp	r24, r20
 560:	95 07       	cpc	r25, r21
 562:	08 f4       	brcc	.+2      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 564:	50 c0       	rjmp	.+160    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
        srd.accel_count = srd.decel_val;
 566:	85 81       	ldd	r24, Z+5	; 0x05
 568:	96 81       	ldd	r25, Z+6	; 0x06
 56a:	92 87       	std	Z+10, r25	; 0x0a
 56c:	81 87       	std	Z+9, r24	; 0x09
        // Start decelration with same delay as accel ended with.
        new_step_delay = last_accel_delay;
 56e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <last_accel_delay.1673>
 572:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <last_accel_delay.1673+0x1>
        srd.run_state = DECEL;
 576:	80 81       	ld	r24, Z
 578:	88 7f       	andi	r24, 0xF8	; 248
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	80 83       	st	Z, r24
 57e:	43 c0       	rjmp	.+134    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
      }
      break;

    case DECEL:
      /*sm_driver_StepCounter(srd.dir);*/
	  PORTC ^= ((1 << PORTC2));
 580:	98 b1       	in	r25, 0x08	; 8
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	89 27       	eor	r24, r25
 586:	88 b9       	out	0x08, r24	; 8
      step_count++;
 588:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <step_count.1674>
 58c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <step_count.1674+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <step_count.1674+0x1>
 596:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <step_count.1674>
      srd.accel_count++;
 59a:	e7 e0       	ldi	r30, 0x07	; 7
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	c1 85       	ldd	r28, Z+9	; 0x09
 5a0:	d2 85       	ldd	r29, Z+10	; 0x0a
 5a2:	21 96       	adiw	r28, 0x01	; 1
 5a4:	d2 87       	std	Z+10, r29	; 0x0a
 5a6:	c1 87       	std	Z+9, r28	; 0x09
      new_step_delay = srd.step_delay - (((2 * (long)srd.step_delay) + rest)/(4 * srd.accel_count + 1));
 5a8:	01 81       	ldd	r16, Z+1	; 0x01
 5aa:	12 81       	ldd	r17, Z+2	; 0x02
 5ac:	c8 01       	movw	r24, r16
 5ae:	a0 e0       	ldi	r26, 0x00	; 0
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	aa 1f       	adc	r26, r26
 5b8:	bb 1f       	adc	r27, r27
 5ba:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rest.1675>
 5be:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <rest.1675+0x1>
 5c2:	bc 01       	movw	r22, r24
 5c4:	cd 01       	movw	r24, r26
 5c6:	62 0f       	add	r22, r18
 5c8:	73 1f       	adc	r23, r19
 5ca:	81 1d       	adc	r24, r1
 5cc:	91 1d       	adc	r25, r1
 5ce:	9e 01       	movw	r18, r28
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	2f 5f       	subi	r18, 0xFF	; 255
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	03 2e       	mov	r0, r19
 5de:	00 0c       	add	r0, r0
 5e0:	44 0b       	sbc	r20, r20
 5e2:	55 0b       	sbc	r21, r21
 5e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodsi4>
 5e8:	f8 01       	movw	r30, r16
 5ea:	e2 1b       	sub	r30, r18
 5ec:	f3 0b       	sbc	r31, r19
 5ee:	9f 01       	movw	r18, r30
      rest = ((2 * (long)srd.step_delay)+rest)%(4 * srd.accel_count + 1);
 5f0:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <rest.1675+0x1>
 5f4:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <rest.1675>
      // Check if we at last step
      if(srd.accel_count >= 0){
 5f8:	dd 23       	and	r29, r29
 5fa:	2c f0       	brlt	.+10     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
        srd.run_state = STOP;
 5fc:	e7 e0       	ldi	r30, 0x07	; 7
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	80 81       	ld	r24, Z
 602:	88 7f       	andi	r24, 0xF8	; 248
 604:	80 83       	st	Z, r24
      }
      break;
  }
  srd.step_delay = new_step_delay;
 606:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <srd+0x2>
 60a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <srd+0x1>
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <__mulsi3>:
 63c:	db 01       	movw	r26, r22
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__muluhisi3>
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	a2 9f       	mul	r26, r18
 64c:	80 0d       	add	r24, r0
 64e:	91 1d       	adc	r25, r1
 650:	a3 9f       	mul	r26, r19
 652:	90 0d       	add	r25, r0
 654:	b2 9f       	mul	r27, r18
 656:	90 0d       	add	r25, r0
 658:	11 24       	eor	r1, r1
 65a:	08 95       	ret

0000065c <__udivmodsi4>:
 65c:	a1 e2       	ldi	r26, 0x21	; 33
 65e:	1a 2e       	mov	r1, r26
 660:	aa 1b       	sub	r26, r26
 662:	bb 1b       	sub	r27, r27
 664:	fd 01       	movw	r30, r26
 666:	0d c0       	rjmp	.+26     	; 0x682 <__udivmodsi4_ep>

00000668 <__udivmodsi4_loop>:
 668:	aa 1f       	adc	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	ee 1f       	adc	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	a2 17       	cp	r26, r18
 672:	b3 07       	cpc	r27, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	20 f0       	brcs	.+8      	; 0x682 <__udivmodsi4_ep>
 67a:	a2 1b       	sub	r26, r18
 67c:	b3 0b       	sbc	r27, r19
 67e:	e4 0b       	sbc	r30, r20
 680:	f5 0b       	sbc	r31, r21

00000682 <__udivmodsi4_ep>:
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a 94       	dec	r1
 68c:	69 f7       	brne	.-38     	; 0x668 <__udivmodsi4_loop>
 68e:	60 95       	com	r22
 690:	70 95       	com	r23
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	9b 01       	movw	r18, r22
 698:	ac 01       	movw	r20, r24
 69a:	bd 01       	movw	r22, r26
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret

000006a0 <__divmodsi4>:
 6a0:	05 2e       	mov	r0, r21
 6a2:	97 fb       	bst	r25, 7
 6a4:	1e f4       	brtc	.+6      	; 0x6ac <__divmodsi4+0xc>
 6a6:	00 94       	com	r0
 6a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <__negsi2>
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	07 d0       	rcall	.+14     	; 0x6be <__divmodsi4_neg2>
 6b0:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 6b4:	07 fc       	sbrc	r0, 7
 6b6:	03 d0       	rcall	.+6      	; 0x6be <__divmodsi4_neg2>
 6b8:	4e f4       	brtc	.+18     	; 0x6cc <__divmodsi4_exit>
 6ba:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__negsi2>

000006be <__divmodsi4_neg2>:
 6be:	50 95       	com	r21
 6c0:	40 95       	com	r20
 6c2:	30 95       	com	r19
 6c4:	21 95       	neg	r18
 6c6:	3f 4f       	sbci	r19, 0xFF	; 255
 6c8:	4f 4f       	sbci	r20, 0xFF	; 255
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255

000006cc <__divmodsi4_exit>:
 6cc:	08 95       	ret

000006ce <__negsi2>:
 6ce:	90 95       	com	r25
 6d0:	80 95       	com	r24
 6d2:	70 95       	com	r23
 6d4:	61 95       	neg	r22
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__umulhisi3>:
 6de:	a2 9f       	mul	r26, r18
 6e0:	b0 01       	movw	r22, r0
 6e2:	b3 9f       	mul	r27, r19
 6e4:	c0 01       	movw	r24, r0
 6e6:	a3 9f       	mul	r26, r19
 6e8:	70 0d       	add	r23, r0
 6ea:	81 1d       	adc	r24, r1
 6ec:	11 24       	eor	r1, r1
 6ee:	91 1d       	adc	r25, r1
 6f0:	b2 9f       	mul	r27, r18
 6f2:	70 0d       	add	r23, r0
 6f4:	81 1d       	adc	r24, r1
 6f6:	11 24       	eor	r1, r1
 6f8:	91 1d       	adc	r25, r1
 6fa:	08 95       	ret

000006fc <__muluhisi3>:
 6fc:	0e 94 6f 03 	call	0x6de	; 0x6de <__umulhisi3>
 700:	a5 9f       	mul	r26, r21
 702:	90 0d       	add	r25, r0
 704:	b4 9f       	mul	r27, r20
 706:	90 0d       	add	r25, r0
 708:	a4 9f       	mul	r26, r20
 70a:	80 0d       	add	r24, r0
 70c:	91 1d       	adc	r25, r1
 70e:	11 24       	eor	r1, r1
 710:	08 95       	ret

00000712 <__mulshisi3>:
 712:	b7 ff       	sbrs	r27, 7
 714:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__muluhisi3>

00000718 <__mulohisi3>:
 718:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__muluhisi3>
 71c:	82 1b       	sub	r24, r18
 71e:	93 0b       	sbc	r25, r19
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
